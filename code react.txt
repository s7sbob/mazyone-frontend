The following is a digest of the repository "mazyone-frontend".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: mazyone-frontend
Files Analyzed: 60
Total Text Size: 1013.59 KB
Estimated Tokens (text only): ~264,151

--- DIRECTORY STRUCTURE ---
mazyone-frontend/
├── .firebase/
│   └── hosting.ZGlzdA.cache [binary]
├── src/
│   ├── assets/
│   │   ├── auth-illustration.svg
│   │   └── react.svg
│   ├── components/
│   │   ├── common/
│   │   │   ├── LoadingSpinner.tsx
│   │   │   └── Modal.tsx
│   │   ├── Layout/
│   │   │   ├── Header.tsx
│   │   │   ├── Layout.tsx
│   │   │   ├── NotificationDropdown.tsx
│   │   │   ├── ProfileDropdown.tsx
│   │   │   └── Sidebar.tsx
│   │   ├── qr/
│   │   │   ├── QRShapes.tsx
│   │   │   └── QRStickers.tsx
│   │   └── ThemeCustomizer.tsx
│   ├── pages/
│   │   ├── Analytics.tsx
│   │   ├── Cards.tsx
│   │   ├── CardView.tsx
│   │   ├── Contacts.tsx
│   │   ├── CreateCard.tsx
│   │   ├── CVBuilder.tsx
│   │   ├── Dashboard.tsx
│   │   ├── Jobs.tsx
│   │   ├── LandingPage.tsx
│   │   ├── LandingPages.tsx
│   │   ├── Login.tsx
│   │   ├── Payment.tsx
│   │   ├── QRGenerator.tsx
│   │   ├── Referrals.tsx
│   │   ├── Register.tsx
│   │   ├── Scan.tsx
│   │   ├── Settings.tsx
│   │   ├── Subscription.tsx
│   │   └── Support.tsx
│   ├── store/
│   │   └── useStore.ts [binary]
│   ├── styles/
│   │   ├── animations.css
│   │   ├── colors.css
│   │   ├── components.css
│   │   ├── login.css
│   │   └── variables.css
│   ├── types/
│   │   └── index.ts [binary]
│   ├── utils/
│   │   ├── cn.ts [binary]
│   │   ├── constants.ts [binary]
│   │   ├── helpers.ts [binary]
│   │   └── mockData.ts [binary]
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts [binary]
├── .firebaserc
├── code.txt
├── eslint.config.js
├── firebase.json
├── package.json
├── postcss.config.js
├── README.md
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts [binary]


--- FILE CONTENTS ---
============================================================
FILE: src/assets/auth-illustration.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="717" zoomAndPan="magnify" viewBox="0 0 537.75 525.000007" height="700" preserveAspectRatio="xMidYMid meet" version="1.2"><defs><clipPath id="81f81b2e1a"><path d="M 0.386719 272 L 254 272 L 254 450.511719 L 0.386719 450.511719 Z M 0.386719 272 "/></clipPath><clipPath id="bc6fb4ccb9"><path d="M 0.386719 272 L 189 272 L 189 450.511719 L 0.386719 450.511719 Z M 0.386719 272 "/></clipPath></defs><g id="cd3eee068d"><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 213.132812 60.644531 C 206.34375 54.042969 194.773438 53.5625 192.703125 64.660156 C 189.941406 79.5 189.378906 87.980469 183.550781 102.699219 C 166.734375 145.199219 153.667969 162.699219 156.574219 212.050781 C 157.25 223.542969 161.109375 234.796875 157.847656 246.304688 C 155.886719 253.238281 150.164062 261.023438 146.957031 267.40625 L 246.792969 327.082031 C 249.519531 324.617188 252.171875 320.265625 254.726562 317.679688 C 263.109375 309.207031 272.359375 305.109375 281.917969 298.457031 C 294.765625 289.511719 311.566406 273.804688 318.707031 259.757812 C 319.492188 259.660156 213.132812 60.644531 213.132812 60.644531 Z M 213.132812 60.644531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 213.917969 105.113281 C 212.292969 113.71875 210.628906 122.09375 209.035156 131.871094 C 207.222656 142.988281 203.019531 154.070312 201.101562 165.164062 C 200.914062 166.257812 200.71875 167.367188 200.710938 168.480469 C 200.660156 175.523438 206.882812 181.246094 211.429688 184.0625 C 212.398438 184.664062 213.222656 184.335938 213.910156 183.269531 L 213.910156 105.113281 Z M 213.917969 105.113281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 318.707031 259.757812 C 318.855469 259.742188 315.066406 252.410156 308.847656 240.578125 C 306.632812 240.625 304.40625 240.667969 302.1875 240.714844 C 286.636719 241.027344 271.078125 241.34375 255.527344 241.664062 C 242.914062 241.921875 230.292969 242.183594 217.679688 242.4375 C 216.539062 242.460938 215.042969 242.257812 213.820312 242.414062 C 213.214844 243.277344 212.210938 243.089844 212.210938 244.316406 C 212.210938 247.523438 213.304688 254.289062 213.804688 256.371094 C 214.839844 260.613281 216.539062 264.484375 219.25 267.910156 C 222.621094 272.179688 227.753906 274.671875 232.898438 276.425781 C 249.941406 282.222656 269.425781 280.121094 285.777344 287.820312 C 287.835938 288.785156 289.992188 289.632812 292.015625 290.683594 C 302.519531 281.828125 313.34375 270.328125 318.707031 259.773438 Z M 318.707031 259.757812 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 214.710938 241.464844 C 214.953125 241.320312 215.160156 241.195312 215.304688 241.113281 C 215.152344 241.195312 214.9375 241.320312 214.710938 241.464844 Z M 214.710938 241.464844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 215.304688 241.113281 C 215.386719 241.066406 215.460938 241.027344 215.476562 241.015625 C 215.507812 240.992188 215.429688 241.035156 215.304688 241.113281 Z M 215.304688 241.113281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 214.710938 241.464844 C 213.925781 241.941406 212.855469 242.609375 213.199219 242.519531 C 213.394531 242.46875 213.601562 242.429688 213.8125 242.40625 C 213.871094 242.316406 213.941406 242.226562 213.992188 242.117188 C 214.082031 241.914062 214.398438 241.671875 214.703125 241.472656 Z M 214.710938 241.464844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.199219 4.515625 L 232.621094 4.515625 C 221.347656 4.515625 212.210938 13.65625 212.210938 24.929688 L 212.210938 243.328125 C 212.210938 254.605469 221.347656 263.742188 232.621094 263.742188 L 339.199219 263.742188 C 350.472656 263.742188 359.613281 254.605469 359.613281 243.328125 L 359.613281 24.929688 C 359.613281 13.65625 350.472656 4.515625 339.199219 4.515625 Z M 339.199219 4.515625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 339.199219 12.683594 C 345.957031 12.683594 351.449219 18.175781 351.449219 24.929688 L 351.449219 243.328125 C 351.449219 250.085938 345.957031 255.578125 339.199219 255.578125 L 232.621094 255.578125 C 225.867188 255.578125 220.375 250.085938 220.375 243.328125 L 220.375 24.929688 C 220.375 18.175781 225.867188 12.683594 232.621094 12.683594 L 339.199219 12.683594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fcca03;fill-opacity:1;" d="M 395.761719 149.265625 L 351.441406 149.15625 L 351.441406 166.722656 L 240.414062 166.722656 C 235.902344 166.722656 232.246094 163.066406 232.246094 158.554688 L 232.246094 60.433594 C 232.246094 55.804688 236 52.050781 240.628906 52.050781 L 395.851562 52.050781 C 400.484375 52.050781 404.234375 55.804688 404.234375 60.433594 L 404.234375 140.882812 C 404.234375 145.550781 400.421875 149.320312 395.757812 149.265625 Z M 395.761719 149.265625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 334.152344 91.101562 L 351.972656 91.101562 L 351.972656 73.28125 L 334.152344 73.28125 Z M 336.371094 75.5 L 349.753906 75.5 L 349.753906 88.886719 L 336.371094 88.886719 Z M 336.371094 75.5 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.140625 78.269531 L 346.984375 78.269531 L 346.984375 86.113281 L 339.140625 86.113281 Z M 339.140625 78.269531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 351.972656 108.933594 L 334.152344 108.933594 L 334.152344 126.753906 L 351.972656 126.753906 Z M 349.753906 124.539062 L 336.371094 124.539062 L 336.371094 111.148438 L 349.753906 111.148438 Z M 349.753906 124.539062 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.140625 113.921875 L 346.984375 113.921875 L 346.984375 121.765625 L 339.140625 121.765625 Z M 339.140625 113.921875 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 387.621094 73.28125 L 369.800781 73.28125 L 369.800781 91.101562 L 387.621094 91.101562 Z M 385.402344 88.886719 L 372.019531 88.886719 L 372.019531 75.5 L 385.402344 75.5 Z M 385.402344 88.886719 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 374.789062 78.269531 L 382.632812 78.269531 L 382.632812 86.113281 L 374.789062 86.113281 Z M 374.789062 78.269531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 354.519531 78.375 L 357.066406 78.375 L 357.066406 80.921875 L 354.519531 80.921875 Z M 354.519531 78.375 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 78.375 L 362.160156 78.375 L 362.160156 80.921875 L 359.613281 80.921875 Z M 359.613281 78.375 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 73.28125 L 362.160156 73.28125 L 362.160156 75.828125 L 359.613281 75.828125 Z M 359.613281 73.28125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 367.253906 75.828125 L 367.253906 73.28125 L 364.707031 73.28125 L 364.707031 78.375 L 367.253906 78.375 Z M 367.253906 75.828125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 88.5625 L 367.253906 88.5625 L 367.253906 91.109375 L 364.707031 91.109375 Z M 364.707031 88.5625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 377.433594 108.933594 L 379.980469 108.933594 L 379.980469 103.839844 L 377.433594 103.839844 Z M 377.433594 108.933594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 387.621094 116.574219 L 387.621094 106.386719 L 385.074219 106.386719 L 385.074219 103.839844 L 382.527344 103.839844 L 382.527344 119.121094 L 385.074219 119.121094 L 385.074219 116.574219 Z M 387.621094 116.574219 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 379.980469 119.121094 L 382.527344 119.121094 L 382.527344 121.667969 L 379.980469 121.667969 Z M 379.980469 119.121094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 385.074219 119.121094 L 387.621094 119.121094 L 387.621094 121.667969 L 385.074219 121.667969 Z M 385.074219 119.121094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 382.527344 124.214844 L 382.527344 126.753906 L 387.621094 126.753906 L 387.621094 124.214844 L 385.074219 124.214844 L 385.074219 121.667969 L 382.527344 121.667969 Z M 382.527344 124.214844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 372.347656 121.667969 L 377.433594 121.667969 L 377.433594 116.574219 L 374.894531 116.574219 L 374.894531 114.027344 L 377.433594 114.027344 L 377.433594 108.933594 L 374.894531 108.933594 L 374.894531 111.480469 L 369.800781 111.480469 L 369.800781 116.574219 L 372.347656 116.574219 L 372.347656 119.121094 L 369.800781 119.121094 L 369.800781 116.574219 L 367.253906 116.574219 L 367.253906 121.667969 L 364.707031 121.667969 L 364.707031 116.574219 L 362.160156 116.574219 L 362.160156 121.667969 L 359.613281 121.667969 L 359.613281 124.214844 L 357.066406 124.214844 L 357.066406 121.667969 L 359.613281 121.667969 L 359.613281 114.027344 L 357.066406 114.027344 L 357.066406 108.933594 L 362.160156 108.933594 L 362.160156 106.386719 L 354.519531 106.386719 L 354.519531 116.574219 L 357.066406 116.574219 L 357.066406 119.121094 L 354.519531 119.121094 L 354.519531 126.753906 L 364.707031 126.753906 L 364.707031 124.214844 L 367.253906 124.214844 L 367.253906 126.753906 L 372.347656 126.753906 L 372.347656 124.214844 L 369.800781 124.214844 L 369.800781 121.667969 Z M 372.347656 121.667969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 377.433594 114.027344 L 379.980469 114.027344 L 379.980469 116.574219 L 377.433594 116.574219 Z M 377.433594 114.027344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 379.980469 93.648438 L 382.527344 93.648438 L 382.527344 96.199219 L 379.980469 96.199219 Z M 379.980469 93.648438 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 382.527344 101.292969 L 387.621094 101.292969 L 387.621094 96.199219 L 382.527344 96.199219 L 382.527344 98.746094 L 379.980469 98.746094 L 379.980469 96.199219 L 377.433594 96.199219 L 377.433594 101.292969 Z M 382.527344 101.292969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 91.101562 L 359.613281 96.199219 L 362.160156 96.199219 L 362.160156 88.5625 L 364.707031 88.5625 L 364.707031 86.015625 L 367.253906 86.015625 L 367.253906 80.921875 L 364.707031 80.921875 L 364.707031 83.46875 L 362.160156 83.46875 L 362.160156 86.015625 L 359.613281 86.015625 L 359.613281 83.46875 L 357.066406 83.46875 L 357.066406 88.5625 L 359.613281 88.5625 Z M 359.613281 91.101562 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 346.878906 103.839844 L 346.878906 106.386719 L 351.972656 106.386719 L 351.972656 103.839844 L 349.425781 103.839844 L 349.425781 101.292969 L 346.878906 101.292969 Z M 346.878906 103.839844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 349.425781 98.746094 L 351.972656 98.746094 L 351.972656 101.292969 L 349.425781 101.292969 Z M 349.425781 98.746094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 344.332031 98.746094 L 344.332031 96.199219 L 341.792969 96.199219 L 341.792969 93.648438 L 334.152344 93.648438 L 334.152344 106.386719 L 336.699219 106.386719 L 336.699219 103.839844 L 341.792969 103.839844 L 341.792969 101.292969 L 339.246094 101.292969 L 339.246094 98.746094 L 341.792969 98.746094 L 341.792969 101.292969 L 346.878906 101.292969 L 346.878906 98.746094 Z M 344.332031 98.746094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 341.792969 103.839844 L 344.339844 103.839844 L 344.339844 106.386719 L 341.792969 106.386719 Z M 341.792969 103.839844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 103.839844 L 367.253906 103.839844 L 367.253906 106.386719 L 369.800781 106.386719 L 369.800781 108.933594 L 374.894531 108.933594 L 374.894531 103.839844 L 377.441406 103.839844 L 377.441406 101.292969 L 374.894531 101.292969 L 374.894531 96.199219 L 372.347656 96.199219 L 372.347656 98.746094 L 369.800781 98.746094 L 369.800781 96.199219 L 372.347656 96.199219 L 372.347656 93.648438 L 364.707031 93.648438 L 364.707031 96.199219 L 367.253906 96.199219 L 367.253906 101.292969 L 364.707031 101.292969 L 364.707031 96.199219 L 362.160156 96.199219 L 362.160156 98.746094 L 357.066406 98.746094 L 357.066406 88.554688 L 354.519531 88.554688 L 354.519531 93.648438 L 344.332031 93.648438 L 344.332031 96.199219 L 346.878906 96.199219 L 346.878906 98.746094 L 349.425781 98.746094 L 349.425781 96.199219 L 354.519531 96.199219 L 354.519531 103.839844 L 362.160156 103.839844 L 362.160156 106.386719 L 364.707031 106.386719 Z M 369.800781 101.292969 L 372.347656 101.292969 L 372.347656 103.839844 L 369.800781 103.839844 Z M 369.800781 101.292969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 108.933594 L 367.253906 108.933594 L 367.253906 111.480469 L 364.707031 111.480469 Z M 364.707031 108.933594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 114.027344 L 367.253906 114.027344 L 367.253906 116.574219 L 364.707031 116.574219 Z M 364.707031 114.027344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 111.480469 L 362.160156 111.480469 L 362.160156 114.027344 L 359.613281 114.027344 Z M 359.613281 111.480469 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 303.597656 94.796875 C 303.597656 95.5625 303.558594 96.328125 303.484375 97.089844 C 303.410156 97.855469 303.296875 98.613281 303.148438 99.363281 C 302.996094 100.117188 302.8125 100.859375 302.589844 101.59375 C 302.367188 102.324219 302.109375 103.046875 301.816406 103.753906 C 301.523438 104.464844 301.195312 105.15625 300.832031 105.832031 C 300.472656 106.507812 300.078125 107.164062 299.652344 107.804688 C 299.226562 108.441406 298.769531 109.054688 298.285156 109.648438 C 297.796875 110.242188 297.28125 110.808594 296.742188 111.351562 C 296.199219 111.894531 295.632812 112.40625 295.039062 112.894531 C 294.445312 113.378906 293.832031 113.835938 293.195312 114.261719 C 292.554688 114.6875 291.898438 115.082031 291.222656 115.441406 C 290.546875 115.804688 289.855469 116.132812 289.148438 116.425781 C 288.4375 116.71875 287.71875 116.976562 286.984375 117.199219 C 286.25 117.421875 285.507812 117.609375 284.753906 117.757812 C 284.003906 117.90625 283.246094 118.019531 282.484375 118.09375 C 281.71875 118.167969 280.957031 118.207031 280.1875 118.207031 C 279.421875 118.207031 278.65625 118.167969 277.894531 118.09375 C 277.132812 118.019531 276.375 117.90625 275.621094 117.757812 C 274.871094 117.609375 274.128906 117.421875 273.394531 117.199219 C 272.660156 116.976562 271.9375 116.71875 271.230469 116.425781 C 270.523438 116.132812 269.828125 115.804688 269.152344 115.441406 C 268.476562 115.082031 267.820312 114.6875 267.183594 114.261719 C 266.546875 113.835938 265.929688 113.378906 265.339844 112.894531 C 264.746094 112.40625 264.179688 111.894531 263.636719 111.351562 C 263.09375 110.808594 262.578125 110.242188 262.09375 109.648438 C 261.605469 109.054688 261.152344 108.441406 260.726562 107.804688 C 260.300781 107.164062 259.90625 106.507812 259.542969 105.832031 C 259.183594 105.15625 258.855469 104.464844 258.5625 103.753906 C 258.269531 103.046875 258.011719 102.324219 257.789062 101.59375 C 257.566406 100.859375 257.378906 100.117188 257.230469 99.363281 C 257.082031 98.613281 256.96875 97.855469 256.894531 97.089844 C 256.816406 96.328125 256.78125 95.5625 256.78125 94.796875 C 256.78125 94.03125 256.816406 93.265625 256.894531 92.5 C 256.96875 91.738281 257.082031 90.980469 257.230469 90.230469 C 257.378906 89.476562 257.566406 88.734375 257.789062 88 C 258.011719 87.265625 258.269531 86.546875 258.5625 85.835938 C 258.855469 85.128906 259.183594 84.4375 259.542969 83.761719 C 259.90625 83.085938 260.300781 82.429688 260.726562 81.789062 C 261.152344 81.152344 261.605469 80.539062 262.09375 79.945312 C 262.578125 79.351562 263.09375 78.785156 263.636719 78.242188 C 264.179688 77.699219 264.746094 77.1875 265.339844 76.699219 C 265.929688 76.214844 266.546875 75.757812 267.183594 75.332031 C 267.820312 74.90625 268.476562 74.511719 269.152344 74.148438 C 269.828125 73.789062 270.523438 73.460938 271.230469 73.167969 C 271.9375 72.875 272.660156 72.617188 273.394531 72.394531 C 274.128906 72.171875 274.871094 71.984375 275.621094 71.835938 C 276.375 71.6875 277.132812 71.574219 277.894531 71.5 C 278.65625 71.421875 279.421875 71.386719 280.1875 71.386719 C 280.957031 71.386719 281.71875 71.421875 282.484375 71.5 C 283.246094 71.574219 284.003906 71.6875 284.753906 71.835938 C 285.507812 71.984375 286.25 72.171875 286.984375 72.394531 C 287.71875 72.617188 288.4375 72.875 289.148438 73.167969 C 289.855469 73.460938 290.546875 73.789062 291.222656 74.148438 C 291.898438 74.511719 292.554688 74.90625 293.195312 75.332031 C 293.832031 75.757812 294.445312 76.214844 295.039062 76.699219 C 295.632812 77.1875 296.199219 77.699219 296.742188 78.242188 C 297.28125 78.785156 297.796875 79.351562 298.285156 79.945312 C 298.769531 80.539062 299.226562 81.152344 299.652344 81.789062 C 300.078125 82.429688 300.472656 83.085938 300.832031 83.761719 C 301.195312 84.4375 301.523438 85.128906 301.816406 85.835938 C 302.109375 86.546875 302.367188 87.265625 302.589844 88 C 302.8125 88.734375 302.996094 89.476562 303.148438 90.230469 C 303.296875 90.980469 303.410156 91.738281 303.484375 92.5 C 303.558594 93.265625 303.597656 94.03125 303.597656 94.796875 Z M 303.597656 94.796875 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 289.394531 86.757812 C 289.394531 87.363281 289.335938 87.960938 289.21875 88.554688 C 289.101562 89.148438 288.925781 89.722656 288.695312 90.28125 C 288.460938 90.839844 288.179688 91.371094 287.84375 91.875 C 287.507812 92.375 287.125 92.839844 286.699219 93.269531 C 286.269531 93.695312 285.804688 94.078125 285.304688 94.414062 C 284.800781 94.75 284.269531 95.03125 283.710938 95.265625 C 283.152344 95.496094 282.578125 95.671875 281.984375 95.789062 C 281.390625 95.90625 280.792969 95.964844 280.1875 95.964844 C 279.585938 95.964844 278.984375 95.90625 278.390625 95.789062 C 277.800781 95.671875 277.222656 95.496094 276.664062 95.265625 C 276.105469 95.03125 275.578125 94.75 275.074219 94.414062 C 274.570312 94.078125 274.105469 93.695312 273.679688 93.269531 C 273.25 92.839844 272.871094 92.375 272.535156 91.875 C 272.199219 91.371094 271.914062 90.839844 271.683594 90.28125 C 271.453125 89.722656 271.277344 89.148438 271.160156 88.554688 C 271.042969 87.960938 270.984375 87.363281 270.984375 86.757812 C 270.984375 86.152344 271.042969 85.554688 271.160156 84.960938 C 271.277344 84.371094 271.453125 83.792969 271.683594 83.234375 C 271.914062 82.675781 272.199219 82.144531 272.535156 81.644531 C 272.871094 81.140625 273.25 80.675781 273.679688 80.246094 C 274.105469 79.820312 274.570312 79.4375 275.074219 79.101562 C 275.578125 78.765625 276.105469 78.484375 276.664062 78.253906 C 277.222656 78.019531 277.800781 77.847656 278.390625 77.726562 C 278.984375 77.609375 279.585938 77.550781 280.1875 77.550781 C 280.792969 77.550781 281.390625 77.609375 281.984375 77.726562 C 282.578125 77.847656 283.152344 78.019531 283.710938 78.253906 C 284.269531 78.484375 284.800781 78.765625 285.304688 79.101562 C 285.804688 79.4375 286.269531 79.820312 286.699219 80.246094 C 287.125 80.675781 287.507812 81.140625 287.84375 81.644531 C 288.179688 82.144531 288.460938 82.675781 288.695312 83.234375 C 288.925781 83.792969 289.101562 84.371094 289.21875 84.960938 C 289.335938 85.554688 289.394531 86.152344 289.394531 86.757812 Z M 289.394531 86.757812 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 296.503906 111.578125 C 294.472656 104.476562 287.941406 99.269531 280.1875 99.269531 C 272.4375 99.269531 265.902344 104.476562 263.875 111.578125 C 268.089844 115.675781 273.84375 118.207031 280.1875 118.207031 C 286.535156 118.207031 292.285156 115.675781 296.503906 111.578125 Z M 296.503906 111.578125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 308.878906 132.402344 L 251.5 132.402344 C 250.054688 132.402344 248.878906 131.226562 248.878906 129.78125 C 248.878906 128.335938 250.054688 127.160156 251.5 127.160156 L 308.878906 127.160156 C 310.324219 127.160156 311.5 128.335938 311.5 129.78125 C 311.5 131.226562 310.324219 132.402344 308.878906 132.402344 Z M 308.878906 132.402344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 320.734375 148.832031 L 251.5 148.832031 C 250.054688 148.832031 248.878906 147.65625 248.878906 146.210938 C 248.878906 144.765625 250.054688 143.589844 251.5 143.589844 L 320.734375 143.589844 C 322.183594 143.589844 323.359375 144.765625 323.359375 146.210938 C 323.359375 147.65625 322.183594 148.832031 320.734375 148.832031 Z M 320.734375 148.832031 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 376.054688 215.054688 C 370.632812 218.605469 364.292969 219.25 359.613281 217.035156 L 359.613281 229.378906 L 378.175781 213.339844 L 370.894531 211.316406 C 370.9375 211.347656 370.976562 211.386719 371.023438 211.414062 C 372.691406 212.644531 374.378906 213.851562 376.054688 215.0625 Z M 376.054688 215.054688 "/><path style=" stroke:none;fill-rule:nonzero;fill:#e29969;fill-opacity:1;" d="M 359.613281 217.035156 C 364.292969 219.25 370.632812 218.605469 376.054688 215.054688 C 374.371094 213.851562 372.691406 212.636719 371.023438 211.40625 C 370.976562 211.378906 370.9375 211.339844 370.894531 211.3125 L 359.621094 208.1875 L 359.621094 217.035156 Z M 359.613281 217.035156 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 383.402344 191.988281 C 383.953125 192.703125 384.410156 193.476562 384.773438 194.308594 C 385.140625 195.144531 385.40625 196.023438 385.570312 196.945312 C 385.738281 197.867188 385.800781 198.816406 385.765625 199.792969 C 385.726562 200.765625 385.585938 201.75 385.34375 202.742188 C 385.097656 203.734375 384.761719 204.714844 384.324219 205.683594 C 383.886719 206.652344 383.359375 207.589844 382.746094 208.5 C 382.132812 209.410156 381.441406 210.273438 380.671875 211.085938 C 379.902344 211.902344 379.074219 212.652344 378.179688 213.34375 C 377.285156 214.03125 376.347656 214.644531 375.367188 215.179688 C 374.382812 215.71875 373.371094 216.167969 372.335938 216.53125 C 371.300781 216.894531 370.261719 217.164062 369.210938 217.34375 C 368.164062 217.519531 367.128906 217.597656 366.109375 217.582031 C 365.089844 217.5625 364.101562 217.449219 363.148438 217.242188 C 362.195312 217.03125 361.292969 216.726562 360.445312 216.332031 C 359.59375 215.9375 358.8125 215.457031 358.097656 214.890625 C 357.382812 214.328125 356.753906 213.6875 356.203125 212.976562 C 355.652344 212.261719 355.195312 211.488281 354.828125 210.65625 C 354.464844 209.820312 354.199219 208.941406 354.03125 208.019531 C 353.863281 207.097656 353.800781 206.148438 353.839844 205.171875 C 353.878906 204.199219 354.019531 203.214844 354.261719 202.222656 C 354.503906 201.230469 354.84375 200.25 355.28125 199.28125 C 355.71875 198.3125 356.242188 197.375 356.855469 196.464844 C 357.472656 195.554688 358.164062 194.691406 358.929688 193.878906 C 359.699219 193.0625 360.53125 192.3125 361.421875 191.621094 C 362.316406 190.933594 363.253906 190.320312 364.238281 189.785156 C 365.222656 189.246094 366.230469 188.796875 367.265625 188.433594 C 368.300781 188.070312 369.34375 187.800781 370.390625 187.621094 C 371.4375 187.445312 372.472656 187.367188 373.492188 187.382812 C 374.515625 187.402344 375.5 187.515625 376.453125 187.722656 C 377.40625 187.933594 378.308594 188.238281 379.160156 188.632812 C 380.007812 189.027344 380.792969 189.507812 381.503906 190.074219 C 382.21875 190.636719 382.851562 191.277344 383.402344 191.988281 Z M 383.402344 191.988281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 381.660156 159.203125 C 382.25 159.882812 382.753906 160.628906 383.164062 161.4375 C 383.578125 162.25 383.894531 163.113281 384.113281 164.023438 C 384.335938 164.933594 384.453125 165.878906 384.472656 166.855469 C 384.488281 167.832031 384.40625 168.820312 384.222656 169.824219 C 384.035156 170.828125 383.753906 171.828125 383.375 172.820312 C 382.992188 173.8125 382.523438 174.78125 381.960938 175.722656 C 381.402344 176.667969 380.761719 177.566406 380.042969 178.425781 C 379.320312 179.285156 378.535156 180.082031 377.683594 180.820312 C 376.832031 181.5625 375.933594 182.226562 374.980469 182.820312 C 374.03125 183.414062 373.050781 183.921875 372.035156 184.34375 C 371.023438 184.765625 370 185.097656 368.964844 185.335938 C 367.925781 185.570312 366.898438 185.710938 365.878906 185.753906 C 364.859375 185.796875 363.867188 185.738281 362.902344 185.585938 C 361.941406 185.429688 361.023438 185.179688 360.152344 184.835938 C 359.28125 184.488281 358.472656 184.054688 357.726562 183.53125 C 356.980469 183.007812 356.3125 182.410156 355.722656 181.726562 C 355.132812 181.046875 354.628906 180.300781 354.21875 179.492188 C 353.804688 178.679688 353.488281 177.820312 353.269531 176.90625 C 353.046875 175.996094 352.929688 175.050781 352.910156 174.074219 C 352.894531 173.101562 352.976562 172.109375 353.164062 171.105469 C 353.347656 170.101562 353.628906 169.105469 354.007812 168.109375 C 354.390625 167.117188 354.859375 166.152344 355.421875 165.207031 C 355.980469 164.261719 356.621094 163.363281 357.339844 162.503906 C 358.0625 161.648438 358.847656 160.847656 359.699219 160.109375 C 360.550781 159.367188 361.453125 158.703125 362.402344 158.109375 C 363.351562 157.515625 364.332031 157.007812 365.347656 156.585938 C 366.359375 156.164062 367.382812 155.832031 368.417969 155.597656 C 369.457031 155.359375 370.484375 155.21875 371.503906 155.179688 C 372.523438 155.136719 373.515625 155.191406 374.480469 155.347656 C 375.441406 155.5 376.359375 155.75 377.230469 156.097656 C 378.101562 156.441406 378.910156 156.875 379.65625 157.398438 C 380.402344 157.921875 381.070312 158.523438 381.660156 159.203125 Z M 381.660156 159.203125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#e6e6e7;fill-opacity:1;" d="M 125.773438 282.410156 L 244.261719 366.234375 L 265.460938 336.273438 L 146.964844 252.445312 Z M 125.773438 282.410156 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 126.011719 283.34375 L 147.199219 253.382812 L 206.136719 295.070312 L 184.949219 325.03125 Z M 126.011719 283.34375 "/><g clip-rule="nonzero" clip-path="url(#81f81b2e1a)"><path style=" stroke:none;fill-rule:nonzero;fill:#006be3;fill-opacity:1;" d="M 124.015625 272.53125 L 0.386719 450.902344 L 193.160156 450.902344 L 253.347656 364.066406 Z M 124.015625 272.53125 "/></g><g clip-rule="nonzero" clip-path="url(#bc6fb4ccb9)"><path style=" stroke:none;fill-rule:nonzero;fill:#0076e0;fill-opacity:1;" d="M 124.015625 272.53125 L 0.386719 450.902344 L 96.769531 450.902344 L 188.667969 318.3125 Z M 124.015625 272.53125 "/></g><path style=" stroke:none;fill-rule:nonzero;fill:#fcca03;fill-opacity:1;" d="M 140.734375 315.515625 C 140.734375 316.273438 140.660156 317.027344 140.511719 317.769531 C 140.363281 318.515625 140.144531 319.238281 139.851562 319.941406 C 139.5625 320.640625 139.207031 321.308594 138.785156 321.9375 C 138.363281 322.570312 137.882812 323.152344 137.347656 323.691406 C 136.8125 324.226562 136.226562 324.707031 135.597656 325.128906 C 134.964844 325.550781 134.300781 325.90625 133.597656 326.195312 C 132.898438 326.484375 132.175781 326.707031 131.429688 326.851562 C 130.683594 327 129.933594 327.074219 129.175781 327.074219 C 128.417969 327.074219 127.664062 327 126.921875 326.851562 C 126.175781 326.707031 125.453125 326.484375 124.75 326.195312 C 124.050781 325.90625 123.382812 325.550781 122.753906 325.128906 C 122.121094 324.707031 121.539062 324.226562 121.003906 323.691406 C 120.464844 323.152344 119.984375 322.570312 119.566406 321.9375 C 119.144531 321.308594 118.785156 320.640625 118.496094 319.941406 C 118.207031 319.238281 117.988281 318.515625 117.839844 317.769531 C 117.691406 317.027344 117.617188 316.273438 117.617188 315.515625 C 117.617188 314.757812 117.691406 314.003906 117.839844 313.261719 C 117.988281 312.515625 118.207031 311.792969 118.496094 311.09375 C 118.785156 310.390625 119.144531 309.726562 119.566406 309.09375 C 119.984375 308.464844 120.464844 307.878906 121.003906 307.34375 C 121.539062 306.804688 122.121094 306.328125 122.753906 305.90625 C 123.382812 305.484375 124.050781 305.128906 124.75 304.835938 C 125.453125 304.546875 126.175781 304.328125 126.921875 304.179688 C 127.664062 304.03125 128.417969 303.957031 129.175781 303.957031 C 129.933594 303.957031 130.683594 304.03125 131.429688 304.179688 C 132.175781 304.328125 132.898438 304.546875 133.597656 304.835938 C 134.300781 305.128906 134.964844 305.484375 135.597656 305.90625 C 136.226562 306.328125 136.8125 306.804688 137.347656 307.34375 C 137.882812 307.878906 138.363281 308.464844 138.785156 309.09375 C 139.207031 309.726562 139.5625 310.390625 139.851562 311.09375 C 140.144531 311.792969 140.363281 312.515625 140.511719 313.261719 C 140.660156 314.003906 140.734375 314.757812 140.734375 315.515625 Z M 140.734375 315.515625 "/></g></svg>

============================================================
FILE: src/assets/react.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

============================================================
FILE: src/components/common/LoadingSpinner.tsx
============================================================
import React from 'react';
import { cn } from '../../utils/cn';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8'
  };

  return (
    <div className={cn("animate-spin rounded-full border-2 border-neutral-300 border-t-primary-500", sizeClasses[size], className)} />
  );
};

export default LoadingSpinner;


============================================================
FILE: src/components/common/Modal.tsx
============================================================
import React from 'react';
import { X } from 'lucide-react';
import { cn } from '../../utils/cn';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-2xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={cn("bg-white dark:bg-neutral-900 rounded-lg w-full", sizeClasses[size])}>
        {title && (
          <div className="flex items-center justify-between p-6 border-b border-neutral-200 dark:border-neutral-700">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              {title}
            </h3>
            <button
              onClick={onClose}
              className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        )}
        
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;


============================================================
FILE: src/components/Layout/Header.tsx
============================================================
import React from 'react';
import { Menu, Moon, Sun, Search, Link, Crown } from 'lucide-react';
import { useStore } from '../../store/useStore';
import NotificationDropdown from './NotificationDropdown';
import ProfileDropdown from './ProfileDropdown';

const Header = () => {
  const { user, darkMode, toggleDarkMode, toggleSidebar } = useStore();

  return (
    <header className="bg-white dark:bg-neutral-900  border-neutral-200 dark:border-neutral-700 px-6 py-4 sticky top-0 z-30">
      <div className="flex items-center justify-between">
        {/* Left side */}
        <div className="flex items-center space-x-4 space-x-reverse">
          <button
            onClick={toggleSidebar}
            className="lg:hidden p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
          >
            <Menu className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
          </button>
          
          <div className="hidden md:block">
            <h1 className="text-xl font-semibold text-neutral-800 dark:text-neutral-100">
              مرحباً، {user?.name?.split(' ')[0] || 'المستخدم'}
            </h1>
          </div>
        </div>

        {/* Center - Search (hidden on mobile) */}
        <div className="hidden lg:block flex-1 max-w-md mx-8">
          <div className="relative">
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
            <input
              type="text"
              placeholder="البحث في مزيون..."
              className="w-full pl-4 pr-10 py-2 border border-neutral-200 dark:border-neutral-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-neutral-50 dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100 text-sm"
            />
          </div>
        </div>

        {/* Right side */}
        <div className="flex items-center space-x-3 space-x-reverse">
          {user?.subscription === 'free' && (
  <Link to="/subscription" className="btn-primary text-sm">
    <Crown className="w-4 h-4 mr-1" />
    ترقية
  </Link>
)}
          {/* Dark mode toggle */}
          <button
            onClick={toggleDarkMode}
            className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
            title={darkMode ? 'الوضع الفاتح' : 'الوضع الليلي'}
          >
            {darkMode ? (
              <Sun className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            ) : (
              <Moon className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            )}
          </button>

          {/* Notifications */}
          <NotificationDropdown />

          {/* Profile */}
          <ProfileDropdown />
        </div>
      </div>
    </header>
  );
};

export default Header;


============================================================
FILE: src/components/Layout/Layout.tsx
============================================================
import React from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';
import Header from './Header';
import { useStore } from '../../store/useStore';

interface LayoutProps {
  children?: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { sidebarOpen } = useStore();

  return (
    <div className="h-screen bg-white dark:bg-neutral-900 overflow-hidden">
      <Sidebar />
      <div className={`h-full flex flex-col transition-all duration-300 ${sidebarOpen ? 'lg:mr-64' : 'lg:mr-16'}`}>
        <Header />
        <main className="flex-1 overflow-y-auto p-6">
          {children || <Outlet />}
        </main>
      </div>
    </div>
  );
};

export default Layout;


============================================================
FILE: src/components/Layout/NotificationDropdown.tsx
============================================================
import React, { useState } from 'react';
import { Bell, X, Check, Eye, Trash2, Settings } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { cn } from '../../utils/cn';
import { formatDistanceToNow } from 'date-fns';
import { ar } from 'date-fns/locale';

const NotificationDropdown = () => {
  const { notifications, markNotificationAsRead, markAllNotificationsAsRead } = useStore();
  const [isOpen, setIsOpen] = useState(false);
  
  const unreadNotifications = notifications.filter(n => !n.isRead);
  const recentNotifications = notifications.slice(0, 5);

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'card_view': return Eye;
      case 'card_share': return '🔗';
      case 'contact_add': return '👤';
      case 'success': return '✅';
      case 'warning': return '⚠️';
      case 'error': return '❌';
      default: return Bell;
    }
  };

  const getNotificationColor = (type: string) => {
    switch (type) {
      case 'card_view': return 'text-blue-500';
      case 'card_share': return 'text-green-500';
      case 'contact_add': return 'text-purple-500';
      case 'success': return 'text-green-500';
      case 'warning': return 'text-yellow-500';
      case 'error': return 'text-red-500';
      default: return 'text-neutral-500';
    }
  };

  const handleNotificationClick = (notification: any) => {
    if (!notification.isRead) {
      markNotificationAsRead(notification.id);
    }
    if (notification.actionUrl) {
      window.location.href = notification.actionUrl;
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
      >
        <Bell className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
        {unreadNotifications.length > 0 && (
          <span 
            className="absolute -top-1 -right-1 w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold text-white"
            style={{ backgroundColor: '#FACC15', color: '#2D2D2D' }}
          >
            {unreadNotifications.length > 9 ? '9+' : unreadNotifications.length}
          </span>
        )}
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute left-0 mt-2 w-80 bg-white dark:bg-neutral-900 rounded-lg shadow-xl border border-neutral-200 dark:border-neutral-700 z-50">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-700">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                الإشعارات
              </h3>
              <div className="flex items-center space-x-2 space-x-reverse">
                {unreadNotifications.length > 0 && (
                  <button
                    onClick={markAllNotificationsAsRead}
                    className="text-xs text-blue-500 hover:text-blue-600 font-medium"
                  >
                    تحديد الكل كمقروء
                  </button>
                )}
                <button
                  onClick={() => setIsOpen(false)}
                  className="p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Notifications List */}
            <div className="max-h-96 overflow-y-auto">
              {recentNotifications.length === 0 ? (
                <div className="p-8 text-center">
                  <Bell className="w-12 h-12 text-neutral-400 mx-auto mb-3" />
                  <p className="text-neutral-500 dark:text-neutral-400">
                    لا توجد إشعارات جديدة
                  </p>
                </div>
              ) : (
                <div className="divide-y divide-neutral-200 dark:divide-neutral-700">
                  {recentNotifications.map((notification) => {
                    const Icon = getNotificationIcon(notification.type);
                    return (
                      <div
                        key={notification.id}
                        onClick={() => handleNotificationClick(notification)}
                        className={cn(
                          "p-4 hover:bg-neutral-50 dark:hover:bg-neutral-800 cursor-pointer transition-colors",
                          !notification.isRead && "bg-blue-50 dark:bg-blue-900/10"
                        )}
                      >
                        <div className="flex items-start space-x-3 space-x-reverse">
                          <div className={cn(
                            "w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0",
                            !notification.isRead ? "bg-blue-100 dark:bg-blue-900/20" : "bg-neutral-100 dark:bg-neutral-800"
                          )}>
                            {typeof Icon === 'string' ? (
                              <span className="text-sm">{Icon}</span>
                            ) : (
                              <Icon className={cn("w-4 h-4", getNotificationColor(notification.type))} />
                            )}
                          </div>
                          
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <h4 className={cn(
                                "text-sm font-medium truncate",
                                !notification.isRead 
                                  ? "text-neutral-900 dark:text-neutral-100" 
                                  : "text-neutral-700 dark:text-neutral-300"
                              )}>
                                {notification.title}
                              </h4>
                              {!notification.isRead && (
                                <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0" />
                              )}
                            </div>
                            <p className="text-sm text-neutral-600 dark:text-neutral-400 leading-relaxed">
                              {notification.message}
                            </p>
                            <div className="flex items-center justify-between mt-2">
                              <span className="text-xs text-neutral-500 dark:text-neutral-500">
                                {formatDistanceToNow(new Date(notification.createdAt), { 
                                  addSuffix: true, 
                                  locale: ar 
                                })}
                              </span>
                              {notification.actionText && (
                                <span className="text-xs text-blue-500 font-medium">
                                  {notification.actionText}
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Footer */}
            {notifications.length > 5 && (
              <div className="p-3 border-t border-neutral-200 dark:border-neutral-700">
                <button className="w-full text-center text-sm text-blue-500 hover:text-blue-600 font-medium py-2">
                  عرض جميع الإشعارات
                </button>
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default NotificationDropdown;


============================================================
FILE: src/components/Layout/ProfileDropdown.tsx
============================================================
import React, { useState } from 'react';
import { User, Settings, LogOut, CreditCard, BarChart3, HelpCircle, Crown } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { Link } from 'react-router-dom';
import { cn } from '../../utils/cn';

const ProfileDropdown = () => {
  const { user, logout } = useStore();
  const [isOpen, setIsOpen] = useState(false);

  const menuItems = [
    {
      icon: User,
      label: 'الملف الشخصي',
      href: '/settings',
      color: 'text-neutral-600'
    },
    {
      icon: CreditCard,
      label: 'بطاقاتي',
      href: '/cards',
      color: 'text-blue-500'
    },
    {
      icon: BarChart3,
      label: 'التحليلات',
      href: '/analytics',
      color: 'text-green-500'
    },
    {
      icon: Settings,
      label: 'الإعدادات',
      href: '/settings',
      color: 'text-neutral-600'
    },
    {
      icon: HelpCircle,
      label: 'المساعدة',
      href: '/support',
      color: 'text-purple-500'
    }
  ];

  const getSubscriptionBadge = (subscription: string) => {
    switch (subscription) {
      case 'core':
        return { text: 'مزيون الأصيل', color: 'bg-gray-100 text-gray-800' };
      case 'pro':
        return { text: 'مزيون برو', color: 'bg-blue-100 text-blue-800' };
      case 'pro-plus':
        return { text: 'مزيون برو بلس', color: 'bg-purple-100 text-purple-800' };
      case 'business':
        return { text: 'مزيون المؤسسي', color: 'bg-orange-100 text-orange-800' };
      default:
        return { text: 'مجاني', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const handleLogout = () => {
    if (window.confirm('هل أنت متأكد أنك تريد تسجيل الخروج؟')) {
      logout();
      setIsOpen(false);
    }
  };

  const subscriptionBadge = getSubscriptionBadge(user?.subscription || 'free');

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 space-x-reverse p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
      >
        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-teal-500 flex items-center justify-center">
          {user?.avatar ? (
            <img 
              src={user.avatar} 
              alt={user.name}
              className="w-8 h-8 rounded-full object-cover"
            />
          ) : (
            <User className="w-4 h-4 text-white" />
          )}
        </div>
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute left-0 mt-2 w-64 bg-white dark:bg-neutral-900 rounded-lg shadow-xl border border-neutral-200 dark:border-neutral-700 z-50">
            {/* User Info */}
            <div className="p-4 border-b border-neutral-200 dark:border-neutral-700">
              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-teal-500 flex items-center justify-center">
                  {user?.avatar ? (
                    <img 
                      src={user.avatar} 
                      alt={user.name}
                      className="w-12 h-12 rounded-full object-cover"
                    />
                  ) : (
                    <User className="w-6 h-6 text-white" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="text-sm font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {user?.name || 'المستخدم'}
                  </h3>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 truncate">
                    {user?.email}
                  </p>
                  <div className="mt-1">
                    <span className={cn(
                      "inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium",
                      subscriptionBadge.color
                    )}>
                      {user?.subscription === 'business' && <Crown className="w-3 h-3 ml-1" />}
                      {subscriptionBadge.text}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Menu Items */}
            <div className="py-2">
              {menuItems.map((item, index) => (
                <Link
                  key={index}
                  to={item.href}
                  onClick={() => setIsOpen(false)}
                  className="flex items-center space-x-3 space-x-reverse px-4 py-3 text-sm text-neutral-700 dark:text-neutral-300 hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  <item.icon className={cn("w-4 h-4", item.color)} />
                  <span>{item.label}</span>
                </Link>
              ))}
            </div>

            {/* Subscription Upgrade */}
            {user?.subscription === 'free' && (
              <div className="p-3 border-t border-neutral-200 dark:border-neutral-700">
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 space-x-reverse mb-2">
                    <Crown className="w-4 h-4 text-yellow-500" />
                    <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                      ترقية الاشتراك
                    </span>
                  </div>
                  <p className="text-xs text-neutral-600 dark:text-neutral-400 mb-3">
                    احصل على ميزات إضافية مع مزيون برو
                  </p>
                  <button 
                    className="w-full text-xs font-medium text-white py-2 rounded-lg transition-colors"
                    style={{ backgroundColor: '#006BE3' }}
                  >
                    ترقية الآن
                  </button>
                </div>
              </div>
            )}

            {/* Logout */}
            <div className="p-2 border-t border-neutral-200 dark:border-neutral-700">
              <button
                onClick={handleLogout}
                className="w-full flex items-center space-x-3 space-x-reverse px-4 py-3 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
              >
                <LogOut className="w-4 h-4" />
                <span>تسجيل الخروج</span>
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default ProfileDropdown;


============================================================
FILE: src/components/Layout/Sidebar.tsx
============================================================
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, 
  CreditCard, 
  Users, 
  Briefcase, 
  QrCode, 
  BarChart3,
  Scan,
  FileText,
  Globe,
  Gift,
  Settings,
  HelpCircle,
  Crown,
  X,
  Menu,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';
import { useStore } from '../../store/useStore';
import { cn } from '../../utils/cn';

const Sidebar = () => {
  const location = useLocation();
  const { sidebarOpen, toggleSidebar, user } = useStore();

  const menuItems = [
    {
      name: 'لوحة التحكم',
      href: '/dashboard',
      icon: Home,
      badge: null
    },
    {
      name: 'بطاقاتي',
      href: '/cards',
      icon: CreditCard,
      badge: null
    },
    {
      name: 'جهات الاتصال',
      href: '/contacts',
      icon: Users,
      badge: null
    },
    {
      name: 'الوظائف',
      href: '/jobs',
      icon: Briefcase,
      badge: null
    },
    {
      name: 'مولد QR',
      href: '/qr-generator',
      icon: QrCode,
      badge: null
    },
    {
      name: 'صفحات الهبوط',
      href: '/landing-pages',
      icon: Globe,
      badge: user?.subscription === 'free' ? 'برو' : null
    },
    {
      name: 'منشئ السيرة',
      href: '/cv-builder',
      icon: FileText,
      badge: user?.subscription === 'free' ? 'برو' : null
    },
    {
      name: 'مسح البطاقات',
      href: '/scan',
      icon: Scan,
      badge: null
    },
    {
      name: 'التحليلات',
      href: '/analytics',
      icon: BarChart3,
      badge: null
    },
    {
      name: 'الإحالات',
      href: '/referrals',
      icon: Gift,
      badge: null
    },
    {
      name: 'الاشتراك',
      href: '/subscription',
      icon: Crown,
      badge: user?.subscription === 'free' ? 'ترقية' : null
    },
    {
      name: 'الإعدادات',
      href: '/settings',
      icon: Settings,
      badge: null
    },
    {
      name: 'المساعدة',
      href: '/support',
      icon: HelpCircle,
      badge: null
    }
  ];

  return (
    <>
      {/* Mobile Overlay */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}

      {/* Sidebar */}
      <div className={cn(
        "sidebar fixed top-0 right-0 h-full bg-white dark:bg-neutral-900  border-neutral-200 dark:border-neutral-700 z-50 transition-all duration-300 ease-in-out shadow-lg",
        sidebarOpen ? "w-64" : "w-16 lg:w-16",
        "transform lg:transform-none overflow-hidden",
        sidebarOpen ? "translate-x-0" : "translate-x-full lg:translate-x-0"
      )}>
        
        {/* Header */}
        <div className="flex items-center justify-between p-4  border-neutral-200 dark:border-neutral-700 relative">
          <div className={cn(
            "flex items-center space-x-3 space-x-reverse transition-opacity duration-200",
            sidebarOpen ? "opacity-100" : "opacity-0 lg:opacity-0"
          )}>
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-teal-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-sm">M</span>
            </div>
            <span className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
              مزيون
            </span>
          </div>
          
          {/* Toggle Button */}
          <button
            onClick={toggleSidebar}
            className={cn(
              "sidebar-toggle-btn p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-all duration-200 relative z-10",
              "border border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-900 shadow-sm",
              !sidebarOpen && "lg:absolute lg:left-[-16px] lg:top-1/2 lg:transform lg:-translate-y-1/2"
            )}
          >
            {sidebarOpen ? (
              <ChevronRight className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
            ) : (
              <Menu className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
            )}
          </button>

          {/* Mobile Close Button */}
          <button
            onClick={toggleSidebar}
            className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors lg:hidden"
          >
            <X className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
          </button>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-1 overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-600 scrollbar-track-transparent hover:scrollbar-thumb-neutral-400 dark:hover:scrollbar-thumb-neutral-500">
          <div className="sidebar-container p-4 space-y-2">
            {menuItems.map((item) => {
              const isActive = location.pathname === item.href;
              
              return (
                <div key={item.name} className="relative group">
                  <Link
                    to={item.href}
                    className={cn(
                      "sidebar-link group/item relative w-full flex items-center justify-between px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200",
                      isActive 
                        ? "active bg-blue-500 text-white shadow-lg" 
                        : "hover:bg-neutral-100 dark:hover:bg-neutral-800"
                    )}
                  >
                    <div className="flex items-center space-x-3 space-x-reverse w-full overflow-hidden">
                      {/* Icon */}
                      <div className="w-5 h-5 flex items-center justify-center flex-shrink-0">
                        <item.icon className={cn(
                          "w-5 h-5 transition-colors",
                          isActive 
                            ? "text-white" 
                            : "text-neutral-600 dark:text-neutral-400 group-hover/item:text-neutral-800 dark:group-hover/item:text-neutral-200"
                        )} />
                      </div>
                      
                      {/* Text */}
                      <span className={cn(
                        "font-medium transition-all duration-200 flex-1 min-w-0",
                        sidebarOpen ? "opacity-100 translate-x-0" : "opacity-0 translate-x-2 lg:opacity-0 lg:translate-x-2",
                        isActive 
                          ? "text-white" 
                          : "text-neutral-700 dark:text-neutral-300 group-hover/item:text-neutral-900 dark:group-hover/item:text-neutral-100",
                        "truncate"
                      )}>
                        {item.name}
                      </span>
                    </div>

                    {/* Badge */}
                    {item.badge && (
                      <span className={cn(
                        "bg-yellow-400 text-yellow-900 text-xs px-2 py-0.5 rounded-full transition-all duration-200 flex-shrink-0",
                        sidebarOpen ? "opacity-100 scale-100" : "opacity-0 scale-75 lg:opacity-0 lg:scale-75"
                      )}>
                        {item.badge}
                      </span>
                    )}
                  </Link>

                  {/* Tooltip */}
                  {!sidebarOpen && (
                    <div className="absolute right-full mr-3 top-1/2 transform -translate-y-1/2 bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 px-3 py-2 rounded-lg text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-[60] shadow-lg min-w-max">
                      {item.name}
                      {item.badge && (
                        <span className="mr-2 bg-yellow-400 text-yellow-900 px-1 rounded text-xs">
                          {item.badge}
                        </span>
                      )}
                      {/* Arrow */}
                      <div className="absolute left-0 top-1/2 transform -translate-y-1/2 translate-x-full">
                        <div className="w-0 h-0 border-l-[6px] border-r-0 border-t-[6px] border-b-[6px] border-l-neutral-900 dark:border-l-neutral-100 border-t-transparent border-b-transparent"></div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </nav>

        {/* User Info at Bottom */}
        <div className="border-t border-neutral-200 dark:border-neutral-700 p-4">
          <div className={cn(
            "flex items-center space-x-3 space-x-reverse transition-all duration-200",
            sidebarOpen ? "opacity-100" : "opacity-0 lg:opacity-0"
          )}>
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-xs">
                {user?.name?.charAt(0) || 'M'}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-neutral-900 dark:text-neutral-100 truncate">
                {user?.name || 'المستخدم'}
              </p>
              <p className="text-xs text-neutral-500 dark:text-neutral-400 truncate">
                {user?.subscription === 'free' ? 'مزيون الأصيل' : 
                 user?.subscription === 'pro' ? 'مزيون برو' : 
                 user?.subscription === 'business' ? 'مزيون المؤسسي' : 'مزيون الأصيل'}
              </p>
            </div>
          </div>

          {/* Upgrade Button for Free Users */}
          {user?.subscription === 'free' && (
            <Link
              to="/subscription"
              className={cn(
                "mt-3 w-full bg-yellow-400 hover:bg-yellow-500 text-yellow-900 font-medium text-xs py-2 px-4 rounded-lg transition-all duration-200 flex items-center justify-center",
                sidebarOpen ? "opacity-100 scale-100" : "opacity-0 scale-75 lg:opacity-0 lg:scale-75"
              )}
            >
              <Crown className="w-3 h-3 ml-1" />
              ترقية الحساب
            </Link>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


============================================================
FILE: src/components/qr/QRShapes.tsx
============================================================
// src/components/qr/QRShapes.tsx (محسن ومصحح)
import React, { useState } from 'react';
import { cn } from '../../utils/cn';

const QR_SHAPES = {
  square: { name: 'مربع', path: 'M3 3h18v18H3z' },
  circle: { name: 'دائرة', path: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z' },
  heart: { name: 'قلب', path: 'M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z' },
  star: { name: 'نجمة', path: 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z' },
  diamond: { name: 'معين', path: 'M6 2l2 4h8l2-4h4l-4 7 4 7h-4l-2-4H8l-2 4H2l4-7L2 2h4z' },
  hexagon: { name: 'سداسي', path: 'M17.5 3.5L22 12l-4.5 8.5h-9L4 12l4.5-8.5h9z' },
  apple: { name: 'تفاحة', path: 'M12 2c3.31 0 6 2.69 6 6 0 2.97-2.16 5.43-5 5.92V16h2v2h-6v-2h2v-2.08c-2.84-.49-5-2.95-5-5.92 0-3.31 2.69-6 6-6z' },
  guitar: { name: 'جيتار', path: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c1.19 0 2.34-.21 3.41-.6.3-.11.49-.4.49-.72v-1.57c0-.55-.45-1-1-1h-1c-2.76 0-5-2.24-5-5s2.24-5 5-5h1c.55 0 1-.45 1-1V6.32c0-.32-.19-.61-.49-.72C14.34 2.21 13.19 2 12 2z' },
  car: { name: 'سيارة', path: 'M18.92 6.01C18.72 5.42 18.16 5 17.5 5h-11c-.66 0-1.21.42-1.42 1.01L3 12v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99z' },
  camera: { name: 'كاميرا', path: 'M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z' },
  laptop: { name: 'لابتوب', path: 'M20 18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H1v2h22v-2h-3zM4 6h16v10H4V6z' },
  phone: { name: 'هاتف', path: 'M17 1.01L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z' },
  house: { name: 'منزل', path: 'M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z' },
  pizza: { name: 'بيتزا', path: 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z' },
  coffee: { name: 'قهوة', path: 'M18.5 3H6c-.83 0-1.5.67-1.5 1.5v3C4.5 8.33 5.17 9 6 9h.5v8c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2V9h.5c.83 0 1.5-.67 1.5-1.5v-3C19 3.67 18.33 3 17.5 3h-1z' },
  crown: { name: 'تاج', path: 'M5 16L3 5l5.5 5L12 4l3.5 6L21 5l-2 11H5z' },
  lightning: { name: 'برق', path: 'M11 21h-1l1-7H7.5c-.88 0-.33-.75-.31-.78C8.48 10.94 10.42 7.54 13.01 3h1.05L13 10h3.5c.49 0 .56.75.48.78l-5.98 10.22z' }
};

interface QRShapesProps {
  selectedShape: string;
  onShapeSelect: (shapeId: string) => void;
  className?: string;
}

const QRShapes: React.FC<QRShapesProps> = ({ selectedShape, onShapeSelect, className }) => {
  return (
    <div className={className}>
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-3 max-h-64 overflow-y-auto">
        {Object.entries(QR_SHAPES).map(([id, shape]) => (
          <button
            key={id}
            onClick={() => onShapeSelect(id)}
            className={cn(
              "aspect-square p-2 rounded-lg border-2 transition-all hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500",
              selectedShape === id
                ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                : "border-neutral-200 dark:border-neutral-700 hover:border-primary-300"
            )}
            title={shape.name}
          >
            <svg
              viewBox="0 0 24 24"
              fill="currentColor"
              className="w-full h-full text-neutral-600 dark:text-neutral-400"
            >
              <path d={shape.path} />
            </svg>
          </button>
        ))}
      </div>
    </div>
  );
};

export default QRShapes;


============================================================
FILE: src/components/qr/QRStickers.tsx
============================================================
// src/components/qr/QRStickers.tsx (محسن ومصحح)
import React from 'react';
import { cn } from '../../utils/cn';

const STICKER_CONFIGS = {
  'hiring-1': { name: 'نوظف الآن', color: 'green', icon: '💼' },
  'hiring-2': { name: 'باحث عن وظيفة', color: 'blue', icon: '🔍' },
  'hiring-3': { name: 'متاح للعمل', color: 'purple', icon: '💻' },
  'support-1': { name: 'دعم فلسطين', color: 'red', icon: '🇵🇸' },
  'support-2': { name: 'التوعية البيئية', color: 'green', icon: '🌱' },
  'celebration-1': { name: 'عيد مبارك', color: 'yellow', icon: '🎉' },
  'celebration-2': { name: 'تخرج', color: 'indigo', icon: '🎓' },
  'business-1': { name: 'شركة ناشئة', color: 'teal', icon: '🚀' },
  'social-1': { name: 'متابعوني', color: 'cyan', icon: '👥' },
  'seasonal-1': { name: 'رمضان كريم', color: 'emerald', icon: '🌙' }
};

const COLOR_CLASSES = {
  green: 'border-green-500 bg-green-50 text-green-700',
  blue: 'border-blue-500 bg-blue-50 text-blue-700',
  purple: 'border-purple-500 bg-purple-50 text-purple-700',
  red: 'border-red-500 bg-red-50 text-red-700',
  yellow: 'border-yellow-500 bg-yellow-50 text-yellow-700',
  indigo: 'border-indigo-500 bg-indigo-50 text-indigo-700',
  teal: 'border-teal-500 bg-teal-50 text-teal-700',
  cyan: 'border-cyan-500 bg-cyan-50 text-cyan-700',
  emerald: 'border-emerald-500 bg-emerald-50 text-emerald-700'
};

interface QRStickersProps {
  selectedSticker: string;
  onStickerSelect: (stickerId: string) => void;
  className?: string;
}

const QRStickers: React.FC<QRStickersProps> = ({ selectedSticker, onStickerSelect, className }) => {
  return (
    <div className={className}>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 max-h-64 overflow-y-auto">
        {Object.entries(STICKER_CONFIGS).map(([id, sticker]) => (
          <button
            key={id}
            onClick={() => onStickerSelect(id)}
            className={cn(
              "relative aspect-square p-3 rounded-lg border-2 transition-all hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500",
              selectedSticker === id
                ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                : "border-neutral-200 dark:border-neutral-700 hover:border-primary-300"
            )}
            title={sticker.name}
          >
            <div className={cn(
              "w-full h-full rounded-lg flex flex-col items-center justify-center text-center border-4",
              COLOR_CLASSES[sticker.color as keyof typeof COLOR_CLASSES]
            )}>
              <div className="text-2xl mb-1">{sticker.icon}</div>
              <div className="text-xs font-bold leading-tight">
                {sticker.name}
              </div>
            </div>
          </button>
        ))}
      </div>
    </div>
  );
};

export default QRStickers;


============================================================
FILE: src/components/ThemeCustomizer.tsx
============================================================
import React, { useEffect, useState } from 'react';
import { Palette, Star, Undo2 } from 'lucide-react';
import { useStore } from '../store/useStore';

/* جميع المتغيّرات القابلة للتخصيص */
const VARS = [
  'btn-primary', 'btn-primary-hover',
  'btn-secondary', 'btn-secondary-hover',
  'alert-warning', 'alert-warning-hover',
  'bg-primary', 'bg-secondary',
  'text-primary', 'text-secondary',
];

/* ➊ - ثلاث ثيمات جاهزة */
const PRESETS: Record<string, Record<string, string>> = {
  classic: {
    'btn-primary': '#006BE3',
    'btn-primary-hover': '#0056be',
    'btn-secondary': '#7EDDB9',
    'btn-secondary-hover': '#65c4a1',
    'alert-warning': '#FACC15',
    'alert-warning-hover': '#e0b900',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#EDEDED',
    'text-primary': '#2D2D2D',
    'text-secondary': '#444444',
  },
  emerald: {
    'btn-primary': '#059669',
    'btn-primary-hover': '#047857',
    'btn-secondary': '#10B981',
    'btn-secondary-hover': '#0e9f6e',
    'alert-warning': '#FBBF24',
    'alert-warning-hover': '#f59e0b',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#ECFDF5',
    'text-primary': '#064E3B',
    'text-secondary': '#065F46',
  },
  sunset: {
    'btn-primary': '#EA580C',
    'btn-primary-hover': '#c2410c',
    'btn-secondary': '#FDBA74',
    'btn-secondary-hover': '#fb923c',
    'alert-warning': '#F97316',
    'alert-warning-hover': '#ea580c',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#FFEFE6',
    'text-primary': '#7C2D12',
    'text-secondary': '#9A3412',
  },
};

const ThemeCustomizer: React.FC = () => {
  const { userColors, setUserColors } = useStore();
  const [open, setOpen] = useState(false);
  const [colors, setColors] = useState<Record<string, string>>(userColors);

  /* ➋ - تطبيق الألوان فور التعديل */
  useEffect(() => {
    const root = document.documentElement;
    Object.entries(colors).forEach(([k, v]) => root.style.setProperty(`--${k}`, v));
  }, [colors]);

  /* ➌ - حفظ إلى التخزين */
  const saveColors = () => {
    setUserColors(colors);       // يحفظ فى store + localStorage
    setOpen(false);
  };

  /*➍ - استرجاع الافتراضى */
  const resetColors = () => setColors(useStore.getState().defaultColors);

  /*➎ - تغيير ثيم جاهز */
  const applyPreset = (name: string) => setColors(PRESETS[name]);

  return (
    <>
      {/* زر عائم */}
      <button
        onClick={() => setOpen(!open)}
        className="fixed bottom-6 left-6 z-50 p-3 rounded-full shadow-lg bg-primary-500 text-white hover:scale-110 transition-transform"
        title="تخصيص الألوان"
      >
        <Palette />
      </button>

      {/* اللوحة */}
      {open && (
        <div className="fixed bottom-24 left-6 z-50 w-80 bg-white dark:bg-neutral-900 p-6 rounded-2xl shadow-2xl border">
          <h3 className="font-bold mb-4 flex items-center space-x-2 space-x-reverse">
            <Star className="w-4 h-4 text-yellow-400" /> <span>اختَر ثيماً أو خصِّصه</span>
          </h3>

          {/* الثيمات الجاهزة */}
          <div className="grid grid-cols-3 gap-2 mb-6">
            {Object.keys(PRESETS).map((preset) => (
              <button
                key={preset}
                onClick={() => applyPreset(preset)}
                className="h-10 rounded-lg border-2 border-transparent hover:border-primary-500 transition-all"
                style={{ background: PRESETS[preset]['btn-primary'] }}
                title={preset}
              />
            ))}
          </div>

          {/* محرّر يدوى */}
          <div className="space-y-4 max-h-60 overflow-y-auto pr-1">
            {VARS.map((varName) => (
              <div key={varName}>
                <label className="text-xs font-medium block mb-1">{varName}</label>
                <input
                  type="color"
                  value={colors[varName]}
                  onChange={(e) => setColors({ ...colors, [varName]: e.target.value })}
                  className="w-full h-8 rounded border cursor-pointer"
                  style={{ background: colors[varName] }}
                />
              </div>
            ))}
          </div>

          {/* أزرار الحفظ / إعادة الضبط */}
          <div className="mt-6 flex items-center space-x-2 space-x-reverse">
            <button
              onClick={resetColors}
              className="flex-1 flex items-center justify-center space-x-1 space-x-reverse px-3 py-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700"
            >
              <Undo2 className="w-4 h-4" /> <span className="text-sm">إعادة الضبط</span>
            </button>
            <button
              onClick={saveColors}
              className="flex-1 btn-primary py-2"
            >
              حفظ
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default ThemeCustomizer;


============================================================
FILE: src/pages/Analytics.tsx
============================================================
import React, { useState } from 'react';
import { 
  TrendingUp, 
  Eye, 
  Share2, 
  Users, 
  Calendar,
  Download,
  Filter,
  BarChart3,
  PieChart,
  Globe
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockAnalytics } from '../utils/mockData';
import { cn } from '../utils/cn';

const Analytics = () => {
  const { cards } = useStore();
  const [timeRange, setTimeRange] = useState('7d');
  const [selectedCard, setSelectedCard] = useState('all');

  const timeRanges = [
    { value: '7d', label: 'آخر 7 أيام' },
    { value: '30d', label: 'آخر 30 يوم' },
    { value: '90d', label: 'آخر 3 أشهر' },
    { value: '1y', label: 'آخر سنة' }
  ];

  const stats = [
    {
      name: 'إجمالي المشاهدات',
      value: mockAnalytics.cardViews.reduce((sum, item) => sum + item.value, 0),
      change: '+12.5%',
      changeType: 'positive',
      icon: Eye,
      color: 'bg-blue-500'
    },
    {
      name: 'إجمالي المشاركات',
      value: mockAnalytics.cardShares.reduce((sum, item) => sum + item.value, 0),
      change: '+8.2%',
      changeType: 'positive',
      icon: Share2,
      color: 'bg-green-500'
    },
    {
      name: 'مسح QR',
      value: mockAnalytics.qrScans.reduce((sum, item) => sum + item.value, 0),
      change: '+15.3%',
      changeType: 'positive',
      icon: BarChart3,
      color: 'bg-purple-500'
    },
    {
      name: 'جهات اتصال جديدة',
      value: mockAnalytics.contactAdds.reduce((sum, item) => sum + item.value, 0),
      change: '+5.7%',
      changeType: 'positive',
      icon: Users,
      color: 'bg-orange-500'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            التحليلات والإحصائيات
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            تتبع أداء بطاقاتك وتفاعل المستخدمين
          </p>
        </div>

        <div className="flex items-center space-x-3 space-x-reverse">
          <select
            value={selectedCard}
            onChange={(e) => setSelectedCard(e.target.value)}
            className="input-field w-auto"
          >
            <option value="all">جميع البطاقات</option>
            {cards.map((card) => (
              <option key={card.id} value={card.id}>
                {card.name}
              </option>
            ))}
          </select>

          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="input-field w-auto"
          >
            {timeRanges.map((range) => (
              <option key={range.value} value={range.value}>
                {range.label}
              </option>
            ))}
          </select>

          <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
            <Download className="w-4 h-4" />
            <span>تصدير</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                  {stat.name}
                </p>
                <p className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mt-1">
                  {stat.value.toLocaleString()}
                </p>
                <div className="flex items-center mt-2">
                  <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                  <span className={cn(
                    "text-sm font-medium",
                    stat.changeType === 'positive' ? "text-green-600" : "text-red-600"
                  )}>
                    {stat.change}
                  </span>
                </div>
              </div>
              <div className={cn("p-3 rounded-lg", stat.color)}>
                <stat.icon className="w-6 h-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Views Chart */}
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              مشاهدات البطاقات
            </h2>
            <div className="flex items-center space-x-2 space-x-reverse">
              <div className="w-3 h-3 bg-primary-500 rounded-full"></div>
              <span className="text-sm text-neutral-600 dark:text-neutral-400">المشاهدات</span>
            </div>
          </div>
          
          <div className="h-64 flex items-end space-x-2 space-x-reverse">
            {mockAnalytics.cardViews.map((item, index) => (
              <div key={index} className="flex-1 flex flex-col items-center">
                <div 
                  className="w-full bg-primary-500 rounded-t-sm"
                  style={{ 
                    height: `${(item.value / Math.max(...mockAnalytics.cardViews.map(i => i.value))) * 200}px`,
                    minHeight: '4px'
                  }}
                ></div>
                <span className="text-xs text-neutral-500 dark:text-neutral-400 mt-2">
                  {new Date(item.date).getDate()}
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* Top Cards */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            أفضل البطاقات أداءً
          </h2>
          
          <div className="space-y-3">
            {mockAnalytics.topCards.map((card, index) => (
              <div key={card.cardId} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                <div className="flex items-center justify-center w-8 h-8 bg-primary-500 text-white rounded-full text-sm font-bold">
                  {index + 1}
                </div>
                
                <div className="flex-1">
                  <h3 className="font-medium text-neutral-900 dark:text-neutral-100">
                    {card.cardName}
                  </h3>
                  <div className="flex items-center space-x-4 space-x-reverse text-sm text-neutral-600 dark:text-neutral-400">
                    <span>{card.views} مشاهدة</span>
                    <span>{card.shares} مشاركة</span>
                    <span>{card.clicks} نقرة</span>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                    {((card.views / stats[0].value) * 100).toFixed(1)}%
                  </div>
                  <div className="w-20 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full mt-1">
                    <div 
                      className="h-full bg-primary-500 rounded-full"
                      style={{ width: `${(card.views / stats[0].value) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Demographics */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            التوزيع الجغرافي
          </h2>
          
          <div className="space-y-3">
            {Object.entries(mockAnalytics.demographics.countries).map(([country, percentage]) => (
              <div key={country} className="flex items-center justify-between">
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Globe className="w-4 h-4 text-neutral-400" />
                  <span className="text-neutral-900 dark:text-neutral-100">{country}</span>
                </div>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                    {percentage}%
                  </span>
                  <div className="w-16 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full">
                    <div 
                      className="h-full bg-secondary-500 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Device Types */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            أنواع الأجهزة
          </h2>
          
          <div className="space-y-4">
            {Object.entries(mockAnalytics.demographics.devices).map(([device, percentage]) => (
              <div key={device} className="flex items-center justify-between">
                <span className="text-neutral-900 dark:text-neutral-100">{device}</span>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                    {percentage}%
                  </span>
                  <div className="w-20 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full">
                    <div 
                      className="h-full bg-accent-500 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 pt-4 border-t border-neutral-200 dark:border-neutral-700">
            <h3 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
              المتصفحات الأكثر استخداماً
            </h3>
            <div className="space-y-2">
              {Object.entries(mockAnalytics.demographics.browsers).slice(0, 3).map(([browser, percentage]) => (
                <div key={browser} className="flex items-center justify-between text-sm">
                  <span className="text-neutral-600 dark:text-neutral-400">{browser}</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">{percentage}%</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="card">
        <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
          النشاط الأخير
        </h2>
        
        <div className="space-y-3">
          {[
            { action: 'مشاهدة بطاقة', card: 'أحمد محمد السعيد', time: 'منذ دقيقتين', location: 'الرياض، السعودية' },
            { action: 'مسح QR', card: 'بطاقة الشركة', time: 'منذ 5 دقائق', location: 'جدة، السعودية' },
            { action: 'مشاركة بطاقة', card: 'أحمد محمد السعيد', time: 'منذ 10 دقائق', location: 'دبي، الإمارات' },
            { action: 'حفظ جهة اتصال', card: 'بطاقة المؤتمرات', time: 'منذ 15 دقيقة', location: 'الكويت، الكويت' }
          ].map((activity, index) => (
            <div key={index} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <div className="flex-1">
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {activity.action}
                  </span>
                  <span className="text-neutral-600 dark:text-neutral-400">
                    • {activity.card}
                  </span>
                </div>
                <div className="flex items-center space-x-2 space-x-reverse text-sm text-neutral-500 dark:text-neutral-400">
                  <span>{activity.time}</span>
                  <span>•</span>
                  <span>{activity.location}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Analytics;


============================================================
FILE: src/pages/Cards.tsx
============================================================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  Plus, 
  Search, 
  Filter, 
  Eye, 
  Share2, 
  Edit, 
  Trash2,
  QrCode,
  MoreVertical,
  Grid,
  List,
  Copy,
  ExternalLink,
  TrendingUp,
  Users,
  Calendar,
  Star
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Cards = () => {
  const { cards, deleteCard } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive'>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState<'name' | 'views' | 'created'>('created');

  const filteredCards = cards.filter(card => {
    const matchesSearch = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.company?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'all' || 
                         (filterStatus === 'active' && card.isActive) ||
                         (filterStatus === 'inactive' && !card.isActive);
    
    return matchesSearch && matchesFilter;
  }).sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'views':
        return b.views - a.views;
      case 'created':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      default:
        return 0;
    }
  });

  const handleDeleteCard = (cardId: string) => {
    if (window.confirm('هل أنت متأكد من حذف هذه البطاقة؟ سيتم حذف جميع البيانات المرتبطة بها.')) {
      deleteCard(cardId);
      toast.success('تم حذف البطاقة بنجاح');
    }
  };

  const handleCopyLink = (cardId: string) => {
    const link = `${window.location.origin}/card/${cardId}`;
    navigator.clipboard.writeText(link);
    toast.success('تم نسخ رابط البطاقة بنجاح!');
  };

  const handleShareCard = async (card: any) => {
    const shareData = {
      title: `بطاقة ${card.name}`,
      text: `تعرف على ${card.name} - ${card.title}`,
      url: `${window.location.origin}/card/${card.id}`
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        handleCopyLink(card.id);
      }
    } else {
      handleCopyLink(card.id);
    }
  };

  const totalViews = cards.reduce((sum, card) => sum + card.views, 0);
  const totalShares = cards.reduce((sum, card) => sum + card.shares, 0);
  const activeCards = cards.filter(card => card.isActive).length;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
            بطاقاتي الرقمية
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400 mt-1">
            إدارة وتتبع جميع بطاقاتك الرقمية في مكان واحد
          </p>
        </div>
        
        <Link 
          to="/cards/new"
          className="btn-primary flex items-center space-x-2 space-x-reverse shadow-lg hover:shadow-xl transition-shadow"
        >
          <Plus className="w-5 h-5" />
          <span>إنشاء بطاقة جديدة</span>
        </Link>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="card bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 border-blue-200 dark:border-blue-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
              <Grid className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-blue-600 dark:text-blue-400">إجمالي البطاقات</p>
              <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">{cards.length}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border-green-200 dark:border-green-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
              <Eye className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-green-600 dark:text-green-400">إجمالي المشاهدات</p>
              <p className="text-2xl font-bold text-green-900 dark:text-green-100">{totalViews.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 border-purple-200 dark:border-purple-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
              <Share2 className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-purple-600 dark:text-purple-400">إجمالي المشاركات</p>
              <p className="text-2xl font-bold text-purple-900 dark:text-purple-100">{totalShares.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 border-orange-200 dark:border-orange-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-orange-600 dark:text-orange-400">البطاقات النشطة</p>
              <p className="text-2xl font-bold text-orange-900 dark:text-orange-100">{activeCards}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="card">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
            <input
              type="text"
              placeholder="البحث في البطاقات..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="input-field pr-10"
            />
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as any)}
              className="input-field w-full sm:w-auto"
            >
              <option value="all">جميع البطاقات</option>
              <option value="active">نشطة</option>
              <option value="inactive">غير نشطة</option>
            </select>

            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="input-field w-full sm:w-auto"
            >
              <option value="created">الأحدث</option>
              <option value="name">الاسم</option>
              <option value="views">الأكثر مشاهدة</option>
            </select>

            <div className="flex items-center space-x-2 space-x-reverse">
              <button
                onClick={() => setViewMode('grid')}
                className={cn(
                  "p-2 rounded-lg transition-colors",
                  viewMode === 'grid' 
                    ? "bg-blue-500 text-white" 
                    : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
                )}
              >
                <Grid className="w-4 h-4" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={cn(
                  "p-2 rounded-lg transition-colors",
                  viewMode === 'list' 
                    ? "bg-blue-500 text-white" 
                    : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
                )}
              >
                <List className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Cards Display */}
      {filteredCards.length === 0 ? (
        <div className="text-center py-16">
          <div className="w-24 h-24 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-6">
            <Plus className="w-12 h-12 text-neutral-400" />
          </div>
          <h3 className="text-xl font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
            {searchTerm || filterStatus !== 'all' ? 'لا توجد نتائج مطابقة' : 'لا توجد بطاقات حتى الآن'}
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-8 max-w-md mx-auto">
            {searchTerm || filterStatus !== 'all' 
              ? 'جرب تغيير معايير البحث أو الفلترة للعثور على البطاقات التي تبحث عنها'
              : 'ابدأ رحلتك الرقمية بإنشاء بطاقتك الأولى الآن'}
          </p>
          <Link 
            to="/cards/new"
            className="btn-primary inline-flex items-center space-x-2 space-x-reverse"
          >
            <Plus className="w-5 h-5" />
            <span>إنشاء بطاقة جديدة</span>
          </Link>
        </div>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCards.map((card) => (
            <div key={card.id} className="card group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              {/* Card Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3 space-x-reverse flex-1">
                  <div 
                    className="w-14 h-14 rounded-xl flex items-center justify-center shadow-lg"
                    style={{ backgroundColor: card.colors.primary }}
                  >
                    {card.avatar ? (
                      <img 
                        src={card.avatar} 
                        alt={card.name}
                        className="w-14 h-14 rounded-xl object-cover"
                      />
                    ) : (
                      <span className="text-white font-bold text-lg">
                        {card.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-bold text-neutral-900 dark:text-neutral-100 truncate text-lg">
                      {card.name}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400 truncate">
                      {card.title}
                    </p>
                    {card.company && (
                      <p className="text-sm text-neutral-500 dark:text-neutral-500 truncate">
                        {card.company}
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 space-x-reverse">
                  <div className={cn(
                    "w-3 h-3 rounded-full",
                    card.isActive ? "bg-green-500" : "bg-neutral-400"
                  )} />
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">
                    {card.isActive ? 'نشطة' : 'غير نشطة'}
                  </span>
                </div>
              </div>

              {/* Stats */}
              <div className="grid grid-cols-3 gap-4 mb-6">
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-blue-500 mb-1">
                    <Eye className="w-4 h-4" />
                    <span className="font-bold">{card.views}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">مشاهدة</span>
                </div>
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-green-500 mb-1">
                    <Share2 className="w-4 h-4" />
                    <span className="font-bold">{card.shares}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">مشاركة</span>
                </div>
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-purple-500 mb-1">
                    <Users className="w-4 h-4" />
                    <span className="font-bold">{card.clicks}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">نقرة</span>
                </div>
              </div>

              {/* Actions */}
              <div className="flex items-center space-x-2 space-x-reverse">
                <Link
                  to={`/cards/${card.id}`}
                  className="flex-1 bg-blue-500 text-white px-4 py-2.5 rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors text-center"
                >
                  عرض البطاقة
                </Link>
                
                <button
                  onClick={() => handleShareCard(card)}
                  className="p-2.5 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  title="مشاركة"
                >
                  <Share2 className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                
                <Link
                  to={`/cards/${card.id}/edit`}
                  className="p-2.5 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  title="تعديل"
                >
                  <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </Link>
                
                <button 
                  onClick={() => handleDeleteCard(card.id)}
                  className="p-2.5 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                  title="حذف"
                >
                  <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                </button>
              </div>

              {/* Created Date */}
              <div className="mt-4 pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <div className="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-400">
                  <span>تم الإنشاء: {new Date(card.createdAt).toLocaleDateString('ar-SA')}</span>
                  <span>آخر تحديث: {new Date(card.updatedAt).toLocaleDateString('ar-SA')}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        /* List View */
        <div className="card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البطاقة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الشركة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المشاهدات
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المشاركات
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الحالة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الإجراءات
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {filteredCards.map((card) => (
                  <tr key={card.id} className="hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-3 space-x-reverse">
                        <div 
                          className="w-10 h-10 rounded-lg flex items-center justify-center"
                          style={{ backgroundColor: card.colors.primary }}
                        >
                          {card.avatar ? (
                            <img 
                              src={card.avatar} 
                              alt={card.name}
                              className="w-10 h-10 rounded-lg object-cover"
                            />
                          ) : (
                            <span className="text-white font-bold text-sm">
                              {card.name.charAt(0)}
                            </span>
                          )}
                        </div>
                        <div>
                          <div className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                            {card.name}
                          </div>
                          <div className="text-sm text-neutral-500 dark:text-neutral-400">
                            {card.title}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {card.company || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-1 space-x-reverse text-blue-500">
                        <Eye className="w-4 h-4" />
                        <span className="text-sm font-medium">{card.views}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-1 space-x-reverse text-green-500">
                        <Share2 className="w-4 h-4" />
                        <span className="text-sm font-medium">{card.shares}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={cn(
                        "px-3 py-1 text-xs font-medium rounded-full",
                        card.isActive 
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
                      )}>
                        {card.isActive ? 'نشطة' : 'غير نشطة'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <Link
                          to={`/cards/${card.id}`}
                          className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                        >
                          <Eye className="w-4 h-4" />
                        </Link>
                        <button
                          onClick={() => handleShareCard(card)}
                          className="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300"
                        >
                          <Share2 className="w-4 h-4" />
                        </button>
                        <Link
                          to={`/cards/${card.id}/edit`}
                          className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300"
                        >
                          <Edit className="w-4 h-4" />
                        </Link>
                        <button 
                          onClick={() => handleDeleteCard(card.id)}
                          className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cards;


============================================================
FILE: src/pages/CardView.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  QrCode, 
  Edit, 
  Eye, 
  Download,
  Phone,
  Mail,
  Globe,
  MapPin,
  Calendar,
  MoreVertical
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const CardView = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { cards } = useStore();
  const [showQR, setShowQR] = useState(false);
  const [showShareMenu, setShowShareMenu] = useState(false);

  const card = cards.find(c => c.id === id);

  useEffect(() => {
    if (!card) {
      toast.error('البطاقة غير موجودة');
      navigate('/cards');
    }
  }, [card, navigate]);

  if (!card) return null;

  const handleShare = async () => {
    const shareData = {
      title: `بطاقة ${card.name}`,
      text: `تعرف على ${card.name} - ${card.title}`,
      url: `${window.location.origin}/card/${card.id}`
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      navigator.clipboard.writeText(shareData.url);
      toast.success('تم نسخ الرابط بنجاح!');
    }
  };

  const handleDownloadVCard = () => {
    const vcard = `BEGIN:VCARD
VERSION:3.0
FN:${card.name}
ORG:${card.company || ''}
TITLE:${card.title}
TEL:${card.phone || ''}
EMAIL:${card.email || ''}
URL:${card.website || ''}
END:VCARD`;

    const blob = new Blob([vcard], { type: 'text/vcard' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${card.name}.vcf`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="max-w-4xl mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4 space-x-reverse">
            <button
              onClick={() => navigate('/cards')}
              className="p-2 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-800 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                {card.name}
              </h1>
              <p className="text-neutral-600 dark:text-neutral-400">
                {card.title}
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3 space-x-reverse">
            <button
              onClick={() => setShowQR(true)}
              className="p-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors"
            >
              <QrCode className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <button
              onClick={handleShare}
              className="p-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors"
            >
              <Share2 className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <button
              onClick={() => navigate(`/cards/${card.id}/edit`)}
              className="btn-primary flex items-center space-x-2 space-x-reverse"
            >
              <Edit className="w-4 h-4" />
              <span>تعديل</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Card Preview */}
          <div className="lg:col-span-2">
            <div className="card">
              <div 
                className="bg-gradient-to-br from-white to-neutral-50 dark:from-neutral-800 dark:to-neutral-900 rounded-lg p-8"
                style={{ borderTop: `4px solid ${card.colors.primary}` }}
              >
                {/* Avatar and Basic Info */}
                <div className="text-center mb-6">
                  <div className="w-24 h-24 mx-auto mb-4 rounded-full bg-neutral-200 dark:bg-neutral-700 flex items-center justify-center">
                    {card.avatar ? (
                      <img 
                        src={card.avatar} 
                        alt={card.name}
                        className="w-24 h-24 rounded-full object-cover"
                      />
                    ) : (
                      <span className="text-2xl font-bold text-neutral-600 dark:text-neutral-400">
                        {card.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  
                  <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                    {card.name}
                  </h2>
                  <p className="text-lg text-neutral-600 dark:text-neutral-400 mb-2">
                    {card.title}
                  </p>
                  {card.company && (
                    <p className="text-neutral-500 dark:text-neutral-500">
                      {card.company}
                    </p>
                  )}
                </div>

                {/* Contact Information */}
                <div className="space-y-4 mb-6">
                  {card.phone && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-primary-100 dark:bg-primary-900/20 flex items-center justify-center">
                        <Phone className="w-5 h-5 text-primary-600 dark:text-primary-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">الهاتف</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.phone}</p>
                      </div>
                    </div>
                  )}

                  {card.email && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-secondary-100 dark:bg-secondary-900/20 flex items-center justify-center">
                        <Mail className="w-5 h-5 text-secondary-600 dark:text-secondary-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">البريد الإلكتروني</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.email}</p>
                      </div>
                    </div>
                  )}

                  {card.website && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-accent-100 dark:bg-accent-900/20 flex items-center justify-center">
                        <Globe className="w-5 h-5 text-accent-600 dark:text-accent-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">الموقع الإلكتروني</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.website}</p>
                      </div>
                    </div>
                  )}
                </div>

                {/* Social Links */}
                {card.socialLinks.length > 0 && (
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      التواصل الاجتماعي
                    </h3>
                    <div className="flex flex-wrap gap-3">
                      {card.socialLinks.map((link) => (
                        <a
                          key={link.id}
                          href={link.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-2 space-x-reverse px-4 py-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                        >
                          <span className="text-sm font-medium text-neutral-700 dark:text-neutral-300">
                            {link.platform}
                          </span>
                        </a>
                      ))}
                    </div>
                  </div>
                )}

                {/* Custom Fields */}
                {card.customFields.length > 0 && (
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      معلومات إضافية
                    </h3>
                    <div className="space-y-3">
                      {card.customFields.map((field) => (
                        <div key={field.id} className="flex justify-between">
                          <span className="text-neutral-600 dark:text-neutral-400">{field.label}:</span>
                          <span className="text-neutral-900 dark:text-neutral-100">{field.value}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3">
                  <button
                    onClick={handleDownloadVCard}
                    className="btn-primary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                  >
                    <Download className="w-4 h-4" />
                    <span>حفظ جهة الاتصال</span>
                  </button>
                  <button
                    onClick={handleShare}
                    className="btn-secondary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                  >
                    <Share2 className="w-4 h-4" />
                    <span>مشاركة البطاقة</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Statistics */}
          <div className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                إحصائيات البطاقة
              </h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Eye className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">المشاهدات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.views}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Share2 className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">المشاركات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.shares}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Phone className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">النقرات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.clicks}
                  </span>
                </div>
              </div>
            </div>

            <div className="card">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                معلومات البطاقة
              </h3>
              
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">تاريخ الإنشاء:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(card.createdAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">آخر تحديث:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(card.updatedAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">الحالة:</span>
                  <span className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium",
                    card.isActive 
                      ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                      : "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
                  )}>
                    {card.isActive ? 'نشطة' : 'غير نشطة'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* QR Code Modal */}
      {showQR && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-sm w-full">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                رمز QR للبطاقة
              </h3>
              
              <div className="w-48 h-48 bg-neutral-100 dark:bg-neutral-800 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <QrCode className="w-24 h-24 text-neutral-400" />
              </div>
              
              <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                امسح هذا الرمز للوصول إلى البطاقة
              </p>
              
              <button
                onClick={() => setShowQR(false)}
                className="btn-primary w-full"
              >
                إغلاق
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CardView;


============================================================
FILE: src/pages/Contacts.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  Filter, 
  Plus, 
  User, 
  Mail, 
  Phone, 
  Building,
  Tag,
  MoreVertical,
  Edit,
  Trash2,
  Download,
  Upload,
  Eye,
  Grid,
  List,
  FileText,
  MessageCircle,
  X
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Contact } from '../types';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Contacts = () => {
  const { contacts, deleteContact } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterSource, setFilterSource] = useState<string>('all');
  const [filterTag, setFilterTag] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);
  const [showContactModal, setShowContactModal] = useState(false);
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);

  const filteredContacts = contacts.filter(contact => {
    const matchesSearch = 
      contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.phone?.includes(searchTerm);
    
    const matchesSource = filterSource === 'all' || contact.source === filterSource;
    const matchesTag = filterTag === 'all' || contact.tags.includes(filterTag);
    
    return matchesSearch && matchesSource && matchesTag;
  });

  const allTags = Array.from(new Set(contacts.flatMap(contact => contact.tags)));

  const handleDeleteContact = (contactId: string) => {
    if (window.confirm('هل أنت متأكد من حذف جهة الاتصال هذه؟')) {
      deleteContact(contactId);
      toast.success('تم حذف جهة الاتصال بنجاح');
    }
  };

  const handleBulkDelete = () => {
    if (selectedContacts.length === 0) return;
    
    if (window.confirm(`هل أنت متأكد من حذف ${selectedContacts.length} جهة اتصال؟`)) {
      selectedContacts.forEach(id => deleteContact(id));
      setSelectedContacts([]);
      toast.success('تم حذف جهات الاتصال المحددة');
    }
  };

  const handleExportContacts = () => {
    const csvContent = [
      ['الاسم', 'البريد الإلكتروني', 'الهاتف', 'الشركة', 'المنصب', 'المصدر', 'التاغات', 'تاريخ الإضافة'],
      ...filteredContacts.map(contact => [
        contact.name,
        contact.email || '',
        contact.phone || '',
        contact.company || '',
        contact.position || '',
        contact.source,
        contact.tags.join(', '),
        new Date(contact.createdAt).toLocaleDateString('ar-SA')
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `contacts-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    toast.success('تم تصدير جهات الاتصال بنجاح');
  };

  const toggleContactSelection = (contactId: string) => {
    setSelectedContacts(prev => 
      prev.includes(contactId) 
        ? prev.filter(id => id !== contactId)
        : [...prev, contactId]
    );
  };

  const selectAllContacts = () => {
    if (selectedContacts.length === filteredContacts.length) {
      setSelectedContacts([]);
    } else {
      setSelectedContacts(filteredContacts.map(c => c.id));
    }
  };

  const getSourceBadgeColor = (source: string) => {
    switch (source) {
      case 'card': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'qr': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'nfc': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'manual': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
      case 'import': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';
      case 'scan': return 'bg-teal-100 text-teal-800 dark:bg-teal-900/20 dark:text-teal-400';
      default: return 'bg-neutral-100 text-neutral-800 dark:bg-neutral-900/20 dark:text-neutral-400';
    }
  };

  const getSourceText = (source: string) => {
    switch (source) {
      case 'card': return 'من البطاقة';
      case 'qr': return 'من QR';
      case 'nfc': return 'من NFC';
      case 'manual': return 'يدوي';
      case 'import': return 'مستورد';
      case 'scan': return 'مسح ضوئي';
      default: return source;
    }
  };

  const handleContactClick = (contact: Contact) => {
    setSelectedContact(contact);
    setShowContactModal(true);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            جهات الاتصال
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            إدارة جميع جهات الاتصال المحفوظة ({filteredContacts.length} من {contacts.length})
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
            <Upload className="w-4 h-4" />
            <span>استيراد</span>
          </button>
          <button 
            onClick={handleExportContacts}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Download className="w-4 h-4" />
            <span>تصدير</span>
          </button>
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة جهة اتصال</span>
          </button>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
          <input
            type="text"
            placeholder="البحث في جهات الاتصال..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10"
          />
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4">
          <select
            value={filterSource}
            onChange={(e) => setFilterSource(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع المصادر</option>
            <option value="card">من البطاقة</option>
            <option value="qr">من QR</option>
            <option value="nfc">من NFC</option>
            <option value="manual">يدوي</option>
            <option value="import">مستورد</option>
            <option value="scan">مسح ضوئي</option>
          </select>

          <select
            value={filterTag}
            onChange={(e) => setFilterTag(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع التاغات</option>
            {allTags.map((tag) => (
              <option key={tag} value={tag}>{tag}</option>
            ))}
          </select>

          <div className="flex items-center space-x-2 space-x-reverse">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded-lg transition-colors",
                viewMode === 'grid' 
                  ? "bg-primary-500 text-white" 
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
              )}
            >
              <Grid className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded-lg transition-colors",
                viewMode === 'list' 
                  ? "bg-primary-500 text-white" 
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
              )}
            >
              <List className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Bulk Actions */}
      {selectedContacts.length > 0 && (
        <div className="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <span className="text-primary-700 dark:text-primary-300">
              تم تحديد {selectedContacts.length} جهة اتصال
            </span>
            <div className="flex items-center space-x-2 space-x-reverse">
              <button
                onClick={handleBulkDelete}
                className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 px-3 py-1 rounded-lg hover:bg-red-100 dark:hover:bg-red-900/20 transition-colors"
              >
                حذف المحدد
              </button>
              <button
                onClick={() => setSelectedContacts([])}
                className="text-neutral-600 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300 px-3 py-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
              >
                إلغاء التحديد
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Contacts Display */}
      {filteredContacts.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <User className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            {searchTerm || filterSource !== 'all' || filterTag !== 'all' 
              ? 'لا توجد نتائج مطابقة' 
              : 'لا توجد جهات اتصال'}
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            {searchTerm || filterSource !== 'all' || filterTag !== 'all'
              ? 'جرب تغيير معايير البحث أو الفلترة'
              : 'ابدأ بإضافة جهات اتصال أو استيرادها من ملف'}
          </p>
          <button className="btn-primary inline-flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة جهة اتصال جديدة</span>
          </button>
        </div>
      ) : viewMode === 'grid' ? (
        /* Grid View */
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredContacts.map((contact) => (
            <div key={contact.id} className="card group hover:shadow-lg transition-shadow">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3 space-x-reverse flex-1">
                  <input
                    type="checkbox"
                    checked={selectedContacts.includes(contact.id)}
                    onChange={() => toggleContactSelection(contact.id)}
                    className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                  />
                  <div 
                    className="w-12 h-12 bg-primary-500 rounded-full flex items-center justify-center cursor-pointer"
                    onClick={() => handleContactClick(contact)}
                  >
                    {contact.avatar ? (
                      <img 
                        src={contact.avatar} 
                        alt={contact.name}
                        className="w-12 h-12 rounded-full object-cover"
                      />
                    ) : (
                      <span className="text-white font-bold">
                        {contact.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 
                      className="font-semibold text-neutral-900 dark:text-neutral-100 truncate cursor-pointer hover:text-primary-500"
                      onClick={() => handleContactClick(contact)}
                    >
                      {contact.name}
                    </h3>
                    {contact.position && (
                      <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                        {contact.position}
                      </p>
                    )}
                    {contact.company && (
                      <p className="text-xs text-neutral-500 dark:text-neutral-500 truncate">
                        {contact.company}
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="relative">
                  <button className="p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors">
                    <MoreVertical className="w-4 h-4 text-neutral-400" />
                  </button>
                </div>
              </div>

              <div className="space-y-2 mb-4">
                {contact.email && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Mail className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400 truncate">
                      {contact.email}
                    </span>
                  </div>
                )}
                {contact.phone && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Phone className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">
                      {contact.phone}
                    </span>
                  </div>
                )}
                {contact.company && !contact.position && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Building className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400 truncate">
                      {contact.company}
                    </span>
                  </div>
                )}
              </div>
              
              {contact.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mb-3">
                  {contact.tags.slice(0, 3).map((tag, tagIndex) => (
                    <span
                      key={tagIndex}
                      className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                  {contact.tags.length > 3 && (
                    <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                      +{contact.tags.length - 3}
                    </span>
                  )}
                </div>
              )}

              <div className="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-400 mb-3">
                <span className={cn("px-2 py-1 rounded-full text-xs", getSourceBadgeColor(contact.source))}>
                  {getSourceText(contact.source)}
                </span>
                <span>{new Date(contact.createdAt).toLocaleDateString('ar-SA')}</span>
              </div>

              <div className="flex items-center space-x-2 space-x-reverse">
                <button 
                  onClick={() => handleContactClick(contact)}
                  className="flex-1 bg-primary-500 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-primary-600 transition-colors"
                >
                  عرض
                </button>
                <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                  <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                  <MessageCircle className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                <button 
                  onClick={() => handleDeleteContact(contact.id)}
                  className="p-2 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                >
                  <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        /* List View */
        <div className="card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    <input
                      type="checkbox"
                      checked={selectedContacts.length === filteredContacts.length && filteredContacts.length > 0}
                      onChange={selectAllContacts}
                      className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                    />
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الاسم
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البريد الإلكتروني
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الهاتف
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الشركة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المصدر
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    التاغات
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الإجراءات
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {filteredContacts.map((contact) => (
                  <tr key={contact.id} className="hover:bg-neutral-50 dark:hover:bg-neutral-800">
                    <td className="px-4 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        checked={selectedContacts.includes(contact.id)}
                        onChange={() => toggleContactSelection(contact.id)}
                        className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                      />
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-3 space-x-reverse">
                        <div className="w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center">
                          {contact.avatar ? (
                            <img 
                              src={contact.avatar} 
                              alt={contact.name}
                              className="w-8 h-8 rounded-full object-cover"
                            />
                          ) : (
                            <span className="text-white text-xs font-bold">
                              {contact.name.charAt(0)}
                            </span>
                          )}
                        </div>
                        <div>
                          <div 
                            className="text-sm font-medium text-neutral-900 dark:text-neutral-100 cursor-pointer hover:text-primary-500"
                            onClick={() => handleContactClick(contact)}
                          >
                            {contact.name}
                          </div>
                          {contact.position && (
                            <div className="text-sm text-neutral-500 dark:text-neutral-400">
                              {contact.position}
                            </div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.email || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.phone || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.company || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={cn("px-2 py-1 text-xs rounded-full", getSourceBadgeColor(contact.source))}>
                        {getSourceText(contact.source)}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex flex-wrap gap-1">
                        {contact.tags.slice(0, 2).map((tag, tagIndex) => (
                          <span
                            key={tagIndex}
                            className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                          >
                            {tag}
                          </span>
                        ))}
                        {contact.tags.length > 2 && (
                          <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                            +{contact.tags.length - 2}
                          </span>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <button 
                          onClick={() => handleContactClick(contact)}
                          className="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300">
                          <MessageCircle className="w-4 h-4" />
                        </button>
                        <button 
                          onClick={() => handleDeleteContact(contact.id)}
                          className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Contact Details Modal */}
      {showContactModal && selectedContact && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                تفاصيل جهة الاتصال
              </h3>
              <button
                onClick={() => setShowContactModal(false)}
                className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              {/* Avatar and Name */}
              <div className="text-center">
                <div className="w-20 h-20 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-3">
                  {selectedContact.avatar ? (
                    <img 
                      src={selectedContact.avatar} 
                      alt={selectedContact.name}
                      className="w-20 h-20 rounded-full object-cover"
                    />
                  ) : (
                    <span className="text-white font-bold text-xl">
                      {selectedContact.name.charAt(0)}
                    </span>
                  )}
                </div>
                <h4 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                  {selectedContact.name}
                </h4>
                {selectedContact.position && (
                  <p className="text-neutral-600 dark:text-neutral-400">
                    {selectedContact.position}
                  </p>
                )}
                {selectedContact.company && (
                  <p className="text-sm text-neutral-500 dark:text-neutral-500">
                    {selectedContact.company}
                  </p>
                )}
              </div>

              {/* Contact Information */}
              <div className="space-y-3">
                {selectedContact.email && (
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <Mail className="w-5 h-5 text-neutral-400" />
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.email}
                    </span>
                  </div>
                )}
                {selectedContact.phone && (
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <Phone className="w-5 h-5 text-neutral-400" />
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.phone}
                    </span>
                  </div>
                )}
              </div>

              {/* Tags */}
              {selectedContact.tags.length > 0 && (
                <div>
                  <h5 className="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                    التاغات
                  </h5>
                  <div className="flex flex-wrap gap-2">
                    {selectedContact.tags.map((tag, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {/* Notes */}
              {selectedContact.notes && (
                <div>
                  <h5 className="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                    ملاحظات
                  </h5>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 bg-neutral-50 dark:bg-neutral-800 p-3 rounded-lg">
                    {selectedContact.notes}
                  </p>
                </div>
              )}

              {/* Source and Date */}
              <div className="pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <div className="flex justify-between text-sm">
                  <span className="text-neutral-500 dark:text-neutral-400">المصدر:</span>
                  <span className={cn("px-2 py-1 rounded-full text-xs", getSourceBadgeColor(selectedContact.source))}>
                    {getSourceText(selectedContact.source)}
                  </span>
                </div>
                <div className="flex justify-between text-sm mt-2">
                  <span className="text-neutral-500 dark:text-neutral-400">تاريخ الإضافة:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(selectedContact.createdAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                {selectedContact.interactionCount > 0 && (
                  <div className="flex justify-between text-sm mt-2">
                    <span className="text-neutral-500 dark:text-neutral-400">عدد التفاعلات:</span>
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.interactionCount}
                    </span>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3 space-x-reverse pt-4">
                <button className="flex-1 btn-primary">
                  تعديل
                </button>
                <button className="flex-1 btn-secondary">
                  مراسلة
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Contacts;


============================================================
FILE: src/pages/CreateCard.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { 
  User, 
  Mail, 
  Phone, 
  Globe, 
  Building, 
  Camera, 
  Plus, 
  X,
  Palette,
  Eye,
  Save,
  Upload,
  Link,
  Trash2,
  ArrowLeft,
  Check
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Card, SocialLink, CustomField } from '../types';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

interface CardForm {
  name: string;
  title: string;
  company?: string;
  phone?: string;
  email?: string;
  website?: string;
  avatar?: string;
  template: string;
  colors: {
    primary: string;
    secondary: string;
    background: string;
    text: string;
  };
}

const CreateCard = () => {
  const navigate = useNavigate();
  const { addCard } = useStore();
  const [socialLinks, setSocialLinks] = useState<Omit<SocialLink, 'id'>[]>([]);
  const [customFields, setCustomFields] = useState<Omit<CustomField, 'id'>[]>([]);
  const [previewMode, setPreviewMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm<CardForm>({
    defaultValues: {
      template: 'modern',
      colors: {
        primary: '#1D4ED8',
        secondary: '#00D1B2',
        background: '#FFFFFF',
        text: '#2D2D2D'
      }
    }
  });

  const watchedValues = watch();

  const templates = [
    { id: 'modern', name: 'عصري', preview: '/templates/modern.png' },
    { id: 'classic', name: 'كلاسيكي', preview: '/templates/classic.png' },
    { id: 'creative', name: 'إبداعي', preview: '/templates/creative.png' },
    { id: 'corporate', name: 'مؤسسي', preview: '/templates/corporate.png' },
    { id: 'minimal', name: 'بسيط', preview: '/templates/minimal.png' }
  ];

  const socialPlatforms = [
    { id: 'linkedin', name: 'LinkedIn', icon: 'linkedin', placeholder: 'https://linkedin.com/in/username' },
    { id: 'twitter', name: 'Twitter', icon: 'twitter', placeholder: 'https://twitter.com/username' },
    { id: 'instagram', name: 'Instagram', icon: 'instagram', placeholder: 'https://instagram.com/username' },
    { id: 'facebook', name: 'Facebook', icon: 'facebook', placeholder: 'https://facebook.com/username' },
    { id: 'github', name: 'GitHub', icon: 'github', placeholder: 'https://github.com/username' },
    { id: 'youtube', name: 'YouTube', icon: 'youtube', placeholder: 'https://youtube.com/@username' },
    { id: 'whatsapp', name: 'WhatsApp', icon: 'whatsapp', placeholder: 'https://wa.me/966501234567' },
    { id: 'telegram', name: 'Telegram', icon: 'telegram', placeholder: 'https://t.me/username' }
  ];

  const addSocialLink = () => {
    setSocialLinks([...socialLinks, {
      platform: '',
      url: '',
      icon: '',
      isVisible: true,
      order: socialLinks.length + 1
    }]);
  };

  const removeSocialLink = (index: number) => {
    setSocialLinks(socialLinks.filter((_, i) => i !== index));
  };

  const updateSocialLink = (index: number, field: string, value: string) => {
    const updated = [...socialLinks];
    updated[index] = { ...updated[index], [field]: value };
    
    if (field === 'platform') {
      const platform = socialPlatforms.find(p => p.id === value);
      if (platform) {
        updated[index].icon = platform.icon;
      }
    }
    
    setSocialLinks(updated);
  };

  const addCustomField = () => {
    setCustomFields([...customFields, {
      label: '',
      value: '',
      type: 'text',
      isVisible: true,
      order: customFields.length + 1
    }]);
  };

  const removeCustomField = (index: number) => {
    setCustomFields(customFields.filter((_, i) => i !== index));
  };

  const updateCustomField = (index: number, field: string, value: string) => {
    const updated = [...customFields];
    updated[index] = { ...updated[index], [field]: value };
    setCustomFields(updated);
  };

  const onSubmit = async (data: CardForm) => {
    setIsLoading(true);
    
    try {
      const newCard: Omit<Card, 'id' | 'createdAt' | 'updatedAt'> = {
        userId: '1', // سيتم تحديثه من المستخدم الحالي
        name: data.name,
        title: data.title,
        company: data.company,
        phone: data.phone,
        email: data.email,
        website: data.website,
        avatar: data.avatar,
        nfcEnabled: false,
        isActive: true,
        views: 0,
        shares: 0,
        clicks: 0,
        template: data.template,
        colors: data.colors,
        socialLinks: socialLinks.map((link, index) => ({
          ...link,
          id: `social_${index + 1}`
        })),
        customFields: customFields.map((field, index) => ({
          ...field,
          id: `custom_${index + 1}`
        }))
      };

      addCard(newCard);
      toast.success('تم إنشاء البطاقة بنجاح! 🎉');
      navigate('/cards');
    } catch (error) {
      toast.error('حدث خطأ أثناء إنشاء البطاقة');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="max-w-6xl mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4 space-x-reverse">
            <button
              onClick={() => navigate('/cards')}
              className="p-2 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-800 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                إنشاء بطاقة جديدة
              </h1>
              <p className="text-neutral-600 dark:text-neutral-400">
                أنشئ بطاقتك الرقمية الاحترافية في دقائق
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3 space-x-reverse">
            <button
              type="button"
              onClick={() => setPreviewMode(!previewMode)}
              className={cn(
                "flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg transition-colors",
                previewMode
                  ? "bg-secondary-500 text-white"
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300"
              )}
            >
              <Eye className="w-4 h-4" />
              <span>معاينة</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Form Section */}
          <div className="space-y-6">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {/* Basic Information */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  المعلومات الأساسية
                </h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الاسم الكامل *
                    </label>
                    <div className="relative">
                      <User className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('name', { required: 'الاسم مطلوب' })}
                        className="input-field pr-10"
                        placeholder="أدخل اسمك الكامل"
                      />
                    </div>
                    {errors.name && (
                      <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      المسمى الوظيفي *
                    </label>
                    <input
                      {...register('title', { required: 'المسمى الوظيفي مطلوب' })}
                      className="input-field"
                      placeholder="مثال: مطور تطبيقات"
                    />
                    {errors.title && (
                      <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الشركة
                    </label>
                    <div className="relative">
                      <Building className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('company')}
                        className="input-field pr-10"
                        placeholder="اسم الشركة أو المؤسسة"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        رقم الهاتف
                      </label>
                      <div className="relative">
                        <Phone className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          {...register('phone')}
                          className="input-field pr-10"
                          placeholder="+966501234567"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        البريد الإلكتروني
                      </label>
                      <div className="relative">
                        <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          {...register('email')}
                          type="email"
                          className="input-field pr-10"
                          placeholder="example@domain.com"
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الموقع الإلكتروني
                    </label>
                    <div className="relative">
                      <Globe className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('website')}
                        className="input-field pr-10"
                        placeholder="https://example.com"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Profile Image */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  الصورة الشخصية
                </h2>
                
                <div className="flex items-center space-x-4 space-x-reverse">
                  <div className="w-20 h-20 bg-neutral-200 dark:bg-neutral-800 rounded-full flex items-center justify-center">
                    {watchedValues.avatar ? (
                      <img 
                        src={watchedValues.avatar} 
                        alt="Profile"
                        className="w-20 h-20 rounded-full object-cover"
                      />
                    ) : (
                      <Camera className="w-8 h-8 text-neutral-400" />
                    )}
                  </div>
                  
                  <div className="flex-1">
                    <button
                      type="button"
                      className="btn-secondary flex items-center space-x-2 space-x-reverse"
                    >
                      <Upload className="w-4 h-4" />
                      <span>رفع صورة</span>
                    </button>
                    <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                      PNG أو JPG، الحد الأقصى 2MB
                    </p>
                  </div>
                </div>
              </div>

              {/* Template Selection */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  اختيار القالب
                </h2>
                
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {templates.map((template) => (
                    <div
                      key={template.id}
                      className={cn(
                        "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                        watchedValues.template === template.id
                          ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                          : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600"
                      )}
                      onClick={() => setValue('template', template.id)}
                    >
                      <div className="aspect-square bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-2 flex items-center justify-center">
                        <span className="text-xs text-neutral-500">معاينة</span>
                      </div>
                      <p className="text-sm font-medium text-center text-neutral-700 dark:text-neutral-300">
                        {template.name}
                      </p>
                      {watchedValues.template === template.id && (
                        <div className="absolute top-2 right-2 w-5 h-5 bg-primary-500 rounded-full flex items-center justify-center">
                          <Check className="w-3 h-3 text-white" />
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Color Customization */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  تخصيص الألوان
                </h2>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللون الأساسي
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="color"
                        {...register('colors.primary')}
                        className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                      />
                      <input
                        type="text"
                        {...register('colors.primary')}
                        className="input-field flex-1"
                        placeholder="#1D4ED8"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللون الثانوي
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="color"
                        {...register('colors.secondary')}
                        className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                      />
                      <input
                        type="text"
                        {...register('colors.secondary')}
                        className="input-field flex-1"
                        placeholder="#00D1B2"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Social Links */}
              <div className="card">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    روابط التواصل الاجتماعي
                  </h2>
                  <button
                    type="button"
                    onClick={addSocialLink}
                    className="btn-secondary flex items-center space-x-2 space-x-reverse"
                  >
                    <Plus className="w-4 h-4" />
                    <span>إضافة رابط</span>
                  </button>
                </div>

                <div className="space-y-3">
                  {socialLinks.map((link, index) => (
                    <div key={index} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                      <select
                        value={link.platform}
                        onChange={(e) => updateSocialLink(index, 'platform', e.target.value)}
                        className="input-field w-32"
                      >
                        <option value="">اختر المنصة</option>
                        {socialPlatforms.map((platform) => (
                          <option key={platform.id} value={platform.id}>
                            {platform.name}
                          </option>
                        ))}
                      </select>
                      
                      <input
                        type="url"
                        value={link.url}
                        onChange={(e) => updateSocialLink(index, 'url', e.target.value)}
                        placeholder={socialPlatforms.find(p => p.id === link.platform)?.placeholder || 'أدخل الرابط'}
                        className="input-field flex-1"
                      />
                      
                      <button
                        type="button"
                        onClick={() => removeSocialLink(index)}
                        className="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  
                  {socialLinks.length === 0 && (
                    <p className="text-center text-neutral-500 dark:text-neutral-400 py-4">
                      لم تتم إضافة أي روابط تواصل اجتماعي بعد
                    </p>
                  )}
                </div>
              </div>

              {/* Custom Fields */}
              <div className="card">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    حقول مخصصة
                  </h2>
                  <button
                    type="button"
                    onClick={addCustomField}
                    className="btn-secondary flex items-center space-x-2 space-x-reverse"
                  >
                    <Plus className="w-4 h-4" />
                    <span>إضافة حقل</span>
                  </button>
                </div>

                <div className="space-y-3">
                  {customFields.map((field, index) => (
                    <div key={index} className="grid grid-cols-12 gap-3 p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                      <input
                        type="text"
                        value={field.label}
                        onChange={(e) => updateCustomField(index, 'label', e.target.value)}
                        placeholder="اسم الحقل"
                        className="input-field col-span-4"
                      />
                      
                      <input
                        type="text"
                        value={field.value}
                        onChange={(e) => updateCustomField(index, 'value', e.target.value)}
                        placeholder="القيمة"
                        className="input-field col-span-6"
                      />
                      
                      <select
                        value={field.type}
                        onChange={(e) => updateCustomField(index, 'type', e.target.value)}
                        className="input-field col-span-1"
                      >
                        <option value="text">نص</option>
                        <option value="url">رابط</option>
                        <option value="email">إيميل</option>
                        <option value="phone">هاتف</option>
                      </select>
                      
                      <button
                        type="button"
                        onClick={() => removeCustomField(index)}
                        className="col-span-1 p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  
                  {customFields.length === 0 && (
                    <p className="text-center text-neutral-500 dark:text-neutral-400 py-4">
                      لم تتم إضافة أي حقول مخصصة بعد
                    </p>
                  )}
                </div>
              </div>

              {/* Submit Button */}
              <div className="flex items-center justify-end space-x-3 space-x-reverse">
                <button
                  type="button"
                  onClick={() => navigate('/cards')}
                  className="px-6 py-3 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  إلغاء
                </button>
                <button
                  type="submit"
                  disabled={isLoading}
                  className="btn-primary flex items-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Save className="w-4 h-4" />
                  <span>{isLoading ? 'جاري الحفظ...' : 'حفظ البطاقة'}</span>
                </button>
              </div>
            </form>
          </div>

          {/* Preview Section */}
          <div className="lg:sticky lg:top-6">
            <div className="card">
              <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                معاينة البطاقة
              </h2>
              
              <div className="bg-gradient-to-br from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-900 rounded-lg p-6 min-h-96">
                {/* Card Preview */}
                <div 
                  className="bg-white dark:bg-neutral-800 rounded-lg p-6 shadow-lg max-w-sm mx-auto"
                  style={{ 
                    borderTop: `4px solid ${watchedValues.colors?.primary || '#1D4ED8'}` 
                  }}
                >
                  {/* Avatar */}
                  <div className="flex justify-center mb-4">
                    <div className="w-20 h-20 bg-neutral-200 dark:bg-neutral-700 rounded-full flex items-center justify-center">
                      {watchedValues.avatar ? (
                        <img 
                          src={watchedValues.avatar} 
                          alt="Profile"
                          className="w-20 h-20 rounded-full object-cover"
                        />
                      ) : (
                        <User className="w-8 h-8 text-neutral-400" />
                      )}
                    </div>
                  </div>

                  {/* Name & Title */}
                  <div className="text-center mb-4">
                    <h3 className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
                      {watchedValues.name || 'اسمك هنا'}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400">
                      {watchedValues.title || 'المسمى الوظيفي'}
                    </p>
                    {watchedValues.company && (
                      <p className="text-sm text-neutral-500 dark:text-neutral-500">
                        {watchedValues.company}
                      </p>
                    )}
                  </div>

                  {/* Contact Info */}
                  <div className="space-y-2 mb-4">
                    {watchedValues.phone && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Phone className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.phone}</span>
                      </div>
                    )}
                    {watchedValues.email && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Mail className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.email}</span>
                      </div>
                    )}
                    {watchedValues.website && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Globe className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.website}</span>
                      </div>
                    )}
                  </div>

                  {/* Social Links Preview */}
                  {socialLinks.length > 0 && (
                    <div className="flex justify-center space-x-3 space-x-reverse mb-4">
                      {socialLinks.slice(0, 4).map((link, index) => (
                        <div
                          key={index}
                          className="w-8 h-8 rounded-full bg-neutral-200 dark:bg-neutral-700 flex items-center justify-center"
                        >
                          <span className="text-xs text-neutral-600 dark:text-neutral-400">
                            {link.platform ? link.platform.charAt(0).toUpperCase() : '?'}
                          </span>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Action Button */}
                  <button
                    className="w-full py-2 rounded-lg text-white font-medium"
                    style={{ backgroundColor: watchedValues.colors?.primary || '#1D4ED8' }}
                  >
                    حفظ جهة الاتصال
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateCard;


============================================================
FILE: src/pages/CVBuilder.tsx
============================================================
import React, { useState } from 'react';
import { 
  Plus, 
  Download, 
  Eye, 
  Edit, 
  Trash2,
  FileText,
  User,
  Briefcase,
  GraduationCap,
  Award,
  Languages,
  Code,
  Save
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockCV } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const CVBuilder = () => {
  const { user } = useStore();
  const [cvs] = useState([mockCV]);
  const [selectedCV, setSelectedCV] = useState(mockCV);
  const [activeSection, setActiveSection] = useState('personal');

  const sections = [
    { id: 'personal', name: 'المعلومات الشخصية', icon: User },
    { id: 'summary', name: 'الملخص المهني', icon: FileText },
    { id: 'experience', name: 'الخبرات العملية', icon: Briefcase },
    { id: 'education', name: 'التعليم', icon: GraduationCap },
    { id: 'skills', name: 'المهارات', icon: Code },
    { id: 'languages', name: 'اللغات', icon: Languages },
    { id: 'certifications', name: 'الشهادات', icon: Award },
  ];

  const handleDownloadPDF = () => {
    toast.success('جاري تحضير ملف PDF...');
    // هنا سيتم تطبيق تحويل السيرة إلى PDF
  };

  const handlePreview = () => {
    toast('فتح معاينة السيرة الذاتية', {
  icon: 'ℹ️',
  style: {
    background: '#3B82F6',
    color: '#FFFFFF',
  },
}); 
    // هنا سيتم فتح معاينة في نافذة جديدة
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            منشئ السيرة الذاتية
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ سيرة ذاتية احترافية بتصاميم حديثة
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button
            onClick={handlePreview}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Eye className="w-4 h-4" />
            <span>معاينة</span>
          </button>
          <button
            onClick={handleDownloadPDF}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Download className="w-4 h-4" />
            <span>تحميل PDF</span>
          </button>
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>سيرة جديدة</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="card">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              أقسام السيرة الذاتية
            </h3>
            <nav className="space-y-2">
              {sections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={cn(
                    "w-full flex items-center space-x-3 space-x-reverse px-3 py-2 rounded-lg text-sm font-medium transition-colors",
                    activeSection === section.id
                      ? "bg-primary-500 text-white"
                      : "text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                  )}
                >
                  <section.icon className="w-4 h-4" />
                  <span>{section.name}</span>
                </button>
              ))}
            </nav>
          </div>

          {/* CV List */}
          <div className="card mt-6">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              سيرتي الذاتية
            </h3>
            <div className="space-y-3">
              {cvs.map((cv) => (
                <div
                  key={cv.id}
                  className={cn(
                    "p-3 rounded-lg border cursor-pointer transition-colors",
                    selectedCV?.id === cv.id
                      ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600"
                  )}
                  onClick={() => setSelectedCV(cv)}
                >
                  <h4 className="font-medium text-neutral-900 dark:text-neutral-100 truncate">
                    {cv.title}
                  </h4>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    آخر تحديث: {new Date(cv.updatedAt).toLocaleDateString('ar-SA')}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-3">
          <div className="card">
            {activeSection === 'personal' && (
              <div>
                <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  المعلومات الشخصية
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الاسم الأول
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.firstName}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اسم العائلة
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.lastName}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      البريد الإلكتروني
                    </label>
                    <input
                      type="email"
                      defaultValue={selectedCV?.personalInfo.email}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رقم الهاتف
                    </label>
                    <input
                      type="tel"
                      defaultValue={selectedCV?.personalInfo.phone}
                      className="input-field"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      العنوان
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.address}
                      className="input-field"
                    />
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'summary' && (
              <div>
                <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  الملخص المهني
                </h3>
                <textarea
                  rows={6}
                  defaultValue={selectedCV?.summary}
                  className="input-field"
                  placeholder="اكتب ملخصاً مهنياً يبرز خبراتك ومهاراتك..."
                />
              </div>
            )}

            {activeSection === 'experience' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    الخبرات العملية
                  </h3>
                  <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                    <Plus className="w-4 h-4" />
                    <span>إضافة خبرة</span>
                  </button>
                </div>
                
                <div className="space-y-4">
                  {selectedCV?.experience.map((exp, index) => (
                    <div key={exp.id} className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            المسمى الوظيفي
                          </label>
                          <input
                            type="text"
                            defaultValue={exp.position}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            اسم الشركة
                          </label>
                          <input
                            type="text"
                            defaultValue={exp.company}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            تاريخ البداية
                          </label>
                          <input
                            type="date"
                            defaultValue={exp.startDate}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            تاريخ النهاية
                          </label>
                          <input
                            type="date"
                            defaultValue={exp.endDate}
                            className="input-field"
                            disabled={exp.current}
                          />
                        </div>
                      </div>
                      <div className="mb-4">
                        <label className="flex items-center space-x-2 space-x-reverse">
                          <input
                            type="checkbox"
                            defaultChecked={exp.current}
                            className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                          />
                          <span className="text-sm text-neutral-700 dark:text-neutral-300">
                            أعمل حالياً في هذا المنصب
                          </span>
                        </label>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          وصف المهام والإنجازات
                        </label>
                        <textarea
                          rows={3}
                          defaultValue={exp.description}
                          className="input-field"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeSection === 'skills' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    المهارات
                  </h3>
                  <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                    <Plus className="w-4 h-4" />
                    <span>إضافة مهارة</span>
                  </button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {selectedCV?.skills.map((skill, index) => (
                    <div key={skill.id} className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <input
                          type="text"
                          defaultValue={skill.name}
                          className="input-field flex-1 mr-2"
                          placeholder="اسم المهارة"
                        />
                        <button className="text-red-500 hover:text-red-700">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          مستوى الإتقان
                        </label>
                        <select
                          defaultValue={skill.level}
                          className="input-field"
                        >
                          <option value="beginner">مبتدئ</option>
                          <option value="intermediate">متوسط</option>
                          <option value="advanced">متقدم</option>
                          <option value="expert">خبير</option>
                        </select>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Save Button */}
            <div className="flex justify-end mt-6 pt-6 border-t border-neutral-200 dark:border-neutral-700">
              <button
                onClick={() => toast.success('تم حفظ التغييرات')}
                className="btn-primary flex items-center space-x-2 space-x-reverse"
              >
                <Save className="w-4 h-4" />
                <span>حفظ التغييرات</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CVBuilder;


============================================================
FILE: src/pages/Dashboard.tsx
============================================================
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  CreditCard, 
  Eye, 
  Share2, 
  Plus, 
  TrendingUp,
  Users,
  QrCode,
  BarChart3,
  Calendar,
  ArrowRight,
  Zap,
  Target,
  Award
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';

const Dashboard = () => {
  const { cards, contacts, user, notifications } = useStore();

  const stats = [
    {
      name: 'إجمالي البطاقات',
      value: cards.length,
      icon: CreditCard,
      color: 'bg-blue-500',
      change: '+12%',
      changeType: 'positive'
    },
    {
      name: 'إجمالي المشاهدات',
      value: cards.reduce((sum, card) => sum + card.views, 0),
      icon: Eye,
      color: 'bg-green-500',
      change: '+8%',
      changeType: 'positive'
    },
    {
      name: 'إجمالي المشاركات',
      value: cards.reduce((sum, card) => sum + card.shares, 0),
      icon: Share2,
      color: 'bg-purple-500',
      change: '+15%',
      changeType: 'positive'
    },
    {
      name: 'جهات الاتصال',
      value: contacts.length,
      icon: Users,
      color: 'bg-orange-500',
      change: '+5%',
      changeType: 'positive'
    }
  ];

  const quickActions = [
    {
      name: 'إنشاء بطاقة جديدة',
      description: 'أنشئ بطاقة رقمية احترافية',
      icon: Plus,
      href: '/cards/new',
      color: 'bg-blue-500'
    },
    {
      name: 'مولد QR',
      description: 'أنشئ رمز QR مخصص',
      icon: QrCode,
      href: '/qr-generator',
      color: 'bg-teal-500'
    },
    {
      name: 'مسح البطاقات',
      description: 'امسح بطاقة أو رمز QR',
      icon: Zap,
      href: '/scan',
      color: 'bg-yellow-500'
    },
    {
      name: 'التحليلات',
      description: 'تتبع أداء بطاقاتك',
      icon: BarChart3,
      href: '/analytics',
      color: 'bg-indigo-500'
    }
  ];

  const recentActivity = [
    {
      id: '1',
      type: 'card_view',
      message: 'تم عرض بطاقة "أحمد محمد السعيد" 5 مرات',
      time: 'منذ ساعتين',
      icon: Eye,
      color: 'text-blue-500'
    },
    {
      id: '2',
      type: 'card_share',
      message: 'تم مشاركة بطاقة "بطاقة الشركة"',
      time: 'منذ 4 ساعات',
      icon: Share2,
      color: 'text-green-500'
    },
    {
      id: '3',
      type: 'contact_add',
      message: 'تم إضافة جهة اتصال جديدة "سارة أحمد"',
      time: 'أمس',
      icon: Users,
      color: 'text-purple-500'
    },
    {
      id: '4',
      type: 'qr_scan',
      message: 'تم مسح رمز QR الخاص بك 3 مرات',
      time: 'أمس',
      icon: QrCode,
      color: 'text-orange-500'
    }
  ];

  const unreadNotifications = notifications.filter(n => !n.isRead).length;

  return (
    <div className="space-y-6">
{/* Welcome Section */}
<div className="relative overflow-hidden rounded-2xl p-8 text-white" style={{ background: '#FACC15' }}>
  <div className="relative z-10">
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold mb-2">
          مرحباً بعودتك، {user?.name}! 👋
        </h1>
        <p className="text-yellow-100 text-lg">
          بطاقتك الذكية تبدأ من هنا. تحكم بهويتك، شاركها، وتتبع تفاعلها.
        </p>
      </div>
      <div className="hidden lg:block">
        <div className="w-32 h-32 bg-white/10 rounded-full flex items-center justify-center">
          <Award className="w-16 h-16 text-white" />
        </div>
      </div>
    </div>
    
    <div className="mt-6 flex flex-wrap gap-4">
      <div className="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
        <span className="text-sm font-medium">اشتراكك: </span>
        <span className="font-bold">
          {user?.subscription === 'pro' && 'مزيون برو'}
          {user?.subscription === 'free' && 'مزيون الأصيل'}
          {user?.subscription === 'business' && 'مزيون المؤسسي'}
        </span>
      </div>
      {unreadNotifications > 0 && (
        <div className="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
          <span className="text-sm font-medium">{unreadNotifications} إشعار جديد</span>
        </div>
      )}
    </div>
  </div>
  
  {/* Background Pattern */}
  <div className="absolute inset-0 opacity-10">
    <div className="absolute top-4 right-4 w-20 h-20 border-2 border-white rounded-full"></div>
    <div className="absolute bottom-4 left-4 w-16 h-16 border-2 border-white rounded-lg rotate-45"></div>
    <div className="absolute top-1/2 left-1/4 w-12 h-12 border-2 border-white rounded-full"></div>
  </div>
</div>
      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card hover:shadow-lg transition-all duration-200">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1">
                  {stat.name}
                </p>
                <p className="text-3xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
                  {stat.value.toLocaleString()}
                </p>
                <div className="flex items-center">
                  <TrendingUp className="w-4 h-4 text-green-500 ml-1" />
                  <span className={cn(
                    "text-sm font-medium",
                    stat.changeType === 'positive' ? "text-green-600" : "text-red-600"
                  )}>
                    {stat.change}
                  </span>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400 mr-1">
                    من الشهر الماضي
                  </span>
                </div>
              </div>
              <div className={cn("p-4 rounded-xl", stat.color)}>
                <stat.icon className="w-8 h-8 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="card">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
            إجراءات سريعة
          </h2>
          <Target className="w-6 h-6 text-neutral-400" />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {quickActions.map((action) => (
            <Link
              key={action.name}
              to={action.href}
              className="group p-4 rounded-xl border-2 border-neutral-200 dark:border-neutral-700 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 hover:shadow-md"
            >
              <div className="flex items-center space-x-3 space-x-reverse mb-3">
                <div className={cn("p-2 rounded-lg", action.color)}>
                  <action.icon className="w-5 h-5 text-white" />
                </div>
                <ArrowRight className="w-4 h-4 text-neutral-400 group-hover:text-blue-500 transition-colors" />
              </div>
              <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-1">
                {action.name}
              </h3>
              <p className="text-sm text-neutral-600 dark:text-neutral-400">
                {action.description}
              </p>
            </Link>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Cards */}
        <div className="card">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
              بطاقاتي الأخيرة
            </h2>
            <Link 
              to="/cards" 
              className="text-blue-500 hover:text-blue-600 text-sm font-medium flex items-center space-x-1 space-x-reverse"
            >
              <span>عرض الكل</span>
              <ArrowRight className="w-4 h-4" />
            </Link>
          </div>
          
          <div className="space-y-4">
            {cards.slice(0, 3).map((card) => (
              <div key={card.id} className="flex items-center space-x-4 space-x-reverse p-4 rounded-lg bg-neutral-50 dark:bg-neutral-800 hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
                <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ backgroundColor: card.colors.primary }}>
                  {card.avatar ? (
                    <img 
                      src={card.avatar} 
                      alt={card.name}
                      className="w-12 h-12 rounded-lg object-cover"
                    />
                  ) : (
                    <CreditCard className="w-6 h-6 text-white" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {card.name}
                  </h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                    {card.title}
                  </p>
                  <div className="flex items-center space-x-4 space-x-reverse text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    <span>{card.views} مشاهدة</span>
                    <span>{card.shares} مشاركة</span>
                  </div>
                </div>
                <div className={cn(
                  "w-3 h-3 rounded-full",
                  card.isActive ? "bg-green-500" : "bg-neutral-400"
                )} />
              </div>
            ))}
          </div>
          
          <Link 
            to="/cards/new"
            className="mt-6 w-full btn-primary flex items-center justify-center space-x-2 space-x-reverse"
          >
            <Plus className="w-5 h-5" />
            <span>أنشئ بطاقة جديدة</span>
          </Link>
        </div>

        {/* Recent Activity */}
        <div className="card">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
              النشاط الأخير
            </h2>
            <Calendar className="w-6 h-6 text-neutral-400" />
          </div>
          
          <div className="space-y-4">
            {recentActivity.map((activity) => (
              <div key={activity.id} className="flex items-start space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center">
                  <activity.icon className={cn("w-5 h-5", activity.color)} />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-neutral-900 dark:text-neutral-100 leading-relaxed">
                    {activity.message}
                  </p>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    {activity.time}
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 pt-4 border-t border-neutral-200 dark:border-neutral-700">
            <Link 
              to="/analytics"
              className="text-blue-500 hover:text-blue-600 text-sm font-medium flex items-center space-x-1 space-x-reverse"
            >
              <span>عرض جميع الأنشطة</span>
              <ArrowRight className="w-4 h-4" />
            </Link>
          </div>
        </div>
      </div>

      {/* Tips Section */}
      <div className="card bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800">
        <div className="flex items-start space-x-4 space-x-reverse">
          <div className="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center">
            <Zap className="w-5 h-5 text-white" />
          </div>
          <div className="flex-1">
            <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">
              💡 نصيحة اليوم
            </h3>
            <p className="text-yellow-700 dark:text-yellow-300 text-sm leading-relaxed">
              شارك بطاقتك عبر رمز QR في المؤتمرات والفعاليات لزيادة شبكة اتصالاتك المهنية بسرعة وفعالية.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


============================================================
FILE: src/pages/Jobs.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  Filter, 
  Plus, 
  MapPin, 
  Clock, 
  DollarSign,
  Building,
  Users,
  Calendar,
  Eye,
  Edit,
  Trash2,
  Send,
  Bookmark,
  ExternalLink,
  X,
  Briefcase
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Job } from '../types';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Jobs = () => {
  const { user } = useStore();
  const [jobs] = useState<Job[]>([
    {
      id: '1',
      title: 'مطور React Frontend محترف',
      company: 'شركة التقنية الحديثة',
      location: 'الرياض، السعودية',
      type: 'full-time',
      description: 'نبحث عن مطور React محترف للانضمام لفريقنا المتنامي وتطوير تطبيقات ويب حديثة ومبتكرة.',
      requirements: [
        'خبرة 3+ سنوات في React وTypeScript',
        'معرفة قوية بـ Redux أو Zustand',
        'خبرة في Git وأدوات CI/CD',
        'فهم عميق لمبادئ UX/UI',
        'إجادة اللغة الإنجليزية'
      ],
      responsibilities: [
        'تطوير واجهات مستخدم تفاعلية',
        'التعاون مع فريق التصميم والباك إند',
        'كتابة كود نظيف وقابل للصيانة',
        'إجراء مراجعات الكود',
        'تحسين أداء التطبيقات'
      ],
      salary: {
        min: 8000,
        max: 15000,
        currency: 'SAR'
      },
      benefits: [
        'تأمين صحي شامل',
        'إجازة سنوية مدفوعة',
        'فرص تطوير مهني',
        'بيئة عمل مرنة'
      ],
      status: 'open',
      postedBy: '1',
      createdAt: '2024-07-01T09:00:00Z',
      updatedAt: '2024-07-08T12:00:00Z',
      applications: [],
      tags: ['react', 'frontend', 'typescript', 'remote-friendly'],
      expiresAt: '2024-08-01T23:59:59Z'
    },
    {
      id: '2',
      title: 'مصمم UI/UX إبداعي',
      company: 'استوديو الإبداع الرقمي',
      location: 'جدة، السعودية',
      type: 'part-time',
      description: 'مطلوب مصمم واجهات مستخدم مبدع لتصميم تجارب رقمية استثنائية.',
      requirements: [
        'خبرة في Figma وAdobe XD',
        'معرفة بمبادئ UX Research',
        'portfolio قوي ومتنوع',
        'فهم للتصميم المتجاوب',
        'مهارات تواصل ممتازة'
      ],
      responsibilities: [
        'تصميم واجهات مستخدم جذابة',
        'إجراء بحوث المستخدمين',
        'إنشاء النماذج الأولية',
        'التعاون مع فريق التطوير'
      ],
      salary: {
        min: 4000,
        max: 8000,
        currency: 'SAR'
      },
      status: 'open',
      postedBy: '1',
      createdAt: '2024-06-25T11:00:00Z',
      updatedAt: '2024-07-05T16:30:00Z',
      applications: [],
      tags: ['design', 'ui', 'ux', 'figma', 'part-time']
    },
    {
      id: '3',
      title: 'مطور Full Stack (Node.js + React)',
      company: 'شركة الحلول التقنية المتكاملة',
      location: 'الدمام، السعودية',
      type: 'full-time',
      description: 'فرصة ممتازة للمطورين الشاملين للعمل على مشاريع متنوعة ومثيرة.',
      requirements: [
        'خبرة 4+ سنوات في Node.js و React',
        'معرفة بقواعد البيانات (MongoDB, PostgreSQL)',
        'خبرة في AWS أو Azure',
        'فهم لمبادئ الأمان السيبراني',
        'خبرة في Docker وKubernetes'
      ],
      responsibilities: [
        'تطوير APIs متكاملة',
        'بناء واجهات مستخدم حديثة',
        'إدارة قواعد البيانات',
        'تطبيق أفضل ممارسات الأمان'
      ],
      salary: {
        min: 12000,
        max: 20000,
        currency: 'SAR'
      },
      status: 'closed',
      postedBy: '1',
      createdAt: '2024-06-30T08:00:00Z',
      updatedAt: '2024-07-07T14:15:00Z',
      applications: [],
      tags: ['fullstack', 'nodejs', 'react', 'aws', 'senior']
    }
  ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);
  const [showJobModal, setShowJobModal] = useState(false);

  const filteredJobs = jobs.filter(job => {
    const matchesSearch = 
      job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||
      job.location.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesType = filterType === 'all' || job.type === filterType;
    const matchesStatus = filterStatus === 'all' || job.status === filterStatus;
    
    return matchesSearch && matchesType && matchesStatus;
  });

  const getJobTypeText = (type: string) => {
    switch (type) {
      case 'full-time': return 'دوام كامل';
      case 'part-time': return 'دوام جزئي';
      case 'contract': return 'تعاقد';
      case 'internship': return 'تدريب';
      case 'remote': return 'عن بُعد';
      default: return type;
    }
  };

  const getJobTypeColor = (type: string) => {
    switch (type) {
      case 'full-time': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'part-time': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'contract': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';
      case 'internship': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'remote': return 'bg-teal-100 text-teal-800 dark:bg-teal-900/20 dark:text-teal-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'closed': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      case 'draft': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
      case 'paused': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const handleJobClick = (job: Job) => {
    setSelectedJob(job);
    setShowJobModal(true);
  };

  const handleApplyJob = (jobId: string) => {
    toast.success('تم إرسال طلب التقديم بنجاح!');
    setShowJobModal(false);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            الوظائف المتاحة
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            اكتشف الفرص الوظيفية المناسبة لك ({filteredJobs.length} وظيفة)
          </p>
        </div>
        
        {user?.role === 'admin' && (
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة وظيفة جديدة</span>
          </button>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
          <input
            type="text"
            placeholder="البحث في الوظائف..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10"
          />
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4">
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع الأنواع</option>
            <option value="full-time">دوام كامل</option>
            <option value="part-time">دوام جزئي</option>
            <option value="contract">تعاقد</option>
            <option value="internship">تدريب</option>
            <option value="remote">عن بُعد</option>
          </select>

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع الحالات</option>
            <option value="open">مفتوحة</option>
            <option value="closed">مغلقة</option>
            <option value="draft">مسودة</option>
            <option value="paused">متوقفة</option>
          </select>
        </div>
      </div>

      {/* Jobs List */}
      {filteredJobs.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <Briefcase className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            لا توجد وظائف متاحة
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            جرب تغيير معايير البحث أو تحقق لاحقاً
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredJobs.map((job) => (
            <div key={job.id} className="card hover:shadow-lg transition-shadow cursor-pointer" onClick={() => handleJobClick(job)}>
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div className="flex-1">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 hover:text-primary-500">
                        {job.title}
                      </h3>
                      <p className="text-neutral-600 dark:text-neutral-400 flex items-center space-x-2 space-x-reverse">
                        <Building className="w-4 h-4" />
                        <span>{job.company}</span>
                      </p>
                    </div>
                    <div className="flex items-center space-x-2 space-x-reverse">
                      <span className={cn("px-2 py-1 text-xs rounded-full", getJobTypeColor(job.type))}>
                        {getJobTypeText(job.type)}
                      </span>
                      <span className={cn("px-2 py-1 text-xs rounded-full", getStatusColor(job.status))}>
                        {job.status === 'open' && 'مفتوحة'}
                        {job.status === 'closed' && 'مغلقة'}
                        {job.status === 'draft' && 'مسودة'}
                        {job.status === 'paused' && 'متوقفة'}
                      </span>
                    </div>
                  </div>

                  <div className="flex flex-wrap items-center gap-4 text-sm text-neutral-600 dark:text-neutral-400 mb-3">
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <MapPin className="w-4 h-4" />
                      <span>{job.location}</span>
                    </div>
                    {job.salary && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <DollarSign className="w-4 h-4" />
                        <span>{job.salary.min.toLocaleString()} - {job.salary.max.toLocaleString()} {job.salary.currency}</span>
                      </div>
                    )}
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Calendar className="w-4 h-4" />
                      <span>{new Date(job.createdAt).toLocaleDateString('ar-SA')}</span>
                    </div>
                    {job.applications && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <Users className="w-4 h-4" />
                        <span>{job.applications.length} متقدم</span>
                      </div>
                    )}
                  </div>

                  <p className="text-neutral-700 dark:text-neutral-300 line-clamp-2 mb-3">
                    {job.description}
                  </p>

                  {job.tags && job.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {job.tags.slice(0, 4).map((tag, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                      {job.tags.length > 4 && (
                        <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                          +{job.tags.length - 4}
                        </span>
                      )}
                    </div>
                  )}
                </div>

                <div className="flex items-center space-x-3 space-x-reverse lg:flex-col lg:space-x-0 lg:space-y-2">
                  {job.status === 'open' && (
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleApplyJob(job.id);
                      }}
                      className="btn-primary flex items-center space-x-2 space-x-reverse"
                    >
                      <Send className="w-4 h-4" />
                      <span>تقدم الآن</span>
                    </button>
                  )}
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      toast.success('تم حفظ الوظيفة');
                    }}
                    className="p-2 rounded-lg bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  >
                    <Bookmark className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Job Details Modal */}
      {showJobModal && selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                  {selectedJob.title}
                </h3>
                <button
                  onClick={() => setShowJobModal(false)}
                  className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-6">
                {/* Job Info */}
                <div>
                  <div className="flex items-center space-x-3 space-x-reverse mb-3">
                    <Building className="w-5 h-5 text-neutral-400" />
                    <span className="text-lg font-medium text-neutral-900 dark:text-neutral-100">
                      {selectedJob.company}
                    </span>
                  </div>
                  
                  <div className="flex flex-wrap gap-4 text-sm text-neutral-600 dark:text-neutral-400">
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <MapPin className="w-4 h-4" />
                      <span>{selectedJob.location}</span>
                    </div>
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Clock className="w-4 h-4" />
                      <span>{getJobTypeText(selectedJob.type)}</span>
                    </div>
                    {selectedJob.salary && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <DollarSign className="w-4 h-4" />
                        <span>{selectedJob.salary.min.toLocaleString()} - {selectedJob.salary.max.toLocaleString()} {selectedJob.salary.currency}</span>
                      </div>
                    )}
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Calendar className="w-4 h-4" />
                      <span>نُشر في {new Date(selectedJob.createdAt).toLocaleDateString('ar-SA')}</span>
                    </div>
                  </div>
                </div>

                {/* Description */}
                <div>
                  <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                    وصف الوظيفة
                  </h4>
                  <p className="text-neutral-700 dark:text-neutral-300 leading-relaxed">
                    {selectedJob.description}
                  </p>
                </div>

                {/* Requirements */}
                {selectedJob.requirements && selectedJob.requirements.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المتطلبات
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.requirements.map((requirement, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{requirement}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Responsibilities */}
                {selectedJob.responsibilities && selectedJob.responsibilities.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المسؤوليات
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.responsibilities.map((responsibility, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-secondary-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{responsibility}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Benefits */}
                {selectedJob.benefits && selectedJob.benefits.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المزايا
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-accent-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Tags */}
                {selectedJob.tags && selectedJob.tags.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المهارات المطلوبة
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedJob.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="px-3 py-1 text-sm bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-neutral-200 dark:border-neutral-700">
                  {selectedJob.status === 'open' ? (
                    <>
                      <button
                        onClick={() => handleApplyJob(selectedJob.id)}
                        className="btn-primary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                      >
                        <Send className="w-4 h-4" />
                        <span>تقدم للوظيفة الآن</span>
                      </button>
                      <button
                        onClick={() => {
                          toast.success('تم حفظ الوظيفة');
                          setShowJobModal(false);
                        }}
                        className="btn-secondary flex items-center justify-center space-x-2 space-x-reverse"
                      >
                        <Bookmark className="w-4 h-4" />
                        <span>حفظ</span>
                      </button>
                    </>
                  ) : (
                    <div className="text-center py-4">
                      <p className="text-neutral-600 dark:text-neutral-400">
                        هذه الوظيفة غير متاحة للتقديم حالياً
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Jobs;


============================================================
FILE: src/pages/LandingPage.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
  ArrowRight, 
  Play, 
  Check, 
  Star, 
  Users, 
  Zap, 
  Shield, 
  Globe, 
  Smartphone,
  QrCode,
  BarChart3,
  Award,
  ChevronDown,
  Menu,
  X,
  Mail,
  Phone,
  MapPin,
  Palette,
  Share2
} from 'lucide-react';
import { motion, useAnimation, useInView } from 'framer-motion';
import { cn } from '../utils/cn';

const LandingPage = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeTestimonial, setActiveTestimonial] = useState(0);

  const features = [
    {
      icon: Zap,
      title: 'إنشاء سريع',
      description: 'أنشئ بطاقتك الرقمية في أقل من 5 دقائق',
      color: 'from-yellow-400 to-orange-500'
    },
    {
      icon: QrCode,
      title: 'مشاركة ذكية',
      description: 'شارك بطاقتك عبر QR Code أو NFC أو رابط مباشر',
      color: 'from-blue-400 to-purple-500'
    },
    {
      icon: BarChart3,
      title: 'تحليلات متقدمة',
      description: 'تتبع من شاهد بطاقتك ومن تفاعل معها',
      color: 'from-green-400 to-teal-500'
    },
    {
      icon: Shield,
      title: 'أمان عالي',
      description: 'حماية بياناتك بأعلى معايير الأمان',
      color: 'from-red-400 to-pink-500'
    },
    {
      icon: Globe,
      title: 'وصول عالمي',
      description: 'بطاقتك متاحة في أي مكان وأي وقت',
      color: 'from-indigo-400 to-blue-500'
    },
    {
      icon: Smartphone,
      title: 'متوافق مع الجوال',
      description: 'تصميم متجاوب يعمل على جميع الأجهزة',
      color: 'from-purple-400 to-indigo-500'
    }
  ];

  const testimonials = [
    {
      name: 'أحمد محمد',
      position: 'مدير تسويق',
      company: 'شركة التقنية الحديثة',
      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
      content: 'مزيون غيّر طريقة تواصلي مع العملاء. الآن أستطيع مشاركة معلوماتي بسهولة ومتابعة التفاعل.',
      rating: 5
    },
    {
      name: 'سارة أحمد',
      position: 'مصممة جرافيك',
      company: 'استوديو الإبداع',
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',
      content: 'التصميم رائع والميزات متقدمة. أصبحت أكثر احترافية في التعامل مع العملاء.',
      rating: 5
    },
    {
      name: 'محمد علي',
      position: 'رائد أعمال',
      company: 'شركة الابتكار',
      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',
      content: 'منصة ممتازة ساعدتني في توسيع شبكة علاقاتي المهنية بشكل كبير.',
      rating: 5
    }
  ];

  const plans = [
    {
      name: 'مزيون الأصيل',
      nameEn: 'Mazyone Core',
      price: 'مجاني',
      description: 'للأفراد والمستخدمين الجدد',
      features: [
        'بطاقة واحدة',
        'QR Code أساسي',
        'تحليلات محدودة',
        'دعم أساسي'
      ],
      popular: false,
      color: 'border-gray-200'
    },
    {
      name: 'مزيون برو',
      nameEn: 'Mazyone Pro',
      price: '29 ريال/شهر',
      description: 'للمحترفين والأعمال الصغيرة',
      features: [
        '5 بطاقات',
        'QR مخصص مع شعار',
        'تحليلات متقدمة',
        'صفحات هبوط',
        'دعم أولوية'
      ],
      popular: true,
      color: 'border-blue-500'
    },
    {
      name: 'مزيون المؤسسي',
      nameEn: 'Mazyone Business',
      price: '99 ريال/شهر',
      description: 'للشركات والمؤسسات',
      features: [
        'بطاقات غير محدودة',
        'فرق متعددة',
        'العلامة البيضاء',
        'تكاملات API',
        'دعم مخصص'
      ],
      popular: false,
      color: 'border-purple-500'
    }
  ];

  const stats = [
    { number: '10,000+', label: 'مستخدم نشط' },
    { number: '50,000+', label: 'بطاقة تم إنشاؤها' },
    { number: '1M+', label: 'مشاهدة شهرياً' },
    { number: '99.9%', label: 'وقت التشغيل' }
  ];

  // Animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 60 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const fadeInLeft = {
    hidden: { opacity: 0, x: -60 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const fadeInRight = {
    hidden: { opacity: 0, x: 60 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const scaleIn = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.5, ease: "easeOut" } }
  };

  // Auto-rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-white dark:bg-neutral-900 overflow-hidden">
      {/* Navigation */}
      <motion.nav 
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="fixed top-0 w-full bg-white/80 dark:bg-neutral-900/80 backdrop-blur-md border-b border-neutral-200 dark:border-neutral-700 z-50"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <motion.div 
              whileHover={{ scale: 1.05 }}
              className="flex items-center space-x-3 space-x-reverse"
            >
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-teal-500 rounded-xl flex items-center justify-center">
                <span className="text-white font-bold text-lg">M</span>
              </div>
              <span className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                مزيون
              </span>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8 space-x-reverse">
              <a href="#features" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                الميزات
              </a>
              <a href="#pricing" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                الأسعار
              </a>
              <a href="#testimonials" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                آراء العملاء
              </a>
              <a href="#contact" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                تواصل معنا
              </a>
              <Link to="/login" className="btn-primary">
                تسجيل الدخول
              </Link>
            </div>

            {/* Mobile menu button */}
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="md:hidden p-2 rounded-lg text-neutral-700 dark:text-neutral-300"
            >
              {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>

          {/* Mobile Navigation */}
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden py-4 border-t border-neutral-200 dark:border-neutral-700"
            >
              <div className="space-y-4">
                <a href="#features" className="block text-neutral-700 dark:text-neutral-300">الميزات</a>
                <a href="#pricing" className="block text-neutral-700 dark:text-neutral-300">الأسعار</a>
                <a href="#testimonials" className="block text-neutral-700 dark:text-neutral-300">آراء العملاء</a>
                <a href="#contact" className="block text-neutral-700 dark:text-neutral-300">تواصل معنا</a>
                <Link to="/login" className="btn-primary w-full text-center">
                  تسجيل الدخول
                </Link>
              </div>
            </motion.div>
          )}
        </div>
      </motion.nav>

      {/* Hero Section */}
      <section className="relative pt-20 pb-20 lg:pt-32 lg:pb-32 overflow-hidden">
        {/* Background Animation */}
        <div className="absolute inset-0 -z-10">
          <motion.div
            animate={{
              scale: [1, 1.1, 1],
              rotate: [0, 5, 0],
            }}
            transition={{
              duration: 20,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute top-10 right-10 w-72 h-72 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl"
          />
          <motion.div
            animate={{
              scale: [1.1, 1, 1.1],
              rotate: [0, -5, 0],
            }}
            transition={{
              duration: 15,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute bottom-10 left-10 w-96 h-96 bg-gradient-to-br from-teal-400/20 to-green-400/20 rounded-full blur-3xl"
          />
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            {/* Hero Content */}
            <motion.div
              initial="hidden"
              animate="visible"
              variants={staggerContainer}
              className="text-center lg:text-right"
            >
              <motion.h1 
                variants={fadeInUp}
                className="text-4xl lg:text-6xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 leading-tight"
              >
                بطاقتك الرقمية
                <span className="bg-gradient-to-r from-blue-500 to-teal-500 bg-clip-text text-transparent">
                  {' '}الاحترافية
                </span>
              </motion.h1>

              <motion.p 
                variants={fadeInUp}
                className="text-xl text-neutral-600 dark:text-neutral-400 mb-8 leading-relaxed"
              >
                أنشئ بطاقة عمل رقمية احترافية في دقائق. شاركها بسهولة وتتبع تفاعل العملاء معها.
                <strong className="text-blue-500"> تواصل ذكي، نتائج أفضل.</strong>
              </motion.p>

              <motion.div 
                variants={fadeInUp}
                className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start"
              >
                <Link 
                  to="/login"
                  className="btn-primary text-lg px-8 py-4 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all"
                >
                  ابدأ مجاناً الآن
                  <ArrowRight className="w-5 h-5 mr-2" />
                </Link>
                
                <motion.button 
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center space-x-2 space-x-reverse px-8 py-4 border-2 border-neutral-300 dark:border-neutral-600 rounded-lg text-neutral-700 dark:text-neutral-300 hover:border-blue-500 hover:text-blue-500 transition-all"
                >
                  <Play className="w-5 h-5" />
                  <span>شاهد العرض التوضيحي</span>
                </motion.button>
              </motion.div>

              <motion.div 
                variants={fadeInUp}
                className="mt-8 flex items-center justify-center lg:justify-start space-x-6 space-x-reverse text-sm text-neutral-500 dark:text-neutral-400"
              >
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>مجاني للبدء</span>
                </div>
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>لا يتطلب بطاقة ائتمان</span>
                </div>
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>إعداد في دقائق</span>
                </div>
              </motion.div>
            </motion.div>

            {/* Hero Visual */}
            <motion.div
              initial="hidden"
              animate="visible"
              variants={fadeInRight}
              className="relative"
            >
              <div className="relative z-10">
                {/* Main Card */}
                <motion.div
                  animate={{
                    y: [0, -10, 0],
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="bg-white dark:bg-neutral-800 rounded-2xl shadow-2xl p-8 max-w-sm mx-auto"
                  style={{ borderTop: '4px solid #1D4ED8' }}
                >
                  <div className="text-center">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold text-xl">أ</span>
                    </div>
                    <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                      أحمد محمد
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400 mb-2">
                      مطور تطبيقات
                    </p>
                    <p className="text-sm text-neutral-500 dark:text-neutral-500 mb-4">
                      شركة التقنية المتقدمة
                    </p>
                    
                    <div className="flex justify-center space-x-3 space-x-reverse mb-4">
                      {['linkedin', 'twitter', 'github'].map((platform, index) => (
                        <motion.div
                          key={platform}
                          animate={{
                            scale: [1, 1.1, 1],
                          }}
                          transition={{
                            duration: 2,
                            delay: index * 0.3,
                            repeat: Infinity,
                            ease: "easeInOut"
                          }}
                          className="w-8 h-8 bg-neutral-100 dark:bg-neutral-700 rounded-full flex items-center justify-center"
                        >
                          <div className="w-4 h-4 bg-blue-500 rounded-sm" />
                        </motion.div>
                      ))}
                    </div>
                    
                    <button className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium">
                      حفظ جهة الاتصال
                    </button>
                  </div>
                </motion.div>

                {/* Floating QR Code */}
                <motion.div
                  animate={{
                    x: [0, 10, 0],
                    rotate: [0, 5, 0],
                  }}
                  transition={{
                    duration: 4,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute -top-4 -right-4 w-16 h-16 bg-white dark:bg-neutral-800 rounded-lg shadow-lg p-2"
                >
                  <QrCode className="w-full h-full text-neutral-400" />
                </motion.div>

                {/* Floating Stats */}
                <motion.div
                  animate={{
                    y: [0, -5, 0],
                  }}
                  transition={{
                    duration: 2.5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute -bottom-4 -left-4 bg-green-500 text-white rounded-lg px-3 py-2 text-sm font-medium shadow-lg"
                >
                  +127 مشاهدة اليوم
                </motion.div>
              </div>

              {/* Background Elements */}
              <div className="absolute inset-0 -z-10">
                <motion.div
                  animate={{
                    scale: [1, 1.05, 1],
                    opacity: [0.5, 0.8, 0.5],
                  }}
                  transition={{
                    duration: 5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute top-8 right-8 w-32 h-32 bg-blue-200 dark:bg-blue-800 rounded-full blur-2xl"
                />
                <motion.div
                  animate={{
                    scale: [1.05, 1, 1.05],
                    opacity: [0.3, 0.6, 0.3],
                  }}
                  transition={{
                    duration: 7,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute bottom-8 left-8 w-24 h-24 bg-teal-200 dark:bg-teal-800 rounded-full blur-2xl"
                />
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.3 }}
        variants={staggerContainer}
        className="py-16 bg-neutral-50 dark:bg-neutral-800"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
            {stats.map((stat, index) => (
              <motion.div
                key={index}
                variants={scaleIn}
                className="text-center"
              >
                <motion.div
                  initial={{ scale: 0 }}
                  whileInView={{ scale: 1 }}
                  transition={{ delay: index * 0.1, duration: 0.5 }}
                  className="text-3xl lg:text-4xl font-bold text-blue-500 mb-2"
                >
                  {stat.number}
                </motion.div>
                <div className="text-neutral-600 dark:text-neutral-400 font-medium">
                  {stat.label}
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* Features Section */}
      <section id="features" className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              ميزات تجعلك متميزاً
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto">
              اكتشف كيف يمكن لمزيون أن يحول طريقة تواصلك المهني ويجعلك أكثر احترافية
            </p>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.2 }}
            variants={staggerContainer}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                whileHover={{ 
                  scale: 1.05,
                  transition: { duration: 0.2 }
                }}
                className="group relative p-8 bg-white dark:bg-neutral-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-neutral-200 dark:border-neutral-700"
              >
                <div className={cn(
                  "w-16 h-16 rounded-2xl bg-gradient-to-br flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300",
                  feature.color
                )}>
                  <feature.icon className="w-8 h-8 text-white" />
                </div>
                
                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-3">
                  {feature.title}
                </h3>
                
                <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                  {feature.description}
                </p>

                {/* Hover Effect */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-teal-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* How It Works Section */}
      <section className="py-20 bg-neutral-50 dark:bg-neutral-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              كيف يعمل مزيون؟
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              ثلاث خطوات بسيطة لبطاقة رقمية احترافية
            </p>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            {[
              {
                step: '01',
                title: 'أنشئ بطاقتك',
                description: 'أضف معلوماتك الشخصية والمهنية بسهولة',
                icon: Users
              },
              {
                step: '02',
                title: 'خصص التصميم',
                description: 'اختر من القوالب الجاهزة أو صمم بطاقتك بنفسك',
                icon: Palette
              },
              {
                step: '03',
                title: 'شارك وتتبع',
                description: 'شارك بطاقتك وتتبع من شاهدها وتفاعل معها',
                icon: Share2
              }
            ].map((step, index) => (
              <motion.div
                key={index}
                initial="hidden"
                whileInView="visible"
                viewport={{ once: true, amount: 0.3 }}
                variants={{
                  hidden: { opacity: 0, y: 50 },
                  visible: { 
                    opacity: 1, 
                    y: 0, 
                    transition: { 
                      delay: index * 0.2,
                      duration: 0.6,
                      ease: "easeOut"
                    }
                  }
                }}
                className="text-center relative"
              >
                {/* Step Number */}
                <div className="relative mb-8">
                  <motion.div
                    animate={{
                      scale: [1, 1.1, 1],
                    }}
                    transition={{
                      duration: 2,
                      delay: index * 0.5,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                    className="w-20 h-20 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg"
                  >
                    <span className="text-white font-bold text-xl">{step.step}</span>
                  </motion.div>
                  
                  {/* Connecting Line */}
                  {index < 2 && (
                    <div className="hidden lg:block absolute top-10 left-full w-full h-0.5 bg-gradient-to-r from-blue-500 to-teal-500 transform -translate-y-1/2" />
                  )}
                </div>

                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                  {step.title}
                </h3>
                
                <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                  {step.description}
                </p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section id="testimonials" className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              ماذا يقول عملاؤنا؟
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              آراء حقيقية من مستخدمين راضين عن الخدمة
            </p>
          </motion.div>

          <div className="relative max-w-4xl mx-auto">
            <motion.div
              key={activeTestimonial}
              initial={{ opacity: 0, x: 100 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -100 }}
              transition={{ duration: 0.5 }}
              className="bg-white dark:bg-neutral-800 rounded-2xl shadow-xl p-8 lg:p-12 text-center"
            >
              <div className="flex justify-center mb-6">
                {[...Array(testimonials[activeTestimonial].rating)].map((_, i) => (
                  <Star key={i} className="w-6 h-6 text-yellow-400 fill-current" />
                ))}
              </div>

              <blockquote className="text-xl lg:text-2xl text-neutral-700 dark:text-neutral-300 mb-8 leading-relaxed">
                "{testimonials[activeTestimonial].content}"
              </blockquote>

              <div className="flex items-center justify-center space-x-4 space-x-reverse">
                <img
                  src={testimonials[activeTestimonial].avatar}
                  alt={testimonials[activeTestimonial].name}
                  className="w-16 h-16 rounded-full object-cover"
                />
                <div>
                  <div className="font-bold text-neutral-900 dark:text-neutral-100">
                    {testimonials[activeTestimonial].name}
                  </div>
                  <div className="text-neutral-600 dark:text-neutral-400">
                    {testimonials[activeTestimonial].position}
                  </div>
                  <div className="text-sm text-neutral-500 dark:text-neutral-500">
                    {testimonials[activeTestimonial].company}
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Testimonial Navigation */}
            <div className="flex justify-center mt-8 space-x-2 space-x-reverse">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setActiveTestimonial(index)}
                  className={cn(
                    "w-3 h-3 rounded-full transition-all duration-300",
                    index === activeTestimonial
                      ? "bg-blue-500 w-8"
                      : "bg-neutral-300 dark:bg-neutral-600 hover:bg-neutral-400 dark:hover:bg-neutral-500"
                  )}
                />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-20 bg-neutral-50 dark:bg-neutral-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              خطط تناسب احتياجاتك
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              اختر الخطة المناسبة لك وابدأ رحلتك الرقمية
            </p>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.2 }}
            variants={staggerContainer}
            className="grid grid-cols-1 lg:grid-cols-3 gap-8"
          >
            {plans.map((plan, index) => (
              <motion.div
                key={index}
                variants={scaleIn}
                whileHover={{ 
                  scale: 1.05,
                  transition: { duration: 0.2 }
                }}
                className={cn(
                  "relative bg-white dark:bg-neutral-900 rounded-2xl shadow-lg p-8 border-2 transition-all duration-300",
                  plan.popular 
                    ? "border-blue-500 shadow-blue-500/20 shadow-2xl" 
                    : plan.color
                )}
              >
                {plan.popular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gradient-to-r from-blue-500 to-teal-500 text-white px-4 py-2 rounded-full text-sm font-medium">
                      الأكثر شعبية
                    </span>
                  </div>
                )}

                <div className="text-center mb-8">
                  <h3 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
                    {plan.name}
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    {plan.description}
                  </p>
                  <div className="text-4xl font-bold text-blue-500 mb-2">
                    {plan.price}
                  </div>
                </div>

                <ul className="space-y-4 mb-8">
                  {plan.features.map((feature, featureIndex) => (
                    <li key={featureIndex} className="flex items-center space-x-3 space-x-reverse">
                      <Check className="w-5 h-5 text-green-500 flex-shrink-0" />
                      <span className="text-neutral-700 dark:text-neutral-300">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  className={cn(
                    "w-full py-3 rounded-lg font-medium transition-all duration-300",
                    plan.popular
                      ? "bg-gradient-to-r from-blue-500 to-teal-500 text-white hover:shadow-lg transform hover:scale-105"
                      : "border-2 border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 hover:border-blue-500 hover:text-blue-500"
                  )}
                >
                  {plan.price === 'مجاني' ? 'ابدأ مجاناً' : 'اختر هذه الخطة'}
                </button>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-blue-500 to-teal-500 relative overflow-hidden">
        {/* Background Animation */}
        <div className="absolute inset-0">
          <motion.div
            animate={{
              scale: [1, 1.2, 1],
              rotate: [0, 180, 360],
            }}
            transition={{
              duration: 20,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute top-0 right-0 w-96 h-96 bg-white/10 rounded-full blur-3xl"
          />
          <motion.div
            animate={{
              scale: [1.2, 1, 1.2],
              rotate: [360, 180, 0],
            }}
            transition={{
              duration: 25,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute bottom-0 left-0 w-80 h-80 bg-white/10 rounded-full blur-3xl"
          />
        </div>

        <div className="relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-white mb-6">
              جاهز لتطوير هويتك الرقمية؟
            </h2>
            <p className="text-xl text-blue-100 mb-8 leading-relaxed">
              انضم إلى آلاف المحترفين الذين يستخدمون مزيون لتطوير أعمالهم
            </p>
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link 
                to="/login"
                className="inline-flex items-center space-x-3 space-x-reverse bg-white text-blue-500 px-8 py-4 rounded-lg font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <span>ابدأ رحلتك الآن</span>
                <ArrowRight className="w-6 h-6" />
              </Link>
            </motion.div>

            <p className="text-blue-100 mt-4 text-sm">
              مجاني للبدء • لا يتطلب بطاقة ائتمان • إعداد في دقائق
            </p>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer id="contact" className="bg-neutral-900 text-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Company Info */}
            <div className="lg:col-span-2">
              <div className="flex items-center space-x-3 space-x-reverse mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-teal-500 rounded-xl flex items-center justify-center">
                  <span className="text-white font-bold text-xl">M</span>
                </div>
                <span className="text-2xl font-bold">مزيون</span>
              </div>
              
              <p className="text-neutral-400 mb-6 leading-relaxed max-w-md">
                منصة البطاقات الرقمية الاحترافية التي تمكن المحترفين من إنشاء هوية رقمية متميزة ومشاركتها بسهولة.
              </p>
              
              <div className="flex space-x-4 space-x-reverse">
                {['facebook', 'twitter', 'linkedin', 'instagram'].map((platform) => (
                  <motion.a
                    key={platform}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    href="#"
                    className="w-10 h-10 bg-neutral-800 rounded-lg flex items-center justify-center hover:bg-blue-500 transition-colors"
                  >
                    <div className="w-5 h-5 bg-current rounded-sm" />
                  </motion.a>
                ))}
              </div>
            </div>

            {/* Quick Links */}
            <div>
              <h3 className="text-lg font-bold mb-6">روابط سريعة</h3>
              <ul className="space-y-3">
                {['الميزات', 'الأسعار', 'آراء العملاء', 'المدونة', 'الدعم'].map((link) => (
                  <li key={link}>
                    <a href="#" className="text-neutral-400 hover:text-white transition-colors">
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Contact Info */}
            <div>
              <h3 className="text-lg font-bold mb-6">تواصل معنا</h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Mail className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">support@mazyone.com</span>
                </div>
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Phone className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">+966 11 234 5678</span>
                </div>
                <div className="flex items-center space-x-3 space-x-reverse">
                  <MapPin className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">الرياض، السعودية</span>
                </div>
              </div>
            </div>
          </div>

          <div className="border-t border-neutral-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center">
            <p className="text-neutral-400 text-sm">
              © 2024 مزيون. جميع الحقوق محفوظة.
            </p>
            <div className="flex space-x-6 space-x-reverse mt-4 md:mt-0">
              <a href="#" className="text-neutral-400 hover:text-white text-sm transition-colors">
                سياسة الخصوصية
              </a>
              <a href="#" className="text-neutral-400 hover:text-white text-sm transition-colors">
                شروط الاستخدام
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LandingPage;


============================================================
FILE: src/pages/LandingPages.tsx
============================================================
import React, { useState } from 'react';
import { 
  Plus, 
  Eye, 
  Edit, 
  Trash2, 
  Share2,
  Globe,
  BarChart3,
  Settings,
  Copy,
  ExternalLink,
  FileText,
  Image,
  Video,
  MapPin
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockLandingPages } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const LandingPages = () => {
  const { user } = useStore();
  const [landingPages] = useState(mockLandingPages);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedPage, setSelectedPage] = useState(null);

  const handleCreatePage = () => {
    setShowCreateModal(true);
  };

  const handleDeletePage = (pageId: string) => {
    if (window.confirm('هل أنت متأكد من حذف هذه الصفحة؟')) {
      toast.success('تم حذف الصفحة بنجاح');
    }
  };

  const handleCopyLink = (slug: string) => {
    const link = `${window.location.origin}/${slug}`;
    navigator.clipboard.writeText(link);
    toast.success('تم نسخ الرابط بنجاح!');
  };

  const getStatusColor = (isPublished: boolean) => {
    return isPublished 
      ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
      : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            صفحات الهبوط
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ صفحات هبوط احترافية لبطاقاتك وخدماتك
          </p>
        </div>
        
        <button 
          onClick={handleCreatePage}
          className="btn-primary flex items-center space-x-2 space-x-reverse"
        >
          <Plus className="w-4 h-4" />
          <span>إنشاء صفحة جديدة</span>
        </button>
      </div>

      {/* Landing Pages Grid */}
      {landingPages.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <FileText className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            لا توجد صفحات هبوط حتى الآن
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            ابدأ بإنشاء صفحة هبوط احترافية لعرض خدماتك
          </p>
          <button 
            onClick={handleCreatePage}
            className="btn-primary inline-flex items-center space-x-2 space-x-reverse"
          >
            <Plus className="w-4 h-4" />
            <span>إنشاء صفحة جديدة</span>
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {landingPages.map((page) => (
            <div key={page.id} className="card group hover:shadow-lg transition-shadow">
              {/* Page Preview */}
              <div className="aspect-video bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-4 relative overflow-hidden">
                <div className="absolute inset-0 bg-gradient-to-br from-primary-500/20 to-secondary-500/20 flex items-center justify-center">
                  <Globe className="w-8 h-8 text-neutral-400" />
                </div>
                <div className="absolute top-2 right-2">
                  <span className={cn("px-2 py-1 text-xs rounded-full", getStatusColor(page.isPublished))}>
                    {page.isPublished ? 'منشورة' : 'مسودة'}
                  </span>
                </div>
              </div>

              {/* Page Info */}
              <div className="space-y-3">
                <div>
                  <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {page.title}
                  </h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                    /{page.slug}
                  </p>
                </div>

                {/* Analytics */}
                <div className="flex items-center space-x-4 space-x-reverse text-sm text-neutral-600 dark:text-neutral-400">
                  <div className="flex items-center space-x-1 space-x-reverse">
                    <Eye className="w-4 h-4" />
                    <span>{page.analytics.views}</span>
                  </div>
                  <div className="flex items-center space-x-1 space-x-reverse">
                    <BarChart3 className="w-4 h-4" />
                    <span>{page.analytics.clicks}</span>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex items-center space-x-2 space-x-reverse">
                  <button 
                    onClick={() => window.open(`/${page.slug}`, '_blank')}
                    className="flex-1 bg-primary-500 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-primary-600 transition-colors flex items-center justify-center space-x-1 space-x-reverse"
                  >
                    <Eye className="w-4 h-4" />
                    <span>معاينة</span>
                  </button>
                  
                  <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                    <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                  
                  <button 
                    onClick={() => handleCopyLink(page.slug)}
                    className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  >
                    <Copy className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                  
                  <button 
                    onClick={() => handleDeletePage(page.id)}
                    className="p-2 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                  >
                    <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Create Page Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              إنشاء صفحة هبوط جديدة
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  عنوان الصفحة
                </label>
                <input
                  type="text"
                  className="input-field"
                  placeholder="أدخل عنوان الصفحة"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الرابط المخصص
                </label>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm text-neutral-500 dark:text-neutral-400">
                    mazyone.com/
                  </span>
                  <input
                    type="text"
                    className="input-field flex-1"
                    placeholder="my-page"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  القالب
                </label>
                <select className="input-field">
                  <option>قالب احترافي</option>
                  <option>قالب إبداعي</option>
                  <option>قالب بسيط</option>
                  <option>قالب شخصي</option>
                </select>
              </div>
            </div>
            
            <div className="flex items-center space-x-3 space-x-reverse mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="flex-1 px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
              >
                إلغاء
              </button>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  toast.success('تم إنشاء الصفحة بنجاح!');
                }}
                className="flex-1 btn-primary"
              >
                إنشاء الصفحة
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default LandingPages;


============================================================
FILE: src/pages/Login.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Eye, EyeOff, Mail, Lock } from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import AuthIllustration from '../assets/auth-illustration.svg';

const Login: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useStore();

  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    email: 'ahmed@example.com',
    password: 'password',
    remember: false,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await login(form.email, form.password);
      toast.success('تم تسجيل الدخول بنجاح');
      navigate('/dashboard');
    } catch {
      toast.error('بيانات غير صحيحة');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white dark:bg-neutral-900 flex flex-col justify-center" dir="rtl">
      {/* الصف الأول: الشعار والترحيب + العنوان والوصف */}
      <div className="hidden lg:flex flex-row w-full items-start justify-center pt-16 pb-4 px-8">
        {/* يمين: الشعار والترحيب */}
        <div className="flex flex-col items-center justify-start w-1/2">
          <div className="w-20 h-20 rounded-2xl flex items-center justify-center mb-4 shadow-lg"
            style={{ background: 'linear-gradient(135deg, #006BE3 0%, #7EDDB9 100%)' }}>
            <span className="text-white font-bold text-3xl">M</span>
          </div>
          <h1 className="text-3xl font-bold mb-2 text-neutral-900 dark:text-neutral-100">
            مرحباً بك في عالم مَزيون
          </h1>
        </div>
        {/* يسار: العنوان والوصف */}
        <div className="flex flex-col items-center justify-start w-1/2">
          <h2 className="font-inter text-6xl font-bold text-black dark:text-white mb-4 mt-0 text-center w-full">
            Mazyone
          </h2>
          <p className="font-inter text-xl text-neutral-600 dark:text-neutral-400 mb-0 text-center w-full">
            The smart digital identity platform that<br />
            empowers professionals to connect, share, and grow.
          </p>
        </div>
      </div>

      {/* الصف الثاني: نموذج تسجيل الدخول + الصورة */}
      <div className="flex flex-col lg:flex-row w-full flex-1 items-stretch justify-center">
        {/* يمين: نموذج تسجيل الدخول */}
        <div className="flex items-start justify-center w-full lg:w-1/2 p-6">
          <div className="w-full max-w-md mt-0 lg:mt-8">
            <form
              onSubmit={handleSubmit}
              className="space-y-6 bg-white dark:bg-neutral-900 p-8 rounded-2xl shadow-xl border"
            >
              <header className="text-center space-y-2 mb-4">
                <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                  تسجيل الدخول
                </h1>
                <p className="text-neutral-600 dark:text-neutral-400 text-base">
                  أدخل بياناتك للوصول إلى حسابك
                </p>
              </header>
              {/* email */}
              <div>
                <label className="block mb-2 text-sm font-medium">
                  البريد الإلكترونى
                </label>
                <div className="relative">
                  <Mail className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
                  <input
                    type="email"
                    required
                    placeholder="name@example.com"
                    value={form.email}
                    onChange={(e) => setForm({ ...form, email: e.target.value })}
                    className="input-field pr-10"
                  />
                </div>
              </div>

              {/* password */}
              <div>
                <label className="block mb-2 text-sm font-medium">
                  كلمة المرور
                </label>
                <div className="relative">
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
                  <input
                    type={showPassword ? 'text' : 'password'}
                    required
                    placeholder="••••••••"
                    value={form.password}
                    onChange={(e) =>
                      setForm({ ...form, password: e.target.value })
                    }
                    className="input-field pr-10 pl-10"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-400"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </div>

              {/* remember & submit */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-sm space-x-2 space-x-reverse">
                  <input
                    type="checkbox"
                    checked={form.remember}
                    onChange={(e) =>
                      setForm({ ...form, remember: e.target.checked })
                    }
                    className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                  />
                  <span>تذكرنى</span>
                </label>

                <a href="#" className="text-primary-500 text-sm hover:underline">
                  نسيت كلمة المرور؟
                </a>
              </div>

              <button
                type="submit"
                disabled={loading}
                className="btn-primary w-full disabled:opacity-50"
              >
                {loading ? 'جارى الدخول...' : 'دخول'}
              </button>

              <p className="text-sm text-center">
                ليس لديك حساب؟{' '}
                <a href="/register" className="text-primary-500 hover:underline">
                  إنشاء حساب جديد
                </a>
              </p>
            </form>
          </div>
        </div>
        {/* يسار: الصورة */}
        <div className="hidden lg:flex items-start justify-center w-1/2 pt-8 pl-8 h-full">
          <img
            src={AuthIllustration}
            alt="Authentication illustration"
            className="h-[calc(100vh-4rem)] max-h-screen w-auto object-contain"
            style={{ alignSelf: 'flex-start', height: 'calc(100vh - 4rem)', maxHeight: '100vh' }}
          />
        </div>
      </div>
    </div>
  );
};

export default Login;


============================================================
FILE: src/pages/Payment.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { 
  CreditCard, 
  Shield, 
  Check, 
  ArrowRight, 
  Lock,
  Calendar,
  User,
  Building,
  Crown,
  Star,
  Gift,
  Users
} from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const Payment = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { user } = useStore();
  const [selectedPlan, setSelectedPlan] = useState(searchParams.get('plan') || 'pro');
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'bank' | 'wallet'>('card');
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardName: '',
    billingAddress: '',
    city: '',
    postalCode: '',
    country: 'SA'
  });

  const plans = {
    pro: {
      name: 'مزيون برو',
      description: 'للمحترفين والأفراد',
      monthlyPrice: 99,
      yearlyPrice: 990,
      features: [
        '5 بطاقات رقمية',
        'QR مخصص مع شعار',
        'تحليلات متقدمة',
        'صفحات هبوط',
        'دعم فني',
        'تكامل وسائل التواصل'
      ],
      color: 'blue',
      popular: true
    },
    'pro-plus': {
      name: 'مزيون برو بلس',
      description: 'للمحترفين المتقدمين',
      monthlyPrice: 199,
      yearlyPrice: 1990,
      features: [
        'بطاقات غير محدودة',
        'منشئ السيرة الذاتية',
        'إزالة العلامة المائية',
        'تحليلات شاملة',
        'دعم أولوية',
        'تصدير متقدم'
      ],
      color: 'purple',
      popular: false
    },
    business: {
      name: 'مزيون المؤسسي',
      description: 'للشركات والفرق',
      monthlyPrice: 299,
      yearlyPrice: 2990,
      features: [
        'فرق متعددة',
        'إدارة الصلاحيات',
        'العلامة البيضاء',
        'تكاملات API',
        'دعم مخصص',
        'تقارير مفصلة'
      ],
      color: 'gold',
      popular: false
    }
  };

  const currentPlan = plans[selectedPlan as keyof typeof plans];
  const finalPrice = billingCycle === 'yearly' 
    ? currentPlan.yearlyPrice 
    : currentPlan.monthlyPrice;
  const savings = billingCycle === 'yearly' 
    ? (currentPlan.monthlyPrice * 12) - currentPlan.yearlyPrice 
    : 0;

  const paymentMethods = [
    {
      id: 'card',
      name: 'بطاقة ائتمانية',
      icon: CreditCard,
      description: 'Visa, Mastercard, American Express'
    },
    {
      id: 'bank',
      name: 'تحويل بنكي',
      icon: Building,
      description: 'تحويل مباشر من البنك'
    },
    {
      id: 'wallet',
      name: 'محفظة رقمية',
      icon: Shield,
      description: 'Apple Pay, STC Pay, مدى'
    }
  ];

  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
  }, [user, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // محاكاة عملية الدفع
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      toast.success('تم الدفع بنجاح! مرحباً بك في خطة ' + currentPlan.name + ' 🎉');
      navigate('/dashboard?welcome=true');
    } catch (error) {
      toast.error('حدث خطأ أثناء معالجة الدفع');
    } finally {
      setIsLoading(false);
    }
  };

  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(' ');
    } else {
      return v;
    }
  };

  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    if (v.length >= 2) {
      return v.substring(0, 2) + '/' + v.substring(2, 4);
    }
    return v;
  };

  if (!user) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-teal-50 dark:from-neutral-900 dark:via-neutral-800 dark:to-neutral-900 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
            إتمام الاشتراك
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            خطوة واحدة فقط للانضمام إلى مزيون {currentPlan.name}
          </p>
        </div>

        <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Payment Form */}
          <div className="space-y-6">
            {/* Plan Selection */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                اختيار الخطة
              </h2>
              
              <div className="space-y-3">
                {Object.entries(plans).map(([key, plan]) => (
                  <button
                    key={key}
                    onClick={() => setSelectedPlan(key)}
                    className={cn(
                      "w-full p-4 rounded-lg border-2 transition-colors text-right",
                      selectedPlan === key
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                    )}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="flex items-center space-x-2 space-x-reverse">
                          <h3 className="font-bold text-neutral-900 dark:text-neutral-100">
                            {plan.name}
                          </h3>
                          {plan.popular && (
                            <span className="bg-blue-500 text-white px-2 py-1 rounded-full text-xs">
                              الأكثر شعبية
                            </span>
                          )}
                          {key === 'business' && (
                            <Crown className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <p className="text-sm text-neutral-600 dark:text-neutral-400">
                          {plan.description}
                        </p>
                      </div>
                      <div className="text-right">
                        <span className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
                          {billingCycle === 'yearly' ? plan.yearlyPrice : plan.monthlyPrice} ريال
                        </span>
                        <span className="text-neutral-600 dark:text-neutral-400">
                          /{billingCycle === 'yearly' ? 'سنة' : 'شهر'}
                        </span>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Billing Cycle */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                دورة الفوترة
              </h2>
              
              <div className="grid grid-cols-2 gap-4">
                <button
                  onClick={() => setBillingCycle('monthly')}
                  className={cn(
                    "p-4 rounded-lg border-2 transition-colors",
                    billingCycle === 'monthly'
                      ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                  )}
                >
                  <h3 className="font-bold text-neutral-900 dark:text-neutral-100">شهري</h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {currentPlan.monthlyPrice} ريال/شهر
                  </p>
                </button>

                <button
                  onClick={() => setBillingCycle('yearly')}
                  className={cn(
                    "p-4 rounded-lg border-2 transition-colors relative",
                    billingCycle === 'yearly'
                      ? "border-green-500 bg-green-50 dark:bg-green-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                  )}
                >
                  {savings > 0 && (
                    <div className="absolute -top-2 -right-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs">
                      وفر {savings} ريال
                    </div>
                  )}
                  <h3 className="font-bold text-neutral-900 dark:text-neutral-100">سنوي</h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {currentPlan.yearlyPrice} ريال/سنة
                  </p>
                  <p className="text-xs text-green-600 dark:text-green-400 mt-1">
                    شهرين مجاناً!
                  </p>
                </button>
              </div>
            </div>

            {/* Payment Method */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                طريقة الدفع
              </h2>
              
              <div className="space-y-3 mb-6">
                {paymentMethods.map((method) => (
                  <button
                    key={method.id}
                    onClick={() => setPaymentMethod(method.id as any)}
                    className={cn(
                      "w-full p-4 rounded-lg border-2 transition-colors text-right",
                      paymentMethod === method.id
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                    )}
                  >
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <method.icon className="w-5 h-5 text-blue-500" />
                      <div>
                        <h3 className="font-medium text-neutral-900 dark:text-neutral-100">
                          {method.name}
                        </h3>
                        <p className="text-sm text-neutral-600 dark:text-neutral-400">
                          {method.description}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>

              {/* Payment Form */}
              {paymentMethod === 'card' && (
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رقم البطاقة
                    </label>
                    <div className="relative">
                      <CreditCard className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        type="text"
                        value={formData.cardNumber}
                        onChange={(e) => setFormData({ 
                          ...formData, 
                          cardNumber: formatCardNumber(e.target.value) 
                        })}
                        className="input-field pr-10"
                        placeholder="1234 5678 9012 3456"
                        maxLength={19}
                        required
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        تاريخ الانتهاء
                      </label>
                      <div className="relative">
                        <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          type="text"
                          value={formData.expiryDate}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            expiryDate: formatExpiryDate(e.target.value) 
                          })}
                          className="input-field pr-10"
                          placeholder="MM/YY"
                          maxLength={5}
                          required
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        CVV
                      </label>
                      <div className="relative">
                        <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          type="text"
                          value={formData.cvv}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            cvv: e.target.value.replace(/\D/g, '').slice(0, 4) 
                          })}
                          className="input-field pr-10"
                          placeholder="123"
                          maxLength={4}
                          required
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اسم حامل البطاقة
                    </label>
                    <div className="relative">
                      <User className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        type="text"
                        value={formData.cardName}
                        onChange={(e) => setFormData({ ...formData, cardName: e.target.value })}
                        className="input-field pr-10"
                        placeholder="أحمد محمد السعيد"
                        required
                      />
                    </div>
                  </div>

                  <button
                    type="submit"
                    disabled={isLoading}
                    className={cn(
                      "w-full bg-gradient-to-r from-blue-500 to-teal-500 text-white py-4 px-6 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 space-x-reverse",
                      "hover:from-blue-600 hover:to-teal-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                      "disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105 active:scale-95"
                    )}
                  >
                    {isLoading ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>جاري المعالجة...</span>
                      </>
                    ) : (
                      <>
                        <Shield className="w-5 h-5" />
                        <span>دفع آمن - {finalPrice} ريال</span>
                        <ArrowRight className="w-5 h-5" />
                      </>
                    )}
                  </button>
                </form>
              )}

              {paymentMethod === 'bank' && (
                <div className="text-center py-8">
                  <Building className="w-16 h-16 text-neutral-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
                    التحويل البنكي
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    سيتم توجيهك لإتمام التحويل البنكي
                  </p>
                  <button
                    onClick={() => handleSubmit({ preventDefault: () => {} } as any)}
                    disabled={isLoading}
                    className="btn-primary"
                  >
                    متابعة التحويل
                  </button>
                </div>
              )}

              {paymentMethod === 'wallet' && (
                <div className="text-center py-8">
                  <Shield className="w-16 h-16 text-neutral-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
                    المحفظة الرقمية
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    اختر محفظتك الرقمية المفضلة
                  </p>
                  <div className="grid grid-cols-2 gap-4">
                    <button className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg hover:border-blue-300 transition-colors">
                      <img src="/apple-pay.png" alt="Apple Pay" className="h-8 mx-auto" />
                    </button>
                    <button className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg hover:border-blue-300 transition-colors">
                      <img src="/stc-pay.png" alt="STC Pay" className="h-8 mx-auto" />
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Order Summary */}
          <div className="space-y-6">
            {/* Plan Summary */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700 sticky top-8">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-6">
                ملخص الطلب
              </h2>

              <div className="space-y-4 mb-6">
                <div className="flex items-center justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">الخطة</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {currentPlan.name}
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">دورة الفوترة</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {billingCycle === 'yearly' ? 'سنوي' : 'شهري'}
                  </span>
                </div>

                {billingCycle === 'yearly' && savings > 0 && (
                  <div className="flex items-center justify-between text-green-600 dark:text-green-400">
                    <span>الخصم السنوي</span>
                    <span className="font-medium">-{savings} ريال</span>
                  </div>
                )}

                <div className="border-t border-neutral-200 dark:border-neutral-700 pt-4">
                  <div className="flex items-center justify-between text-lg">
                    <span className="font-bold text-neutral-900 dark:text-neutral-100">الإجمالي</span>
                    <span className="font-bold text-neutral-900 dark:text-neutral-100">
                      {finalPrice} ريال
                    </span>
                  </div>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                    شامل ضريبة القيمة المضافة
                  </p>
                </div>
              </div>

              {/* Plan Features */}
              <div className="space-y-3 mb-6">
                <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
                  ما ستحصل عليه:
                </h3>
                {currentPlan.features.map((feature, index) => (
                  <div key={index} className="flex items-center space-x-2 space-x-reverse">
                    <Check className="w-4 h-4 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-neutral-600 dark:text-neutral-400">{feature}</span>
                  </div>
                ))}
              </div>

              {/* Security Badge */}
              <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                <div className="flex items-center space-x-2 space-x-reverse mb-2">
                  <Shield className="w-5 h-5 text-green-600 dark:text-green-400" />
                  <span className="font-medium text-green-800 dark:text-green-200">
                    دفع آمن ومحمي
                  </span>
                </div>
                <p className="text-sm text-green-700 dark:text-green-300">
                  معاملاتك محمية بتشفير SSL 256-bit ومعايير الأمان الدولية
                </p>
              </div>

              {/* Money Back Guarantee */}
              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-4">
                <div className="flex items-center space-x-2 space-x-reverse mb-2">
                  <Gift className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                  <span className="font-medium text-blue-800 dark:text-blue-200">
                    ضمان استرداد الأموال
                  </span>
                </div>
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  30 يوم ضمان كامل لاسترداد الأموال إذا لم تكن راضياً
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Trust Indicators */}
        <div className="max-w-4xl mx-auto mt-12 text-center">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            <div className="flex flex-col items-center">
              <Shield className="w-8 h-8 text-green-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                دفع آمن 100%
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Star className="w-8 h-8 text-yellow-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                تقييم 4.9/5
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Users className="w-8 h-8 text-blue-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                +10,000 عميل
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Gift className="w-8 h-8 text-purple-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                ضمان 30 يوم
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;


============================================================
FILE: src/pages/QRGenerator.tsx
============================================================
// src/pages/QRGenerator.tsx (النسخة النهائية العاملة)
import React, { useState, useRef, useEffect } from 'react';
import { 
  Download, 
  Share2, 
  Copy, 
  Upload,
  Save,
  Trash2,
  Plus,
  Settings,
  Palette,
  Shapes,
  Sticker,
  ImageIcon,
  RefreshCw,
  Eye
} from 'lucide-react';
import { useStore } from '../store/useStore';
import QRShapes from '../components/qr/QRShapes';
import QRStickers from '../components/qr/QRStickers';
import { AdvancedQRGenerator, type QROptions } from '../lib/qr-generator';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const QRGenerator = () => {
  const { user } = useStore();
  const qrGenerator = useRef(new AdvancedQRGenerator());
  
  // QR Data State
  const [qrData, setQrData] = useState({
    type: 'url',
    content: '',
    title: '',
  });

  // Customization State
  const [customization, setCustomization] = useState<QROptions>({
    size: 300,
    foregroundColor: '#1D4ED8',
    backgroundColor: '#FFFFFF',
    shape: 'square',
    pattern: 'square',
    logoSize: 50,
    eyeColor: '#1D4ED8',
    eyeStrokeColor: '#1D4ED8',
    eyeballColor: '#1D4ED8'
  });

  // UI State
  const [activeTab, setActiveTab] = useState('content');
  const [qrImageUrl, setQrImageUrl] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  
  const fileInputRef = useRef<HTMLInputElement>(null);

  const qrTypes = [
    { id: 'url', name: 'رابط موقع', placeholder: 'https://example.com' },
    { id: 'text', name: 'نص', placeholder: 'أدخل النص هنا' },
    { id: 'email', name: 'بريد إلكتروني', placeholder: 'example@domain.com' },
    { id: 'phone', name: 'رقم هاتف', placeholder: '+966501234567' },
    { id: 'wifi', name: 'شبكة WiFi', placeholder: 'اسم الشبكة:كلمة المرور:WPA' },
  ];

  const tabs = [
    { id: 'content', name: 'المحتوى', icon: Plus },
    { id: 'shapes', name: 'الأشكال', icon: Shapes },
    { id: 'stickers', name: 'الستيكرز', icon: Sticker },
    { id: 'colors', name: 'الألوان', icon: Palette },
    { id: 'patterns', name: 'الأنماط', icon: Settings },
    { id: 'logo', name: 'اللوجو', icon: ImageIcon }
  ];

  // Generate QR content based on type
  const generateQRContent = (): string => {
    if (!qrData.content.trim()) return '';
    
    switch (qrData.type) {
      case 'url':
        return qrData.content;
      case 'email':
        return `mailto:${qrData.content}`;
      case 'phone':
        return `tel:${qrData.content}`;
      case 'wifi':
        const [ssid, password, security] = qrData.content.split(':');
        return `WIFI:T:${security || 'WPA'};S:${ssid};P:${password};;`;
      default:
        return qrData.content;
    }
  };

  // Generate QR Code whenever data or customization changes
  useEffect(() => {
    const generateQR = async () => {
      const content = generateQRContent();
      if (!content) {
        setQrImageUrl('');
        return;
      }

      setIsGenerating(true);
      try {
        const qrUrl = await qrGenerator.current.generateQR(content, customization);
        setQrImageUrl(qrUrl);
      } catch (error) {
        console.error('Error generating QR code:', error);
        toast.error('حدث خطأ في توليد رمز QR');
      } finally {
        setIsGenerating(false);
      }
    };

    generateQR();
  }, [qrData, customization]);

  // Handle shape selection
  const handleShapeSelect = (shape: string) => {
    setCustomization(prev => ({ ...prev, shape }));
    toast.success(`تم اختيار شكل: ${shape}`);
  };

  // Handle sticker selection
  const handleStickerSelect = (sticker: string) => {
    setCustomization(prev => ({ ...prev, sticker }));
    toast.success('تم تطبيق الستيكر!');
  };

  // Handle pattern change
  const handlePatternChange = (pattern: string) => {
    setCustomization(prev => ({ ...prev, pattern: pattern as any }));
    toast.success(`تم تغيير النمط إلى: ${pattern}`);
  };

  // Handle logo upload
  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.size > 2 * 1024 * 1024) {
      toast.error('حجم الملف يجب أن يكون أقل من 2MB');
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result as string;
      setCustomization(prev => ({ ...prev, logo: result }));
      toast.success('تم رفع اللوجو بنجاح!');
    };
    reader.readAsDataURL(file);
  };

  // Download function
  const handleDownload = () => {
    if (!qrImageUrl) {
      toast.error('لا يوجد رمز QR للتحميل');
      return;
    }

    const link = document.createElement('a');
    link.download = `qr-${qrData.title || 'code'}.png`;
    link.href = qrImageUrl;
    link.click();
    toast.success('تم تحميل رمز QR بنجاح!');
  };

  // Reset function
  const handleReset = () => {
    setQrData({ type: 'url', content: '', title: '' });
    setCustomization({
      size: 300,
      foregroundColor: '#1D4ED8',
      backgroundColor: '#FFFFFF',
      shape: 'square',
      pattern: 'square',
      logoSize: 50,
      eyeColor: '#1D4ED8',
      eyeStrokeColor: '#1D4ED8',
      eyeballColor: '#1D4ED8'
    });
    toast.success('تم إعادة تعيين الإعدادات');
  };

  const qrContentForDisplay = generateQRContent();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
            مولد رموز QR المتقدم
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ رموز QR مخصصة بأشكال وألوان احترافية
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button
            onClick={handleReset}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <RefreshCw className="w-4 h-4" />
            <span>إعادة تعيين</span>
          </button>
          <button
            onClick={handleDownload}
            className="btn-primary flex items-center space-x-2 space-x-reverse"
            disabled={!qrImageUrl}
          >
            <Download className="w-4 h-4" />
            <span>تحميل</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Controls Section */}
        <div className="lg:col-span-2 space-y-6">
          {/* Tab Navigation */}
          <div className="card">
            <div className="flex flex-wrap gap-2 mb-6">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={cn(
                    "flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg font-medium transition-colors",
                    activeTab === tab.id
                      ? "bg-primary-500 text-white"
                      : "bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700"
                  )}
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </button>
              ))}
            </div>

            {/* Tab Content */}
            <div className="min-h-96">
              {/* Content Tab */}
              {activeTab === 'content' && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                      نوع المحتوى
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {qrTypes.map((type) => (
                        <button
                          key={type.id}
                          onClick={() => setQrData({ ...qrData, type: type.id, content: '' })}
                          className={cn(
                            "p-3 rounded-lg border text-sm font-medium transition-colors",
                            qrData.type === type.id
                              ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300"
                              : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 text-neutral-700 dark:text-neutral-300"
                          )}
                        >
                          {type.name}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        عنوان الرمز (اختياري)
                      </label>
                      <input
                        type="text"
                        value={qrData.title}
                        onChange={(e) => setQrData({ ...qrData, title: e.target.value })}
                        className="input-field"
                        placeholder="أدخل عنواناً للرمز"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        المحتوى
                      </label>
                      <textarea
                        value={qrData.content}
                        onChange={(e) => setQrData({ ...qrData, content: e.target.value })}
                        className="input-field min-h-24"
                        placeholder={qrTypes.find(t => t.id === qrData.type)?.placeholder}
                        rows={3}
                      />
                    </div>
                  </div>
                </div>
              )}

              {/* Shapes Tab */}
              {activeTab === 'shapes' && (
                <div>
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                    اختر شكل الرمز
                  </h3>
                  <QRShapes
                    selectedShape={customization.shape}
                    onShapeSelect={handleShapeSelect}
                  />
                </div>
              )}

              {/* Stickers Tab */}
              {activeTab === 'stickers' && (
                <div>
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                    اختر إطار الستيكر
                  </h3>
                  <QRStickers
                    selectedSticker={customization.sticker || ''}
                    onStickerSelect={handleStickerSelect}
                  />
                </div>
              )}

              {/* Colors Tab */}
              {activeTab === 'colors' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    تخصيص الألوان
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {[
                      { key: 'foregroundColor', label: 'لون المقدمة' },
                      { key: 'backgroundColor', label: 'لون الخلفية' },
                      { key: 'eyeColor', label: 'لون العين' },
                      { key: 'eyeStrokeColor', label: 'لون حدود العين' },
                      { key: 'eyeballColor', label: 'لون بؤبؤ العين' }
                    ].map((colorOption) => (
                      <div key={colorOption.key}>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          {colorOption.label}
                        </label>
                        <div className="flex items-center space-x-3 space-x-reverse">
                          <input
                            type="color"
                            value={customization[colorOption.key as keyof QROptions] as string}
                            onChange={(e) => setCustomization(prev => ({ 
                              ...prev, 
                              [colorOption.key]: e.target.value 
                            }))}
                            className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                          />
                          <input
                            type="text"
                            value={customization[colorOption.key as keyof QROptions] as string}
                            onChange={(e) => setCustomization(prev => ({ 
                              ...prev, 
                              [colorOption.key]: e.target.value 
                            }))}
                            className="input-field flex-1"
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Patterns Tab */}
              {activeTab === 'patterns' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    نمط الرمز
                  </h3>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      شكل النقاط
                    </label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                      {[
                        { id: 'square', name: 'مربع' },
                        { id: 'dots', name: 'نقاط' },
                        { id: 'rounded', name: 'مستدير' },
                        { id: 'diamond', name: 'معين' },
                        { id: 'star', name: 'نجمة' }
                      ].map((pattern) => (
                        <button
                          key={pattern.id}
                          onClick={() => handlePatternChange(pattern.id)}
                          className={cn(
                            "p-3 rounded-lg border text-sm font-medium transition-colors",
                            customization.pattern === pattern.id
                              ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300"
                              : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 text-neutral-700 dark:text-neutral-300"
                          )}
                        >
                          {pattern.name}
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      حجم الرمز: {customization.size}px
                    </label>
                    <input
                      type="range"
                      min="200"
                      max="500"
                      step="50"
                      value={customization.size}
                      onChange={(e) => setCustomization(prev => ({ 
                        ...prev, 
                        size: parseInt(e.target.value) 
                      }))}
                      className="w-full h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer dark:bg-neutral-700"
                    />
                    <div className="flex justify-between text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                      <span>200px</span>
                      <span>500px</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Logo Tab */}
              {activeTab === 'logo' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    إضافة لوجو
                  </h3>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رفع اللوجو
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleLogoUpload}
                        className="hidden"
                        ref={fileInputRef}
                      />
                      <button
                        onClick={() => fileInputRef.current?.click()}
                        className="btn-secondary flex items-center space-x-2 space-x-reverse"
                      >
                        <Upload className="w-4 h-4" />
                        <span>اختر لوجو</span>
                      </button>
                      {customization.logo && (
                        <button
                          onClick={() => setCustomization(prev => ({ ...prev, logo: undefined }))}
                          className="btn-outline flex items-center space-x-2 space-x-reverse"
                        >
                          <Trash2 className="w-4 h-4" />
                          <span>إزالة</span>
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                      PNG أو JPG، الحد الأقصى 2MB
                    </p>
                  </div>

                  {customization.logo && (
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        حجم اللوجو: {customization.logoSize}px
                      </label>
                      <input
                        type="range"
                        min="20"
                        max="100"
                        value={customization.logoSize}
                        onChange={(e) => setCustomization(prev => ({ 
                          ...prev, 
                          logoSize: parseInt(e.target.value) 
                        }))}
                        className="w-full"
                      />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Preview Section */}
        <div className="space-y-6">
          {/* QR Preview */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              معاينة الرمز
            </h2>
            
            <div className="flex justify-center p-8 bg-neutral-50 dark:bg-neutral-800 rounded-lg min-h-80">
              {isGenerating ? (
                <div className="text-center text-neutral-500 dark:text-neutral-400 flex flex-col items-center justify-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mb-4"></div>
                  <p>جاري إنشاء الرمز...</p>
                </div>
              ) : qrImageUrl ? (
                <img 
                  src={qrImageUrl} 
                  alt="Generated QR Code" 
                  className="max-w-full max-h-full object-contain"
                  style={{ maxWidth: customization.size, maxHeight: customization.size }}
                />
              ) : (
                <div className="text-center text-neutral-500 dark:text-neutral-400 flex flex-col items-center justify-center">
                  <div className="w-32 h-32 border-2 border-dashed border-neutral-300 dark:border-neutral-600 rounded-lg flex items-center justify-center mb-4">
                    <Eye className="w-8 h-8" />
                  </div>
                  <p>أدخل محتوى لعرض الرمز</p>
                </div>
              )}
            </div>

            {qrContentForDisplay && (
              <div className="mt-4 p-3 bg-neutral-100 dark:bg-neutral-800 rounded-lg">
                <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-1">المحتوى:</p>
                <p className="text-sm font-mono text-neutral-900 dark:text-neutral-100 break-all">
                  {qrContentForDisplay}
                </p>
              </div>
            )}
          </div>

          {/* Quick Actions */}
          <div className="card">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              إجراءات سريعة
            </h3>
            
            <div className="space-y-3">
              <button
                onClick={handleDownload}
                disabled={!qrImageUrl}
                className="w-full btn-primary flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Download className="w-4 h-4" />
                <span>تحميل PNG</span>
              </button>
              
              <button
                onClick={() => {
                  if (qrContentForDisplay) {
                    navigator.clipboard.writeText(qrContentForDisplay);
                    toast.success('تم نسخ المحتوى!');
                  }
                }}
                disabled={!qrContentForDisplay}
                className="w-full btn-secondary flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Copy className="w-4 h-4" />
                <span>نسخ المحتوى</span>
              </button>
              
              <button
                onClick={() => {
                  if (navigator.share && qrContentForDisplay) {
                    navigator.share({
                      title: qrData.title || 'رمز QR',
                      text: qrContentForDisplay
                    });
                  } else {
                    toast.error('المشاركة غير مدعومة في هذا المتصفح');
                  }
                }}
                disabled={!qrContentForDisplay}
                className="w-full btn-outline flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Share2 className="w-4 h-4" />
                <span>مشاركة</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QRGenerator;


============================================================
FILE: src/pages/Referrals.tsx
============================================================
import React, { useState } from 'react';
import { 
  Users, 
  Gift, 
  Copy, 
  Share2,
  Trophy,
  TrendingUp,
  QrCode,
  Download,
  Star,
  Check
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockReferrals } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Referrals = () => {
  const { user } = useStore();
  const [referrals] = useState(mockReferrals);
  const [showQRModal, setShowQRModal] = useState(false);

  const referralLink = `https://mazyone.com/ref/${user?.id || 'AHMED2024'}`;
  const referralCode = 'AHMED2024';

  const handleCopyLink = () => {
    navigator.clipboard.writeText(referralLink);
    toast.success('تم نسخ رابط الإحالة بنجاح!');
  };

  const handleCopyCode = () => {
    navigator.clipboard.writeText(referralCode);
    toast.success('تم نسخ كود الإحالة بنجاح!');
  };

  const handleShare = async () => {
    const shareData = {
      title: 'انضم إلى مزيون',
      text: 'أنشئ بطاقتك الرقمية الاحترافية مجاناً',
      url: referralLink
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      handleCopyLink();
    }
  };

  const stats = [
    {
      name: 'إجمالي الدعوات',
      value: 15,
      icon: Users,
      color: 'bg-blue-500'
    },
    {
      name: 'التسجيلات الناجحة',
      value: 8,
      icon: Check,
      color: 'bg-green-500'
    },
    {
      name: 'المكافآت المكتسبة',
      value: 4,
      icon: Gift,
      color: 'bg-purple-500'
    },
    {
      name: 'إجمالي الأرباح',
      value: '200 ريال',
      icon: TrendingUp,
      color: 'bg-orange-500'
    }
  ];

  const leaderboard = [
    { name: 'أحمد محمد', referrals: 25, position: 1 },
    { name: 'سارة أحمد', referrals: 22, position: 2 },
    { name: 'محمد علي', referrals: 18, position: 3 },
    { name: 'فاطمة خالد', referrals: 15, position: 4 },
    { name: 'أنت', referrals: 8, position: 8 }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            نظام الإحالة
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            ادع أصدقاءك واكسب مكافآت مع كل تسجيل ناجح
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button 
            onClick={() => setShowQRModal(true)}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <QrCode className="w-4 h-4" />
            <span>رمز QR</span>
          </button>
          <button 
            onClick={handleShare}
            className="btn-primary flex items-center space-x-2 space-x-reverse"
          >
            <Share2 className="w-4 h-4" />
            <span>مشاركة الرابط</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                  {stat.name}
                </p>
                <p className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mt-1">
                  {stat.value}
                </p>
              </div>
              <div className={cn("p-3 rounded-lg", stat.color)}>
                <stat.icon className="w-6 h-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Referral Link */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            رابط الإحالة الخاص بك
          </h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                الرابط
              </label>
              <div className="flex items-center space-x-2 space-x-reverse">
                <input
                  type="text"
                  value={referralLink}
                  readOnly
                  className="input-field flex-1 bg-neutral-50 dark:bg-neutral-800"
                />
                <button
                  onClick={handleCopyLink}
                  className="p-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                كود الإحالة
              </label>
              <div className="flex items-center space-x-2 space-x-reverse">
                <input
                  type="text"
                  value={referralCode}
                  readOnly
                  className="input-field flex-1 bg-neutral-50 dark:bg-neutral-800"
                />
                <button
                  onClick={handleCopyCode}
                  className="p-2 bg-secondary-500 text-white rounded-lg hover:bg-secondary-600 transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div className="bg-accent-50 dark:bg-accent-900/20 rounded-lg p-4">
              <h3 className="font-medium text-accent-800 dark:text-accent-200 mb-2">
                🎁 المكافآت المتاحة
              </h3>
              <ul className="text-sm text-accent-700 dark:text-accent-300 space-y-1">
                <li>• 50 ريال لكل 5 تسجيلات ناجحة</li>
                <li>• خصم 20% على الاشتراك السنوي</li>
                <li>• ميزات إضافية مجانية</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Leaderboard */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            لوحة المتصدرين
          </h2>
          
          <div className="space-y-3">
            {leaderboard.map((user, index) => (
              <div 
                key={index} 
                className={cn(
                  "flex items-center space-x-3 space-x-reverse p-3 rounded-lg",
                  user.name === 'أنت' 
                    ? "bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800"
                    : "bg-neutral-50 dark:bg-neutral-800"
                )}
              >
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary-500 text-white text-sm font-bold">
                  {user.position <= 3 ? (
                    <Trophy className="w-4 h-4" />
                  ) : (
                    user.position
                  )}
                </div>
                
                <div className="flex-1">
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    {user.name}
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {user.referrals} إحالة
                  </p>
                </div>
                
                {user.position <= 3 && (
                  <Star className="w-5 h-5 text-accent-500" />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Referral History */}
        <div className="lg:col-span-2 card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            سجل الإحالات
          </h2>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البريد الإلكتروني
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    تاريخ الدعوة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الحالة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المكافأة
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {referrals.map((referral) => (
                  <tr key={referral.id}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {referral.refereeEmail}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {new Date(referral.createdAt).toLocaleDateString('ar-SA')}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={cn(
                        "px-2 py-1 text-xs rounded-full",
                        referral.status === 'completed' 
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
                      )}>
                        {referral.status === 'completed' ? 'مكتملة' : 'في الانتظار'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {referral.reward ? referral.reward.description : '-'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* QR Code Modal */}
      {showQRModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-sm w-full">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                رمز QR للإحالة
              </h3>
              
              <div className="w-48 h-48 bg-neutral-100 dark:bg-neutral-800 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <QrCode className="w-24 h-24 text-neutral-400" />
              </div>
              
              <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                امسح هذا الرمز للانضمام عبر رابط الإحالة الخاص بك
              </p>
              
              <div className="flex space-x-3 space-x-reverse">
                <button
                  onClick={() => setShowQRModal(false)}
                  className="flex-1 px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  إغلاق
                </button>
                <button className="flex-1 btn-primary">
                  تحميل
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Referrals;


============================================================
FILE: src/pages/Register.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock, User, Eye, EyeOff } from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import AuthIllustration from '../assets/auth-illustration.svg';

const Register: React.FC = () => {
  const { registerUser } = useStore();
  const navigate = useNavigate();

  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    name: '',
    email: '',
    password: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await registerUser(form);
      toast.success('تم إنشاء الحساب بنجاح');
      navigate('/dashboard');
    } catch {
      toast.error('حدث خطأ ما');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen grid lg:grid-cols-2">
      {/* form */}
      <div className="flex items-center justify-center p-10">
        <form
          onSubmit={handleSubmit}
          className="w-full max-w-md space-y-6 bg-white dark:bg-neutral-900 p-8 rounded-2xl shadow-xl border"
        >
          <header className="text-center space-y-2">
            <h1 className="text-3xl font-bold dark:text-neutral-100">إنشاء حساب</h1>
            <p className="text-neutral-600 dark:text-neutral-400">
              املأ البيانات التالية لإنشاء حسابك
            </p>
          </header>

          {/* name */}
          <div>
            <label className="block mb-2 text-sm font-medium">الاسم الكامل</label>
            <div className="relative">
              <User className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type="text"
                required
                placeholder="أحمد محمد"
                value={form.name}
                onChange={(e) => setForm({ ...form, name: e.target.value })}
                className="input-field pr-10"
              />
            </div>
          </div>

          {/* email */}
          <div>
            <label className="block mb-2 text-sm font-medium">البريد الإلكترونى</label>
            <div className="relative">
              <Mail className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type="email"
                required
                placeholder="name@example.com"
                value={form.email}
                onChange={(e) => setForm({ ...form, email: e.target.value })}
                className="input-field pr-10"
              />
            </div>
          </div>

          {/* password */}
          <div>
            <label className="block mb-2 text-sm font-medium">كلمة المرور</label>
            <div className="relative">
              <Lock className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type={showPassword ? 'text' : 'password'}
                required
                placeholder="••••••••"
                value={form.password}
                onChange={(e) => setForm({ ...form, password: e.target.value })}
                className="input-field pr-10 pl-10"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-400"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>
          </div>

          <button type="submit" className="btn-primary w-full" disabled={loading}>
            {loading ? 'جارى الإنشاء...' : 'تسجيل'}
          </button>

          <p className="text-sm text-center">
            لديك حساب بالفعل؟{' '}
            <a href="/login" className="text-primary-500 hover:underline">
              تسجيل الدخول
            </a>
          </p>
        </form>
      </div>

{/* illustration side */}
<div className="hidden lg:block bg-neutral-50 dark:bg-neutral-800 relative">
  {/* النص أعلى الصورة */}
  <div className="absolute top-0 righ-0 w-full p-10 select-none">
    <h2 className="text-4xl font-extrabold text-primary-500 tracking-tight">
      Mazyon<span className="text-primary-500"></span>
    </h2>
    <p className="mt-2 text-lg max-w-xs text-neutral-600 dark:text-neutral-400">
      build your smart digital identity with&nbsp;Mazyon
    </p>
  </div>

  {/* الصورة نفسها */}
  <img
    src={AuthIllustration}
    alt="Authentication illustration"
    className="w-full h-full object-cover"
  />
</div>
    </div>
  );
};

export default Register;


============================================================
FILE: src/pages/Scan.tsx
============================================================
import React, { useState, useRef, useEffect } from 'react';
import { 
  Camera, 
  Upload, 
  QrCode, 
  Smartphone,
  X,
  CheckCircle,
  AlertCircle,
  Download,
  Share2
} from 'lucide-react';
import { Html5QrcodeScanner } from 'html5-qrcode';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const Scan = () => {
  const { addContact } = useStore();
  const [scanMode, setScanMode] = useState<'camera' | 'upload' | null>(null);
  const [scanResult, setScanResult] = useState<string | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scannedData, setScannedData] = useState<any>(null);
  const scannerRef = useRef<Html5QrcodeScanner | null>(null);

  useEffect(() => {
    return () => {
      if (scannerRef.current) {
        scannerRef.current.clear();
      }
    };
  }, []);

  const startCameraScanning = () => {
    setScanMode('camera');
    setIsScanning(true);

    const scanner = new Html5QrcodeScanner(
      'qr-reader',
      {
        fps: 10,
        qrbox: { width: 250, height: 250 },
        aspectRatio: 1.0
      },
      false
    );

    scanner.render(
      (decodedText) => {
        handleScanSuccess(decodedText);
        scanner.clear();
        setIsScanning(false);
      },
      (error) => {
        console.log('Scan error:', error);
      }
    );

    scannerRef.current = scanner;
  };

  const handleScanSuccess = (decodedText: string) => {
    setScanResult(decodedText);
    
    // محاولة تحليل البيانات
    try {
      if (decodedText.startsWith('BEGIN:VCARD')) {
        // تحليل vCard
        const vCardData = parseVCard(decodedText);
        setScannedData(vCardData);
        toast.success('تم مسح بطاقة الاتصال بنجاح!');
      } else if (decodedText.startsWith('http')) {
        // رابط ويب
        setScannedData({ type: 'url', url: decodedText });
        toast.success('تم مسح الرابط بنجاح!');
      } else {
        // نص عادي
        setScannedData({ type: 'text', content: decodedText });
        toast.success('تم المسح بنجاح!');
      }
    } catch (error) {
      toast.error('حدث خطأ في تحليل البيانات');
    }
  };

  const parseVCard = (vCardText: string) => {
    const lines = vCardText.split('\n');
    const data: any = { type: 'vcard' };

    lines.forEach(line => {
      if (line.startsWith('FN:')) {
        data.name = line.substring(3);
      } else if (line.startsWith('TEL:')) {
        data.phone = line.substring(4);
      } else if (line.startsWith('EMAIL:')) {
        data.email = line.substring(6);
      } else if (line.startsWith('ORG:')) {
        data.company = line.substring(4);
      } else if (line.startsWith('URL:')) {
        data.website = line.substring(4);
      }
    });

    return data;
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setScanMode('upload');
    
    // هنا يمكن إضافة مكتبة لقراءة QR من الصورة
toast('ميزة رفع الصور قيد التطوير', {
  icon: 'ℹ️',
  style: {
    background: '#3B82F6',
    color: '#FFFFFF',
  },
});  };

  const saveContact = () => {
    if (scannedData && scannedData.type === 'vcard') {
      addContact({
          name: scannedData.name || 'جهة اتصال جديدة',
          email: scannedData.email,
          phone: scannedData.phone,
          company: scannedData.company,
          source: 'qr',
          tags: ['مسح ضوئي'],
          updatedAt: '',
          interactionCount: 0
      });
      
      toast.success('تم حفظ جهة الاتصال بنجاح!');
      resetScan();
    }
  };

  const resetScan = () => {
    setScanMode(null);
    setScanResult(null);
    setScannedData(null);
    setIsScanning(false);
    
    if (scannerRef.current) {
      scannerRef.current.clear();
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
          مسح رموز QR والبطاقات
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          امسح رمز QR أو ارفع صورة لاستخراج المعلومات
        </p>
      </div>

      {!scanMode && !scanResult && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Camera Scan */}
          <div className="card text-center">
            <div className="w-16 h-16 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Camera className="w-8 h-8 text-primary-500" />
            </div>
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-2">
              مسح بالكاميرا
            </h3>
            <p className="text-neutral-600 dark:text-neutral-400 mb-4">
              استخدم كاميرا الجهاز لمسح رمز QR مباشرة
            </p>
            <button
              onClick={startCameraScanning}
              className="btn-primary w-full"
            >
              بدء المسح
            </button>
          </div>

          {/* Upload Image */}
          <div className="card text-center">
            <div className="w-16 h-16 bg-secondary-100 dark:bg-secondary-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Upload className="w-8 h-8 text-secondary-500" />
            </div>
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-2">
              رفع صورة
            </h3>
            <p className="text-neutral-600 dark:text-neutral-400 mb-4">
              ارفع صورة تحتوي على رمز QR لاستخراج المعلومات
            </p>
            <label className="btn-secondary w-full cursor-pointer">
              <input
                type="file"
                accept="image/*"
                onChange={handleFileUpload}
                className="hidden"
              />
              اختر صورة
            </label>
          </div>
        </div>
      )}

      {/* Camera Scanner */}
      {scanMode === 'camera' && (
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              مسح رمز QR
            </h3>
            <button
              onClick={resetScan}
              className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div id="qr-reader" className="w-full"></div>
          
          <div className="mt-4 text-center">
            <p className="text-sm text-neutral-600 dark:text-neutral-400">
              وجه الكاميرا نحو رمز QR للمسح التلقائي
            </p>
          </div>
        </div>
      )}

      {/* Scan Results */}
      {scanResult && scannedData && (
        <div className="card">
          <div className="flex items-center space-x-3 space-x-reverse mb-4">
            <CheckCircle className="w-6 h-6 text-green-500" />
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              تم المسح بنجاح
            </h3>
          </div>

          {scannedData.type === 'vcard' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  معلومات جهة الاتصال
                </h4>
                <div className="space-y-2">
                  {scannedData.name && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الاسم:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.name}</span>
                    </div>
                  )}
                  {scannedData.phone && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الهاتف:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.phone}</span>
                    </div>
                  )}
                  {scannedData.email && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">البريد:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.email}</span>
                    </div>
                  )}
                  {scannedData.company && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الشركة:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.company}</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-3 space-x-reverse">
                <button
                  onClick={saveContact}
                  className="btn-primary flex items-center space-x-2 space-x-reverse"
                >
                  <Download className="w-4 h-4" />
                  <span>حفظ جهة الاتصال</span>
                </button>
                <button
                  onClick={resetScan}
                  className="btn-secondary"
                >
                  مسح جديد
                </button>
              </div>
            </div>
          )}

          {scannedData.type === 'url' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  رابط ويب
                </h4>
                <p className="text-neutral-700 dark:text-neutral-300 break-all">
                  {scannedData.url}
                </p>
              </div>

              <div className="flex space-x-3 space-x-reverse">
                <a
                  href={scannedData.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn-primary flex items-center space-x-2 space-x-reverse"
                >
                  <Share2 className="w-4 h-4" />
                  <span>فتح الرابط</span>
                </a>
                <button
                  onClick={resetScan}
                  className="btn-secondary"
                >
                  مسح جديد
                </button>
              </div>
            </div>
          )}

          {scannedData.type === 'text' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  النص المستخرج
                </h4>
                <p className="text-neutral-700 dark:text-neutral-300">
                  {scannedData.content}
                </p>
              </div>

              <button
                onClick={resetScan}
                className="btn-primary"
              >
                مسح جديد
              </button>
            </div>
          )}
        </div>
      )}

      {/* Instructions */}
      <div className="card">
        <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
          تعليمات الاستخدام
        </h3>
        <div className="space-y-3 text-sm text-neutral-600 dark:text-neutral-400">
          <div className="flex items-start space-x-3 space-x-reverse">
            <QrCode className="w-5 h-5 text-primary-500 mt-0.5" />
            <div>
              <p className="font-medium text-neutral-900 dark:text-neutral-100">رموز QR المدعومة:</p>
              <p>بطاقات الاتصال (vCard)، روابط المواقع، النصوص العادية</p>
            </div>
          </div>
          <div className="flex items-start space-x-3 space-x-reverse">
            <Smartphone className="w-5 h-5 text-secondary-500 mt-0.5" />
            <div>
              <p className="font-medium text-neutral-900 dark:text-neutral-100">نصائح للمسح:</p>
              <p>تأكد من وضوح الرمز وإضاءة كافية، وحافظ على ثبات الجهاز</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Scan;


============================================================
FILE: src/pages/Settings.tsx
============================================================
import React, { useState } from 'react';
import { 
  User, 
  Lock, 
  Globe, 
  Bell, 
  Shield, 
  Palette,
  Download,
  Trash2,
  Eye,
  EyeOff,
  Camera,
  Save,
  Link
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Settings = () => {
  const { user, darkMode, toggleDarkMode, logout } = useStore();
  const [activeTab, setActiveTab] = useState('profile');
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: user?.phone || '',
    company: user?.company || '',
    bio: user?.bio || '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const tabs = [
    { id: 'profile', name: 'الملف الشخصي', icon: User },
    { id: 'security', name: 'الأمان', icon: Shield },
    { id: 'preferences', name: 'التفضيلات', icon: Palette },
    { id: 'notifications', name: 'الإشعارات', icon: Bell },
    { id: 'privacy', name: 'الخصوصية', icon: Lock },
    { id: 'account', name: 'إدارة الحساب', icon: Trash2 }
  ];

  const handleSave = () => {
    toast.success('تم حفظ التغييرات بنجاح!');
  };

  const handlePasswordChange = () => {
    if (formData.newPassword !== formData.confirmPassword) {
      toast.error('كلمات المرور غير متطابقة');
      return;
    }
    toast.success('تم تغيير كلمة المرور بنجاح!');
    setFormData({
      ...formData,
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
  };

  const handleDeleteAccount = () => {
    if (window.confirm('هل أنت متأكد من حذف حسابك نهائياً؟ هذا الإجراء لا يمكن التراجع عنه.')) {
      if (window.confirm('تأكيد أخير: سيتم حذف جميع بياناتك وبطاقاتك نهائياً.')) {
        toast.success('تم حذف الحساب. سيتم تسجيل خروجك الآن.');
        setTimeout(() => logout(), 2000);
      }
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
          الإعدادات
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          إدارة حسابك وتخصيص تجربتك
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="card">
            <nav className="space-y-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={cn(
                    "w-full flex items-center space-x-3 space-x-reverse px-3 py-2 rounded-lg text-sm font-medium transition-colors",
                    activeTab === tab.id
                      ? "bg-primary-500 text-white"
                      : "text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                  )}
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-3">
          <div className="card">
            {activeTab === 'profile' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  المعلومات الشخصية
                </h2>
                
                <div className="space-y-6">
                  {/* Profile Picture */}
                  <div className="flex items-center space-x-4 space-x-reverse">
                    <div className="w-20 h-20 bg-primary-500 rounded-full flex items-center justify-center">
                      {user?.avatar ? (
                        <img 
                          src={user.avatar} 
                          alt={user.name}
                          className="w-20 h-20 rounded-full object-cover"
                        />
                      ) : (
                        <User className="w-8 h-8 text-white" />
                      )}
                    </div>
                    <div>
                      <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                        <Camera className="w-4 h-4" />
                        <span>تغيير الصورة</span>
                      </button>
                      <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                        PNG أو JPG، الحد الأقصى 2MB
                      </p>
                    </div>
                  </div>

                  {/* Form Fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        الاسم الكامل
                      </label>
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        البريد الإلكتروني
                      </label>
                      <input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        رقم الهاتف
                      </label>
                      <input
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        الشركة
                      </label>
                      <input
                        type="text"
                        value={formData.company}
                        onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                        className="input-field"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      نبذة تعريفية
                    </label>
                    <textarea
                      rows={3}
                      value={formData.bio}
                      onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                      className="input-field"
                      placeholder="اكتب نبذة مختصرة عنك..."
                    />
                  </div>

                  <button onClick={handleSave} className="btn-primary">
                    حفظ التغييرات
                  </button>
                </div>
              </div>
            )}

            {activeTab === 'security' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  الأمان
                </h2>
                
                <div className="space-y-6">
                  {/* Change Password */}
                  <div>
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      تغيير كلمة المرور
                    </h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          كلمة المرور الحالية
                        </label>
                        <div className="relative">
                          <input
                            type={showPassword ? 'text' : 'password'}
                            value={formData.currentPassword}
                            onChange={(e) => setFormData({ ...formData, currentPassword: e.target.value })}
                            className="input-field pr-10"
                          />
                          <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute left-3 top-1/2 transform -translate-y-1/2"
                          >
                            {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                          </button>
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          كلمة المرور الجديدة
                        </label>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          value={formData.newPassword}
                          onChange={(e) => setFormData({ ...formData, newPassword: e.target.value })}
                          className="input-field"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          تأكيد كلمة المرور الجديدة
                        </label>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          value={formData.confirmPassword}
                          onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                          className="input-field"
                        />
                      </div>

                      <button onClick={handlePasswordChange} className="btn-primary">
                        تغيير كلمة المرور
                      </button>
                    </div>
                  </div>

                  {/* Two Factor Authentication */}
                  <div className="border-t border-neutral-200 dark:border-neutral-700 pt-6">
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      المصادقة الثنائية
                    </h3>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-neutral-700 dark:text-neutral-300">
                          تأمين إضافي لحسابك
                        </p>
                        <p className="text-xs text-neutral-500 dark:text-neutral-400">
                          ستحتاج لرمز من هاتفك عند تسجيل الدخول
                        </p>
                      </div>
                      <button className="btn-secondary">
                        تفعيل
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'preferences' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  التفضيلات
                </h2>
                
                <div className="space-y-6">
                  {/* Dark Mode */}
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                        الوضع الليلي
                      </h3>
                      <p className="text-xs text-neutral-500 dark:text-neutral-400">
                        تبديل بين الوضع الفاتح والداكن
                      </p>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        darkMode ? "bg-primary-500" : "bg-neutral-300"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-white transition-transform",
                          darkMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Language */}
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللغة
                    </label>
                    <select className="input-field w-full sm:w-auto">
                      <option value="ar">العربية</option>
                      <option value="en">English</option>
                    </select>
                  </div>

                  {/* Timezone */}
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      المنطقة الزمنية
                    </label>
                    <select className="input-field w-full sm:w-auto">
                      <option value="Asia/Riyadh">الرياض (GMT+3)</option>
                      <option value="Asia/Dubai">دبي (GMT+4)</option>
                      <option value="Africa/Cairo">القاهرة (GMT+2)</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'account' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  إدارة الحساب
                </h2>
                <div className="card">
  <h3>إدارة الاشتراك</h3>
  <Link to="/subscription" className="btn-primary">
    عرض الباقات وترقية الحساب
  </Link>
</div>
                <div className="space-y-6">
                  {/* Export Data */}
                  <div>
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      تصدير البيانات
                    </h3>
                    <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                      احصل على نسخة من جميع بياناتك
                    </p>
                    <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                      <Download className="w-4 h-4" />
                      <span>تصدير البيانات</span>
                    </button>
                  </div>

                  {/* Delete Account */}
                  <div className="border-t border-neutral-200 dark:border-neutral-700 pt-6">
                    <h3 className="text-md font-medium text-red-600 dark:text-red-400 mb-4">
                      حذف الحساب
                    </h3>
                    <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                      حذف حسابك نهائياً مع جميع البيانات والبطاقات. هذا الإجراء لا يمكن التراجع عنه.
                    </p>
                    <button 
                      onClick={handleDeleteAccount}
                      className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors flex items-center space-x-2 space-x-reverse"
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>حذف الحساب نهائياً</span>
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;


============================================================
FILE: src/pages/Subscription.tsx
============================================================
import React, { useState } from 'react';
import { 
  Check, 
  X, 
  Crown, 
  Zap, 
  Shield, 
  Users, 
  Star,
  ArrowRight,
  CreditCard,
  Gift,
  TrendingUp,
  Globe,
  Smartphone,
  BarChart3,
  Settings,
  Headphones,
  Award,
  Sparkles
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Subscription = () => {
  const { user } = useStore();
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);

  const plans = [
    {
      id: 'core',
      name: 'مزيون الأصيل',
      nameEn: 'Mazyone Core',
      description: 'مثالي للمبتدئين والاستخدام الشخصي',
      price: { monthly: 0, yearly: 0 },
      color: 'from-gray-500 to-gray-600',
      icon: Smartphone,
      popular: false,
      features: [
        { name: 'بطاقة رقمية واحدة', included: true },
        { name: 'رمز QR أساسي', included: true },
        { name: 'مشاركة عبر الرابط', included: true },
        { name: 'تحليلات أساسية', included: true },
        { name: 'دعم عبر البريد الإلكتروني', included: true },
        { name: 'قوالب محدودة (3)', included: true },
        { name: 'تخصيص الألوان', included: false },
        { name: 'إزالة العلامة المائية', included: false },
        { name: 'صفحات الهبوط', included: false },
        { name: 'منشئ السيرة الذاتية', included: false },
        { name: 'تحليلات متقدمة', included: false },
        { name: 'دعم أولوية', included: false }
      ]
    },
    {
      id: 'pro',
      name: 'مزيون برو',
      nameEn: 'Mazyone Pro',
      description: 'للمحترفين والأعمال الصغيرة',
      price: { monthly: 29, yearly: 290 },
      color: 'from-blue-500 to-blue-600',
      icon: Zap,
      popular: true,
      features: [
        { name: '5 بطاقات رقمية', included: true },
        { name: 'رموز QR مخصصة مع شعار', included: true },
        { name: 'تخصيص كامل للألوان والخطوط', included: true },
        { name: 'تحليلات متقدمة', included: true },
        { name: 'صفحات هبوط (3)', included: true },
        { name: 'منشئ السيرة الذاتية', included: true },
        { name: 'إزالة العلامة المائية', included: true },
        { name: 'دعم عبر الدردشة', included: true },
        { name: 'جميع القوالب', included: true },
        { name: 'تصدير البيانات', included: true },
        { name: 'تكاملات أساسية', included: true },
        { name: 'العلامة البيضاء', included: false }
      ]
    },
    {
      id: 'pro-plus',
      name: 'مزيون برو بلس',
      nameEn: 'Mazyone Pro Plus',
      description: 'للشركات المتوسطة والمحترفين المتقدمين',
      price: { monthly: 59, yearly: 590 },
      color: 'from-purple-500 to-purple-600',
      icon: Crown,
      popular: false,
      features: [
        { name: 'بطاقات غير محدودة', included: true },
        { name: 'جميع ميزات برو', included: true },
        { name: 'صفحات هبوط غير محدودة', included: true },
        { name: 'تحليلات احترافية مع تقارير', included: true },
        { name: 'API مخصص', included: true },
        { name: 'تكاملات متقدمة', included: true },
        { name: 'دعم أولوية 24/7', included: true },
        { name: 'تدريب شخصي', included: true },
        { name: 'نطاق فرعي مخصص', included: true },
        { name: 'نسخ احتياطية تلقائية', included: true },
        { name: 'إدارة الفرق (5 أعضاء)', included: true },
        { name: 'العلامة البيضاء الأساسية', included: true }
      ]
    },
    {
      id: 'business',
      name: 'مزيون المؤسسي',
      nameEn: 'Mazyone Business',
      description: 'للشركات الكبيرة والمؤسسات',
      price: { monthly: 149, yearly: 1490 },
      color: 'from-orange-500 to-red-500',
      icon: Users,
      popular: false,
      features: [
        { name: 'جميع ميزات برو بلس', included: true },
        { name: 'فرق غير محدودة', included: true },
        { name: 'إدارة صلاحيات متقدمة', included: true },
        { name: 'العلامة البيضاء الكاملة', included: true },
        { name: 'نطاق مخصص', included: true },
        { name: 'SSO وتكامل LDAP', included: true },
        { name: 'مدير حساب مخصص', included: true },
        { name: 'SLA مضمون', included: true },
        { name: 'تدريب للفريق', included: true },
        { name: 'تقارير مخصصة', included: true },
        { name: 'أمان متقدم', included: true },
        { name: 'دعم هاتفي مباشر', included: true }
      ]
    }
  ];

  const handlePlanSelect = (planId: string) => {
    setSelectedPlan(planId);
    const plan = plans.find(p => p.id === planId);
    if (plan) {
      toast.success(`تم اختيار باقة ${plan.name}`);
    }
  };

  const handleUpgrade = (planId: string) => {
    const plan = plans.find(p => p.id === planId);
    if (plan) {
      toast.success(`جاري التوجيه لصفحة الدفع لباقة ${plan.name}...`);
      // هنا سيتم التوجيه لصفحة الدفع
    }
  };

  const getCurrentPlan = () => {
    return plans.find(plan => plan.id === user?.subscription) || plans[0];
  };

  const currentPlan = getCurrentPlan();
  const yearlyDiscount = 20; // خصم 20% على الباقة السنوية

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <div className="flex items-center justify-center mb-4">
          <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl flex items-center justify-center">
            <Crown className="w-8 h-8 text-white" />
          </div>
        </div>
        <h1 className="text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
          اختر الباقة المناسبة لك
        </h1>
        <p className="text-xl text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto leading-relaxed">
          ارتقِ بتجربتك الرقمية مع باقاتنا المتنوعة. من البداية البسيطة إلى الحلول المؤسسية المتقدمة
        </p>
      </div>

      {/* Current Plan Status */}
      <div className="card bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-blue-200 dark:border-blue-800">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4 space-x-reverse">
            <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
              <currentPlan.icon className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-100">
                باقتك الحالية: {currentPlan.name}
              </h3>
              <p className="text-blue-700 dark:text-blue-300">
                {currentPlan.description}
              </p>
            </div>
          </div>
          <div className="text-left">
            <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">
              {currentPlan.price.monthly === 0 ? 'مجاني' : `${currentPlan.price.monthly} ريال/شهر`}
            </p>
            {currentPlan.price.monthly > 0 && (
              <p className="text-sm text-blue-600 dark:text-blue-400">
                التجديد التالي: 15 أغسطس 2024
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Billing Toggle */}
      <div className="flex items-center justify-center">
        <div className="bg-neutral-100 dark:bg-neutral-800 p-1 rounded-xl">
          <div className="flex items-center space-x-1 space-x-reverse">
            <button
              onClick={() => setBillingCycle('monthly')}
              className={cn(
                "px-6 py-2 rounded-lg text-sm font-medium transition-all",
                billingCycle === 'monthly'
                  ? "bg-white dark:bg-neutral-700 text-neutral-900 dark:text-neutral-100 shadow-sm"
                  : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100"
              )}
            >
              شهري
            </button>
            <button
              onClick={() => setBillingCycle('yearly')}
              className={cn(
                "px-6 py-2 rounded-lg text-sm font-medium transition-all relative",
                billingCycle === 'yearly'
                  ? "bg-white dark:bg-neutral-700 text-neutral-900 dark:text-neutral-100 shadow-sm"
                  : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100"
              )}
            >
              سنوي
              <span className="absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-0.5 rounded-full">
                وفر {yearlyDiscount}%
              </span>
            </button>
          </div>
        </div>
      </div>

      {/* Plans Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {plans.map((plan) => {
          const isCurrentPlan = plan.id === user?.subscription;
          const price = billingCycle === 'yearly' 
            ? Math.round(plan.price.yearly / 12) 
            : plan.price.monthly;
          const yearlyPrice = plan.price.yearly;
          const monthlySavings = billingCycle === 'yearly' && plan.price.monthly > 0
            ? plan.price.monthly - price
            : 0;

          return (
            <div
              key={plan.id}
              className={cn(
                "relative rounded-2xl border-2 transition-all duration-300 hover:shadow-xl",
                plan.popular 
                  ? "border-blue-500 shadow-lg scale-105" 
                  : "border-neutral-200 dark:border-neutral-700 hover:border-blue-300 dark:hover:border-blue-600",
                isCurrentPlan && "ring-2 ring-blue-500 ring-opacity-50"
              )}
            >
              {/* Popular Badge */}
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium flex items-center space-x-1 space-x-reverse">
                    <Star className="w-4 h-4" />
                    <span>الأكثر شعبية</span>
                  </div>
                </div>
              )}

              {/* Current Plan Badge */}
              {isCurrentPlan && (
                <div className="absolute -top-4 right-4">
                  <div className="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium">
                    باقتك الحالية
                  </div>
                </div>
              )}

              <div className="p-6">
                {/* Plan Header */}
                <div className="text-center mb-6">
                  <div className={cn(
                    "w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 bg-gradient-to-r",
                    plan.color
                  )}>
                    <plan.icon className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                    {plan.name}
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 text-sm">
                    {plan.description}
                  </p>
                </div>

                {/* Pricing */}
                <div className="text-center mb-6">
                  {price === 0 ? (
                    <div className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
                      مجاني
                    </div>
                  ) : (
                    <>
                      <div className="flex items-center justify-center space-x-1 space-x-reverse">
                        <span className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
                          {price}
                        </span>
                        <div className="text-right">
                          <div className="text-sm text-neutral-600 dark:text-neutral-400">ريال</div>
                          <div className="text-xs text-neutral-500 dark:text-neutral-500">
                            /{billingCycle === 'yearly' ? 'شهر' : 'شهر'}
                          </div>
                        </div>
                      </div>
                      
                      {billingCycle === 'yearly' && (
                        <div className="mt-2">
                          <p className="text-sm text-green-600 dark:text-green-400 font-medium">
                            وفر {monthlySavings} ريال شهرياً
                          </p>
                          <p className="text-xs text-neutral-500 dark:text-neutral-500">
                            ({yearlyPrice} ريال سنوياً)
                          </p>
                        </div>
                      )}
                    </>
                  )}
                </div>

                {/* Features */}
                <div className="space-y-3 mb-6">
                  {plan.features.slice(0, 6).map((feature, index) => (
                    <div key={index} className="flex items-center space-x-3 space-x-reverse">
                      {feature.included ? (
                        <Check className="w-5 h-5 text-green-500 flex-shrink-0" />
                      ) : (
                        <X className="w-5 h-5 text-neutral-400 flex-shrink-0" />
                      )}
                      <span className={cn(
                        "text-sm",
                        feature.included 
                          ? "text-neutral-700 dark:text-neutral-300" 
                          : "text-neutral-400 dark:text-neutral-600"
                      )}>
                        {feature.name}
                      </span>
                    </div>
                  ))}
                  
                  {plan.features.length > 6 && (
                    <div className="text-center pt-2">
                      <button className="text-blue-500 hover:text-blue-600 text-sm font-medium">
                        عرض جميع الميزات ({plan.features.length})
                      </button>
                    </div>
                  )}
                </div>

                {/* Action Button */}
                <div className="space-y-3">
                  {isCurrentPlan ? (
                    <button className="w-full bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 py-3 rounded-lg font-medium border border-green-200 dark:border-green-800">
                      باقتك الحالية
                    </button>
                  ) : (
                    <button
                      onClick={() => handleUpgrade(plan.id)}
                      className={cn(
                        "w-full py-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 space-x-reverse",
                        plan.popular
                          ? "bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600 shadow-lg hover:shadow-xl"
                          : "bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 hover:bg-neutral-800 dark:hover:bg-neutral-200"
                      )}
                    >
                      <span>{price === 0 ? 'ابدأ مجاناً' : 'ترقية الآن'}</span>
                      <ArrowRight className="w-4 h-4" />
                    </button>
                  )}
                  
                  {!isCurrentPlan && price > 0 && (
                    <button
                      onClick={() => handlePlanSelect(plan.id)}
                      className="w-full border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 py-2 rounded-lg font-medium hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                    >
                      تجربة مجانية 14 يوم
                    </button>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Features Comparison */}
      <div className="card">
        <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 text-center">
          مقارنة شاملة للباقات
        </h2>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-neutral-200 dark:border-neutral-700">
                <th className="text-right py-4 px-4 font-medium text-neutral-900 dark:text-neutral-100">
                  الميزة
                </th>
                {plans.map((plan) => (
                  <th key={plan.id} className="text-center py-4 px-4">
                    <div className="flex flex-col items-center">
                      <plan.icon className="w-6 h-6 text-neutral-600 dark:text-neutral-400 mb-2" />
                      <span className="font-medium text-neutral-900 dark:text-neutral-100 text-sm">
                        {plan.name}
                      </span>
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {[
                'عدد البطاقات',
                'رموز QR مخصصة',
                'تخصيص التصميم',
                'صفحات الهبوط',
                'منشئ السيرة الذاتية',
                'التحليلات',
                'الدعم الفني',
                'العلامة البيضاء',
                'إدارة الفرق',
                'API مخصص'
              ].map((feature, index) => (
                <tr key={index} className="border-b border-neutral-100 dark:border-neutral-800">
                  <td className="py-4 px-4 font-medium text-neutral-700 dark:text-neutral-300">
                    {feature}
                  </td>
                  {plans.map((plan) => (
                    <td key={plan.id} className="py-4 px-4 text-center">
                      {index === 0 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? '1' : 
                           plan.id === 'pro' ? '5' : 
                           plan.id === 'pro-plus' ? '∞' : '∞'}
                        </span>
                      )}
                      {index === 1 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 2 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 3 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          plan.id === 'pro' ?
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">3</span> :
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">∞</span>
                      )}
                      {index === 4 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 5 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? 'أساسية' : 
                           plan.id === 'pro' ? 'متقدمة' : 
                           plan.id === 'pro-plus' ? 'احترافية' : 'مؤسسية'}
                        </span>
                      )}
                      {index === 6 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? 'إيميل' : 
                           plan.id === 'pro' ? 'دردشة' : 
                           plan.id === 'pro-plus' ? '24/7' : 'مخصص'}
                        </span>
                      )}
                      {index === 7 && (
                        ['pro-plus', 'business'].includes(plan.id) ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                      {index === 8 && (
                        plan.id === 'business' ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          plan.id === 'pro-plus' ?
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">5</span> :
                            <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                      {index === 9 && (
                        ['pro-plus', 'business'].includes(plan.id) ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="card">
        <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 text-center">
          الأسئلة الشائعة حول الباقات
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {[
            {
              question: 'هل يمكنني تغيير باقتي لاحقاً؟',
              answer: 'نعم، يمكنك ترقية أو تخفيض باقتك في أي وقت. التغييرات تسري فوراً مع احتساب تناسبي للتكلفة.'
            },
            {
              question: 'ما هي مدة التجربة المجانية؟',
              answer: 'نوفر تجربة مجانية لمدة 14 يوماً لجميع الباقات المدفوعة مع إمكانية الوصول لجميع الميزات.'
            },
            {
              question: 'هل هناك رسوم إضافية خفية؟',
              answer: 'لا، جميع الأسعار شاملة ولا توجد رسوم إضافية. ما تراه هو ما تدفعه بالضبط.'
            },
            {
              question: 'كيف يعمل الخصم السنوي؟',
              answer: 'عند اختيار الدفع السنوي، تحصل على خصم 20% مقارنة بالدفع الشهري مع توفير كبير.'
            },
            {
              question: 'هل يمكنني إلغاء اشتراكي؟',
              answer: 'نعم، يمكنك إلغاء اشتراكك في أي وقت. ستحتفظ بالوصول حتى نهاية فترة الفوترة الحالية.'
            },
            {
              question: 'ما هي وسائل الدفع المقبولة؟',
              answer: 'نقبل جميع البطاقات الائتمانية الرئيسية، Apple Pay، Google Pay، والتحويل البنكي.'
            }
          ].map((faq, index) => (
            <div key={index} className="space-y-2">
              <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
                {faq.question}
              </h3>
              <p className="text-neutral-600 dark:text-neutral-400 text-sm leading-relaxed">
                {faq.answer}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="card bg-gradient-to-r from-blue-500 to-purple-600 text-white text-center">
        <div className="max-w-2xl mx-auto">
          <Sparkles className="w-12 h-12 mx-auto mb-4" />
          <h2 className="text-3xl font-bold mb-4">
            جاهز لترقية تجربتك؟
          </h2>
          <p className="text-blue-100 mb-6 leading-relaxed">
            انضم إلى آلاف المحترفين الذين يستخدمون مزيون لبناء هويتهم الرقمية وتوسيع شبكة اتصالاتهم
          </p>
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-3 sm:space-y-0 sm:space-x-4 sm:space-x-reverse">
            <button className="bg-white text-blue-600 px-8 py-3 rounded-lg font-medium hover:bg-blue-50 transition-colors flex items-center space-x-2 space-x-reverse">
              <span>ابدأ التجربة المجانية</span>
              <ArrowRight className="w-4 h-4" />
            </button>
            <button className="border border-white/30 text-white px-8 py-3 rounded-lg font-medium hover:bg-white/10 transition-colors flex items-center space-x-2 space-x-reverse">
              <Headphones className="w-4 h-4" />
              <span>تحدث مع المبيعات</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Subscription;


============================================================
FILE: src/pages/Support.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  MessageCircle, 
  Mail, 
  Phone,
  ChevronDown,
  ChevronUp,
  Send,
  FileText,
  Video,
  HelpCircle,
  X
} from 'lucide-react';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Support = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);
  const [contactForm, setContactForm] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });

  const faqs = [
    {
      id: '1',
      question: 'كيف أنشئ بطاقة رقمية جديدة؟',
      answer: 'يمكنك إنشاء بطاقة رقمية جديدة بالذهاب إلى قسم "بطاقاتي" والضغط على زر "أنشئ بطاقة جديدة". املأ المعلومات المطلوبة واختر التصميم المناسب.'
    },
    {
      id: '2',
      question: 'كيف أشارك بطاقتي مع الآخرين؟',
      answer: 'يمكنك مشاركة بطاقتك عبر رمز QR، رابط مباشر، أو تقنية NFC. كل بطاقة تحتوي على خيارات مشاركة متعددة.'
    },
    {
      id: '3',
      question: 'هل يمكنني تخصيص تصميم بطاقتي؟',
      answer: 'نعم، يمكنك تخصيص الألوان، الخطوط، إضافة شعارك، وترتيب العناصر حسب تفضيلك.'
    },
    {
      id: '4',
      question: 'كيف أتتبع من شاهد بطاقتي؟',
      answer: 'في قسم التحليلات، يمكنك مشاهدة عدد المشاهدات، المشاركات، والنقرات على بطاقتك.'
    },
    {
      id: '5',
      question: 'هل بياناتي آمنة؟',
      answer: 'نعم، نستخدم أحدث تقنيات التشفير لحماية بياناتك. يمكنك أيضاً التحكم في خصوصية بطاقتك.'
    }
  ];

  const helpVideos = [
    {
      id: '1',
      title: 'كيفية إنشاء بطاقة رقمية',
      duration: '3:45',
      thumbnail: '/videos/create-card.jpg'
    },
    {
      id: '2',
      title: 'مشاركة البطاقة عبر QR',
      duration: '2:30',
      thumbnail: '/videos/share-qr.jpg'
    },
    {
      id: '3',
      title: 'تخصيص تصميم البطاقة',
      duration: '4:15',
      thumbnail: '/videos/customize.jpg'
    }
  ];

  const filteredFAQs = faqs.filter(faq =>
    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
    faq.answer.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmitContact = (e: React.FormEvent) => {
    e.preventDefault();
    toast.success('تم إرسال رسالتك بنجاح! سنرد عليك قريباً.');
    setContactForm({ name: '', email: '', subject: '', message: '' });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
          مرحباً! كيف يمكننا مساعدتك؟
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          ابحث في الأسئلة الشائعة أو تواصل معنا مباشرة
        </p>
      </div>

      {/* Search */}
      <div className="max-w-2xl mx-auto">
        <div className="relative">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
          <input
            type="text"
            placeholder="ابحث في الأسئلة الشائعة..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10 text-center"
          />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* FAQ Section */}
        <div className="lg:col-span-2">
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              الأسئلة الشائعة
            </h2>
            
            <div className="space-y-4">
              {filteredFAQs.map((faq) => (
                <div key={faq.id} className="border border-neutral-200 dark:border-neutral-700 rounded-lg">
                  <button
                    onClick={() => setExpandedFAQ(expandedFAQ === faq.id ? null : faq.id)}
                    className="w-full flex items-center justify-between p-4 text-right hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                  >
                    <span className="font-medium text-neutral-900 dark:text-neutral-100">
                      {faq.question}
                    </span>
                    {expandedFAQ === faq.id ? (
                      <ChevronUp className="w-5 h-5 text-neutral-500" />
                    ) : (
                      <ChevronDown className="w-5 h-5 text-neutral-500" />
                    )}
                  </button>
                  
                  {expandedFAQ === faq.id && (
                    <div className="px-4 pb-4">
                      <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                        {faq.answer}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>

            {filteredFAQs.length === 0 && (
              <div className="text-center py-8">
                <HelpCircle className="w-12 h-12 text-neutral-400 mx-auto mb-4" />
                <p className="text-neutral-600 dark:text-neutral-400">
                  لم نجد أسئلة مطابقة لبحثك
                </p>
              </div>
            )}
          </div>

          {/* Help Videos */}
          <div className="card mt-6">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              فيديوهات المساعدة
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {helpVideos.map((video) => (
                <div key={video.id} className="group cursor-pointer">
                  <div className="aspect-video bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-3 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gradient-to-br from-primary-500/20 to-secondary-500/20 flex items-center justify-center">
                      <Video className="w-12 h-12 text-neutral-400" />
                    </div>
                    <div className="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                      {video.duration}
                    </div>
                  </div>
                  <h3 className="font-medium text-neutral-900 dark:text-neutral-100 group-hover:text-primary-500 transition-colors">
                    {video.title}
                  </h3>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Contact Section */}
        <div className="space-y-6">
          {/* Contact Form */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              تواصل معنا
            </h2>
            
            <form onSubmit={handleSubmitContact} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الاسم
                </label>
                <input
                  type="text"
                  value={contactForm.name}
                  onChange={(e) => setContactForm({ ...contactForm, name: e.target.value })}
                  className="input-field"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  البريد الإلكتروني
                </label>
                <input
                  type="email"
                  value={contactForm.email}
                  onChange={(e) => setContactForm({ ...contactForm, email: e.target.value })}
                  className="input-field"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الموضوع
                </label>
                <select
                  value={contactForm.subject}
                  onChange={(e) => setContactForm({ ...contactForm, subject: e.target.value })}
                  className="input-field"
                  required
                >
                  <option value="">اختر الموضوع</option>
                  <option value="technical">مشكلة تقنية</option>
                  <option value="billing">الفوترة والاشتراك</option>
                  <option value="feature">طلب ميزة جديدة</option>
                  <option value="general">استفسار عام</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الرسالة
                </label>
                <textarea
                  rows={4}
                  value={contactForm.message}
                  onChange={(e) => setContactForm({ ...contactForm, message: e.target.value })}
                  className="input-field"
                  placeholder="اكتب رسالتك هنا..."
                  required
                />
              </div>

              <button
                type="submit"
                className="btn-primary w-full flex items-center justify-center space-x-2 space-x-reverse"
              >
                <Send className="w-4 h-4" />
                <span>إرسال الرسالة</span>
              </button>
            </form>
          </div>

          {/* Contact Info */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              طرق التواصل الأخرى
            </h2>
            
            <div className="space-y-4">
              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-primary-100 dark:bg-primary-900/20 rounded-lg flex items-center justify-center">
                  <Mail className="w-5 h-5 text-primary-500" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    البريد الإلكتروني
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    support@mazyone.com
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-secondary-100 dark:bg-secondary-900/20 rounded-lg flex items-center justify-center">
                  <MessageCircle className="w-5 h-5 text-secondary-500" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    الدردشة المباشرة
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    متاح 24/7
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-accent-100 dark:bg-accent-900/20 rounded-lg flex items-center justify-center">
                  <Phone className="w-5 h-5 text-accent-600" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    الهاتف
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    +966 11 234 5678
                  </p>
                </div>
              </div>

              <div className="pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <button className="btn-primary w-full">
                  بدء محادثة مباشرة
                </button>
              </div>
            </div>
          </div>

          {/* Quick Links */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              روابط سريعة
            </h2>
            
            <div className="space-y-2">
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                دليل البدء السريع
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                وثائق API
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                حالة الخدمة
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                تحديثات المنصة
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Support;


============================================================
FILE: src/styles/animations.css
============================================================
/* ملف الرسوم المتحركة المخصص */

/* رسوم متحركة للتحميل */
@keyframes mazyone-pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes mazyone-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes mazyone-bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -30px, 0);
  }
  70% {
    transform: translate3d(0, -15px, 0);
  }
  90% {
    transform: translate3d(0, -4px, 0);
  }
}

/* رسوم متحركة للظهور */
@keyframes mazyone-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-up {
  from {
    transform: translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-down {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-right {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-left {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes mazyone-scale-in {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes mazyone-scale-out {
  from {
    transform: scale(1);
    opacity: 1;
  }
  to {
    transform: scale(0.9);
    opacity: 0;
  }
}

/* رسوم متحركة للتفاعل */
@keyframes mazyone-shake {
  0%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-10px);
  }
  20%, 40%, 60%, 80% {
    transform: translateX(10px);
  }
}

@keyframes mazyone-wobble {
  0% {
    transform: translateX(0%);
  }
  15% {
    transform: translateX(-25%) rotate(-5deg);
  }
  30% {
    transform: translateX(20%) rotate(3deg);
  }
  45% {
    transform: translateX(-15%) rotate(-3deg);
  }
  60% {
    transform: translateX(10%) rotate(2deg);
  }
  75% {
    transform: translateX(-5%) rotate(-1deg);
  }
  100% {
    transform: translateX(0%);
  }
}

/* فئات الرسوم المتحركة */
.animate-mazyone-pulse {
  animation: mazyone-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-mazyone-spin {
  animation: mazyone-spin 1s linear infinite;
}

.animate-mazyone-bounce {
  animation: mazyone-bounce 1s infinite;
}

.animate-mazyone-fade-in {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.animate-mazyone-slide-in-up {
  animation: mazyone-slide-in-up 0.3s ease-in-out;
}

.animate-mazyone-slide-in-down {
  animation: mazyone-slide-in-down 0.3s ease-in-out;
}

.animate-mazyone-slide-in-right {
  animation: mazyone-slide-in-right 0.3s ease-in-out;
}

.animate-mazyone-slide-in-left {
  animation: mazyone-slide-in-left 0.3s ease-in-out;
}

.animate-mazyone-scale-in {
  animation: mazyone-scale-in 0.2s ease-in-out;
}

.animate-mazyone-scale-out {
  animation: mazyone-scale-out 0.2s ease-in-out;
}

.animate-mazyone-shake {
  animation: mazyone-shake 0.5s ease-in-out;
}

.animate-mazyone-wobble {
  animation: mazyone-wobble 1s ease-in-out;
}

/* تأثيرات التمرير */
.hover-lift {
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.hover-lift:hover {
  transform: translateY(-4px);
  box-shadow: var(--mazyone-shadow-lg);
}

.hover-scale {
  transition: transform 0.2s ease-in-out;
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-rotate {
  transition: transform 0.2s ease-in-out;
}

.hover-rotate:hover {
  transform: rotate(5deg);
}

/* تأثيرات التركيز */
.focus-ring {
  transition: box-shadow 0.2s ease-in-out;
}

.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

/* تأثيرات الضغط */
.active-scale {
  transition: transform 0.1s ease-in-out;
}

.active-scale:active {
  transform: scale(0.95);
}

/* تأثيرات التحميل */
.loading-dots {
  display: inline-block;
}

.loading-dots::after {
  content: '';
  animation: mazyone-pulse 1.5s ease-in-out infinite;
}

.loading-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading-skeleton 1.5s infinite;
}

@keyframes loading-skeleton {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* تأثيرات الظهور المتدرج */
.stagger-children > * {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.stagger-children > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-children > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-children > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-children > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-children > *:nth-child(5) { animation-delay: 0.5s; }

/* تأثيرات الانتقال السلس */
.transition-smooth {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-fast {
  transition: all 0.15s ease-in-out;
}

.transition-slow {
  transition: all 0.5s ease-in-out;
}

/* تحسينات الأداء */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.will-change-scroll {
  will-change: scroll-position;
}

/* تأثيرات خاصة بالمشروع */
.card-flip {
  perspective: 1000px;
}

.card-flip-inner {
  transition: transform 0.6s;
  transform-style: preserve-3d;
}

.card-flip:hover .card-flip-inner {
  transform: rotateY(180deg);
}

.card-flip-front,
.card-flip-back {
  backface-visibility: hidden;
}

.card-flip-back {
  transform: rotateY(180deg);
}

/* تأثيرات الإشعارات */
.notification-slide-in {
  animation: mazyone-slide-in-right 0.3s ease-in-out;
}

.notification-slide-out {
  animation: mazyone-slide-in-left 0.3s ease-in-out reverse;
}

/* تأثيرات القوائم */
.menu-slide-down {
  animation: mazyone-slide-in-down 0.2s ease-in-out;
}

.menu-fade-in {
  animation: mazyone-fade-in 0.2s ease-in-out;
}

/* تأثيرات المودال */
.modal-backdrop {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.modal-content {
  animation: mazyone-scale-in 0.3s ease-in-out;
}

/* تحسينات للحركة المنخفضة */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}


/* رسوم متحركة متقدمة للصفحة الرئيسية */

/* تأثيرات الظهور التدريجي */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* تأثيرات التكبير */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes scaleUp {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.05);
  }
}

/* تأثيرات الدوران */
@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-180deg);
  }
  to {
    opacity: 1;
    transform: rotate(0deg);
  }
}

/* تأثيرات النبضة */
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.05);
    opacity: 0.8;
  }
}

@keyframes heartbeat {
  0%, 100% {
    transform: scale(1);
  }
  25% {
    transform: scale(1.1);
  }
  50% {
    transform: scale(1);
  }
  75% {
    transform: scale(1.05);
  }
}

/* تأثيرات الطفو */
@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes floatReverse {
  0%, 100% {
    transform: translateY(-10px);
  }
  50% {
    transform: translateY(0px);
  }
}

/* تأثيرات الوميض */
@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }
  50% {
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.6);
  }
}

/* تأثيرات الانزلاق */
@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* تأثيرات التدرج */
@keyframes gradientShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* فئات الرسوم المتحركة */
.animate-fade-in-up {
  animation: fadeInUp 0.8s ease-out;
}

.animate-fade-in-down {
  animation: fadeInDown 0.8s ease-out;
}

.animate-fade-in-left {
  animation: fadeInLeft 0.8s ease-out;
}

.animate-fade-in-right {
  animation: fadeInRight 0.8s ease-out;
}

.animate-scale-in {
  animation: scaleIn 0.6s ease-out;
}

.animate-rotate-in {
  animation: rotateIn 0.8s ease-out;
}

.animate-pulse-slow {
  animation: pulse 3s ease-in-out infinite;
}

.animate-heartbeat {
  animation: heartbeat 2s ease-in-out infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-float-reverse {
  animation: floatReverse 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

.animate-gradient {
  background-size: 400% 400%;
  animation: gradientShift 8s ease infinite;
}

/* تأثيرات التمرير */
.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.hover-scale {
  transition: transform 0.3s ease;
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-rotate {
  transition: transform 0.3s ease;
}

.hover-rotate:hover {
  transform: rotate(5deg);
}

/* تأثيرات الخلفية المتحركة */
.bg-animated {
  background: linear-gradient(-45deg, #1D4ED8, #06B6D4, #10B981, #8B5CF6);
  background-size: 400% 400%;
  animation: gradientShift 15s ease infinite;
}

/* تأثيرات النص */
.text-shimmer {
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  background-size: 200% 100%;
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* تأثيرات التحميل */
.loading-dots {
  display: inline-flex;
  gap: 4px;
}

.loading-dots span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: currentColor;
  animation: loading-dot 1.4s ease-in-out infinite both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }
.loading-dots span:nth-child(3) { animation-delay: 0s; }

@keyframes loading-dot {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1.2);
    opacity: 1;
  }
}

/* تأثيرات الانتقال السلس */
.smooth-transition {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.smooth-transition-slow {
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

/* تأثيرات التركيز */
.focus-ring {
  transition: box-shadow 0.2s ease;
}

.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

/* تأثيرات الظهور المتدرج للعناصر */
.stagger-animation > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-animation > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-animation > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-animation > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-animation > *:nth-child(5) { animation-delay: 0.5s; }
.stagger-animation > *:nth-child(6) { animation-delay: 0.6s; }

/* تحسينات الأداء */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.will-change-contents {
  will-change: contents;
}

/* تأثيرات خاصة بالمشروع */
.card-hover-effect {
  transition: all 0.3s ease;
  transform-style: preserve-3d;
}

.card-hover-effect:hover {
  transform: translateY(-10px) rotateX(5deg);
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
}

.hero-background {
  background: radial-gradient(ellipse at top, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
              radial-gradient(ellipse at bottom, rgba(16, 185, 129, 0.1) 0%, transparent 50%);
}

/* تأثيرات متقدمة للأزرار */
.btn-animated {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.btn-animated::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.btn-animated:hover::before {
  left: 100%;
}

.btn-animated:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
}

/* تحسينات للحركة المنخفضة */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* تأثيرات الشاشات الصغيرة */
@media (max-width: 768px) {
  .animate-fade-in-up,
  .animate-fade-in-down,
  .animate-fade-in-left,
  .animate-fade-in-right {
    animation-duration: 0.6s;
  }
  
  .hover-lift:hover {
    transform: translateY(-4px);
  }
  
  .card-hover-effect:hover {
    transform: translateY(-5px);
  }
}


============================================================
FILE: src/styles/colors.css
============================================================
/* ملف الألوان المخصص */

/* متغيرات CSS للألوان الأساسية */
:root {
  /* الألوان الأساسية من لوحة التصميم */
  --mazyone-primary-dark: #2D2D2D;
  --mazyone-primary-gray: #444444;
  --mazyone-bg-secondary: #EDEDED;
  --mazyone-bg-light: #F5F5F5;
  --mazyone-bg-primary: #FFFFFF;
  --mazyone-accent-blue: #006BE3;
  --mazyone-accent-teal: #7EDDB9;
  --mazyone-accent-yellow: #FACC15;
  --mazyone-accent-orange: #E1841F;
  
  /* ألوان إضافية للنظام */
  --mazyone-success: #22C55E;
  --mazyone-warning: #F59E0B;
  --mazyone-error: #EF4444;
  --mazyone-info: #3B82F6;
  
  /* ألوان النصوص */
  --mazyone-text-primary: var(--mazyone-primary-dark);
  --mazyone-text-secondary: #4B4B4B;
  --mazyone-text-muted: #6B7280;
  --mazyone-text-light: #9CA3AF;
  
  /* ألوان الحدود */
  --mazyone-border-light: #E5E7EB;
  --mazyone-border-medium: #D1D5DB;
  --mazyone-border-dark: #9CA3AF;
  
  /* الظلال */
  --mazyone-shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --mazyone-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
  --mazyone-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
  
  /* التدرجات */
  --mazyone-gradient-primary: linear-gradient(135deg, var(--mazyone-accent-blue) 0%, var(--mazyone-accent-teal) 100%);
  --mazyone-gradient-secondary: linear-gradient(135deg, var(--mazyone-accent-teal) 0%, var(--mazyone-accent-yellow) 100%);
  --mazyone-gradient-warm: linear-gradient(135deg, var(--mazyone-accent-yellow) 0%, var(--mazyone-accent-orange) 100%);
}

/* الوضع الليلي */
[data-theme="dark"] {
  --mazyone-bg-primary: #1E1E1E;
  --mazyone-bg-secondary: #2A2A2A;
  --mazyone-bg-light: #374151;
  
  --mazyone-text-primary: #F5F5F5;
  --mazyone-text-secondary: #E5E7EB;
  --mazyone-text-muted: #9CA3AF;
  --mazyone-text-light: #6B7280;
  
  --mazyone-border-light: #374151;
  --mazyone-border-medium: #4B5563;
  --mazyone-border-dark: #6B7280;
}

/* فئات الألوان المساعدة */
.bg-mazyone-primary { background-color: var(--mazyone-bg-primary); }
.bg-mazyone-secondary { background-color: var(--mazyone-bg-secondary); }
.bg-mazyone-accent-blue { background-color: var(--mazyone-accent-blue); }
.bg-mazyone-accent-teal { background-color: var(--mazyone-accent-teal); }
.bg-mazyone-accent-yellow { background-color: var(--mazyone-accent-yellow); }
.bg-mazyone-accent-orange { background-color: var(--mazyone-accent-orange); }

.text-mazyone-primary { color: var(--mazyone-text-primary); }
.text-mazyone-secondary { color: var(--mazyone-text-secondary); }
.text-mazyone-muted { color: var(--mazyone-text-muted); }
.text-mazyone-accent-blue { color: var(--mazyone-accent-blue); }
.text-mazyone-accent-teal { color: var(--mazyone-accent-teal); }

.border-mazyone-light { border-color: var(--mazyone-border-light); }
.border-mazyone-medium { border-color: var(--mazyone-border-medium); }
.border-mazyone-dark { border-color: var(--mazyone-border-dark); }

.shadow-mazyone-sm { box-shadow: var(--mazyone-shadow-sm); }
.shadow-mazyone-md { box-shadow: var(--mazyone-shadow-md); }
.shadow-mazyone-lg { box-shadow: var(--mazyone-shadow-lg); }

/* تدرجات الخلفية */
.bg-gradient-mazyone-primary { background: var(--mazyone-gradient-primary); }
.bg-gradient-mazyone-secondary { background: var(--mazyone-gradient-secondary); }
.bg-gradient-mazyone-warm { background: var(--mazyone-gradient-warm); }


============================================================
FILE: src/styles/components.css
============================================================
/* ملف المكونات المشتركة */

/* الأزرار المخصصة */
.btn-mazyone {
  @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
}

.btn-mazyone-primary {
  @apply btn-mazyone text-white;
  background-color: var(--mazyone-accent-blue);
}

.btn-mazyone-primary:hover {
  background-color: #005BB5;
}

.btn-mazyone-primary:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.btn-mazyone-secondary {
  @apply btn-mazyone text-white;
  background-color: var(--mazyone-accent-teal);
}

.btn-mazyone-secondary:hover {
  background-color: #6BC7A8;
}

.btn-mazyone-warning {
  @apply btn-mazyone;
  background-color: var(--mazyone-accent-yellow);
  color: var(--mazyone-text-primary);
}

.btn-mazyone-warning:hover {
  background-color: #F1C40F;
}

.btn-mazyone-outline {
  @apply btn-mazyone border-2 bg-transparent;
  border-color: var(--mazyone-accent-blue);
  color: var(--mazyone-accent-blue);
}

.btn-mazyone-outline:hover {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

/* البطاقات المخصصة */
.card-mazyone {
  background-color: var(--mazyone-bg-primary);
  border: 1px solid var(--mazyone-border-light);
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: var(--mazyone-shadow-sm);
  transition: all 0.2s ease-in-out;
}

.card-mazyone:hover {
  box-shadow: var(--mazyone-shadow-md);
  transform: translateY(-2px);
}

.card-mazyone-header {
  @apply mb-4 pb-4;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.card-mazyone-title {
  @apply text-lg font-semibold;
  color: var(--mazyone-text-primary);
}

.card-mazyone-description {
  @apply text-sm mt-1;
  color: var(--mazyone-text-secondary);
}

/* حقول الإدخال المخصصة */
.input-mazyone {
  @apply w-full px-4 py-3 border rounded-lg transition-colors focus:outline-none;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-medium);
  color: var(--mazyone-text-primary);
}

.input-mazyone:focus {
  border-color: var(--mazyone-accent-blue);
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.input-mazyone::placeholder {
  color: var(--mazyone-text-muted);
}

.input-mazyone-error {
  border-color: var(--mazyone-error);
}

.input-mazyone-error:focus {
  border-color: var(--mazyone-error);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* الشارات المخصصة */
.badge-mazyone {
  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
}

.badge-mazyone-primary {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.badge-mazyone-secondary {
  background-color: var(--mazyone-accent-teal);
  color: white;
}

.badge-mazyone-warning {
  background-color: var(--mazyone-accent-yellow);
  color: var(--mazyone-text-primary);
}

.badge-mazyone-success {
  background-color: var(--mazyone-success);
  color: white;
}

.badge-mazyone-error {
  background-color: var(--mazyone-error);
  color: white;
}

/* التنبيهات المخصصة */
.alert-mazyone {
  @apply p-4 rounded-lg border;
}

.alert-mazyone-success {
  background-color: #F0FDF4;
  border-color: var(--mazyone-success);
  color: #166534;
}

.alert-mazyone-warning {
  background-color: #FEF3C7;
  border-color: var(--mazyone-accent-yellow);
  color: #92400E;
}

.alert-mazyone-error {
  background-color: #FEF2F2;
  border-color: var(--mazyone-error);
  color: #991B1B;
}

.alert-mazyone-info {
  background-color: #EFF6FF;
  border-color: var(--mazyone-info);
  color: #1E40AF;
}

/* الجداول المخصصة */
.table-mazyone {
  @apply w-full border-collapse;
}

.table-mazyone th {
  @apply px-4 py-3 text-right text-xs font-medium uppercase tracking-wider;
  background-color: var(--mazyone-bg-secondary);
  color: var(--mazyone-text-muted);
  border-bottom: 1px solid var(--mazyone-border-light);
}

.table-mazyone td {
  @apply px-4 py-4 whitespace-nowrap text-sm;
  color: var(--mazyone-text-primary);
  border-bottom: 1px solid var(--mazyone-border-light);
}

.table-mazyone tbody tr:hover {
  background-color: var(--mazyone-bg-secondary);
}

/* القوائم المنسدلة المخصصة */
.dropdown-mazyone {
  @apply absolute right-0 mt-2 w-48 rounded-lg shadow-lg border py-1 z-50;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.dropdown-mazyone-item {
  @apply block px-4 py-2 text-sm transition-colors cursor-pointer;
  color: var(--mazyone-text-secondary);
}

.dropdown-mazyone-item:hover {
  background-color: var(--mazyone-bg-secondary);
  color: var(--mazyone-text-primary);
}

.dropdown-mazyone-divider {
  @apply my-1;
  border-top: 1px solid var(--mazyone-border-light);
}

/* المودال المخصص */
.modal-mazyone-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
  backdrop-filter: blur(4px);
}

.modal-mazyone-content {
  @apply rounded-lg shadow-xl max-w-md w-full mx-4;
  background-color: var(--mazyone-bg-primary);
  border: 1px solid var(--mazyone-border-light);
}

.modal-mazyone-header {
  @apply px-6 py-4;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.modal-mazyone-title {
  @apply text-lg font-semibold;
  color: var(--mazyone-text-primary);
}

.modal-mazyone-body {
  @apply px-6 py-4;
}

.modal-mazyone-footer {
  @apply px-6 py-4 flex justify-end space-x-3 space-x-reverse;
  border-top: 1px solid var(--mazyone-border-light);
}

/* التبويبات المخصصة */
.tabs-mazyone {
  @apply flex border-b;
  border-color: var(--mazyone-border-light);
}

.tab-mazyone {
  @apply px-4 py-2 text-sm font-medium transition-colors cursor-pointer;
  color: var(--mazyone-text-muted);
  border-bottom: 2px solid transparent;
}

.tab-mazyone:hover {
  color: var(--mazyone-text-secondary);
}

.tab-mazyone.active {
  color: var(--mazyone-accent-blue);
  border-bottom-color: var(--mazyone-accent-blue);
}

.tab-content-mazyone {
  @apply py-4;
}

/* الشريط الجانبي المخصص */
.sidebar-mazyone {
  @apply fixed top-0 right-0 h-full border-l z-50 transition-transform duration-300 ease-in-out;
  background-color: var(--mazyone-bg-secondary);
  border-color: var(--mazyone-border-light);
  width: 16rem;
}

.sidebar-mazyone-header {
  @apply flex items-center justify-between p-6;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.sidebar-mazyone-nav {
  @apply flex-1 px-6 pb-6 overflow-y-auto;
}

.sidebar-mazyone-link {
  @apply flex items-center space-x-3 space-x-reverse px-4 py-3 rounded-lg text-sm font-medium transition-colors;
  color: var(--mazyone-text-secondary);
}

.sidebar-mazyone-link:hover {
  background-color: var(--mazyone-bg-light);
}

.sidebar-mazyone-link.active {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

/* الهيدر المخصص */
.header-mazyone {
  @apply border-b px-6 py-4;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.header-mazyone-content {
  @apply flex items-center justify-between;
}

.header-mazyone-title {
  @apply text-xl font-semibold;
  color: var(--mazyone-text-primary);
}

.header-mazyone-actions {
  @apply flex items-center space-x-4 space-x-reverse;
}

/* بطاقات الإحصائيات */
.stats-card-mazyone {
  @apply card-mazyone hover:shadow-lg transition-shadow cursor-pointer;
}

.stats-card-mazyone-icon {
  @apply p-3 rounded-lg;
}

.stats-card-mazyone-value {
  @apply text-2xl font-bold;
  color: var(--mazyone-text-primary);
}

.stats-card-mazyone-label {
  @apply text-sm font-medium;
  color: var(--mazyone-text-muted);
}

.stats-card-mazyone-change {
  @apply text-sm font-medium flex items-center;
}

.stats-card-mazyone-change.positive {
  color: var(--mazyone-success);
}

.stats-card-mazyone-change.negative {
  color: var(--mazyone-error);
}

/* نماذج البحث */
.search-mazyone {
  @apply relative;
}

.search-mazyone-input {
  @apply input-mazyone pr-10;
}

.search-mazyone-icon {
  @apply absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4;
  color: var(--mazyone-text-muted);
}

.search-mazyone-results {
  @apply dropdown-mazyone mt-1;
}

.search-mazyone-result {
  @apply dropdown-mazyone-item;
}

.search-mazyone-result.highlighted {
  background-color: var(--mazyone-bg-light);
}

/* قوائم الإجراءات */
.action-menu-mazyone {
  @apply dropdown-mazyone;
}

.action-menu-mazyone-item {
  @apply dropdown-mazyone-item flex items-center space-x-2 space-x-reverse;
}

.action-menu-mazyone-icon {
  @apply w-4 h-4;
}

.action-menu-mazyone-text {
  @apply flex-1;
}

/* شارات الحالة */
.status-badge-mazyone {
  @apply badge-mazyone;
}

.status-badge-mazyone.active {
  @apply badge-mazyone-success;
}

.status-badge-mazyone.inactive {
  background-color: var(--mazyone-text-muted);
  color: white;
}

.status-badge-mazyone.pending {
  @apply badge-mazyone-warning;
}

.status-badge-mazyone.error {
  @apply badge-mazyone-error;
}

/* مؤشرات التحميل */
.loading-mazyone {
  @apply flex items-center justify-center;
}

.loading-mazyone-spinner {
  @apply w-6 h-6 border-2 border-gray-300 rounded-full animate-spin;
  border-top-color: var(--mazyone-accent-blue);
}

.loading-mazyone-dots {
  @apply flex space-x-1 space-x-reverse;
}

.loading-mazyone-dot {
  @apply w-2 h-2 rounded-full;
  background-color: var(--mazyone-accent-blue);
  animation: loading-dot 1.4s ease-in-out infinite both;
}

.loading-mazyone-dot:nth-child(1) { animation-delay: -0.32s; }
.loading-mazyone-dot:nth-child(2) { animation-delay: -0.16s; }

@keyframes loading-dot {
  0%, 80%, 100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}

/* شريط التقدم */
.progress-mazyone {
  @apply w-full rounded-full;
  background-color: var(--mazyone-bg-secondary);
  height: 0.5rem;
}

.progress-mazyone-bar {
  @apply h-full rounded-full transition-all duration-300;
  background-color: var(--mazyone-accent-blue);
}

.progress-mazyone-text {
  @apply text-sm font-medium mt-1;
  color: var(--mazyone-text-secondary);
}

/* مكونات النماذج */
.form-group-mazyone {
  @apply mb-4;
}

.form-label-mazyone {
  @apply block text-sm font-medium mb-2;
  color: var(--mazyone-text-primary);
}

.form-error-mazyone {
  @apply text-sm mt-1;
  color: var(--mazyone-error);
}

.form-help-mazyone {
  @apply text-sm mt-1;
  color: var(--mazyone-text-muted);
}

.form-checkbox-mazyone {
  @apply w-4 h-4 rounded border-gray-300 focus:ring-2 focus:ring-offset-2;
  color: var(--mazyone-accent-blue);
  border-color: var(--mazyone-border-medium);
}

.form-checkbox-mazyone:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.form-radio-mazyone {
  @apply w-4 h-4 border-gray-300 focus:ring-2 focus:ring-offset-2;
  color: var(--mazyone-accent-blue);
  border-color: var(--mazyone-border-medium);
}

.form-radio-mazyone:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.form-select-mazyone {
  @apply input-mazyone;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: left 0.5rem center;
  background-repeat: no-repeat;
  background-size: 1.5em 1.5em;
  padding-left: 2.5rem;
}

/* مكونات التنقل */
.breadcrumb-mazyone {
  @apply flex items-center space-x-2 space-x-reverse text-sm;
}

.breadcrumb-mazyone-item {
  color: var(--mazyone-text-muted);
}

.breadcrumb-mazyone-item.active {
  color: var(--mazyone-text-primary);
  font-weight: 500;
}

.breadcrumb-mazyone-separator {
  color: var(--mazyone-text-light);
}

.pagination-mazyone {
  @apply flex items-center space-x-1 space-x-reverse;
}

.pagination-mazyone-item {
  @apply px-3 py-2 text-sm rounded-lg transition-colors;
  color: var(--mazyone-text-secondary);
}

.pagination-mazyone-item:hover {
  background-color: var(--mazyone-bg-secondary);
}

.pagination-mazyone-item.active {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.pagination-mazyone-item.disabled {
  color: var(--mazyone-text-light);
  cursor: not-allowed;
}

/* مكونات الإشعارات */
.notification-mazyone {
  @apply p-4 rounded-lg border shadow-lg max-w-sm;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.notification-mazyone-header {
  @apply flex items-center justify-between mb-2;
}

.notification-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.notification-mazyone-close {
  @apply text-gray-400 hover:text-gray-600 cursor-pointer;
}

.notification-mazyone-body {
  @apply text-sm;
  color: var(--mazyone-text-secondary);
}

.notification-mazyone.success {
  border-left: 4px solid var(--mazyone-success);
}

.notification-mazyone.warning {
  border-left: 4px solid var(--mazyone-accent-yellow);
}

.notification-mazyone.error {
  border-left: 4px solid var(--mazyone-error);
}

.notification-mazyone.info {
  border-left: 4px solid var(--mazyone-info);
}

/* مكونات الأكورديون */
.accordion-mazyone {
  @apply border rounded-lg;
  border-color: var(--mazyone-border-light);
}

.accordion-mazyone-item {
  border-bottom: 1px solid var(--mazyone-border-light);
}

.accordion-mazyone-item:last-child {
  border-bottom: none;
}

.accordion-mazyone-header {
  @apply w-full flex items-center justify-between p-4 text-left hover:bg-gray-50 transition-colors;
  background-color: var(--mazyone-bg-primary);
}

.accordion-mazyone-header:hover {
  background-color: var(--mazyone-bg-secondary);
}

.accordion-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.accordion-mazyone-icon {
  @apply w-5 h-5 transition-transform;
  color: var(--mazyone-text-muted);
}

.accordion-mazyone-icon.expanded {
  transform: rotate(180deg);
}

.accordion-mazyone-content {
  @apply px-4 pb-4;
  color: var(--mazyone-text-secondary);
}

/* مكونات التقييم */
.rating-mazyone {
  @apply flex items-center space-x-1 space-x-reverse;
}

.rating-mazyone-star {
  @apply w-5 h-5 cursor-pointer transition-colors;
  color: var(--mazyone-text-light);
}

.rating-mazyone-star.filled {
  color: var(--mazyone-accent-yellow);
}

.rating-mazyone-star:hover {
  color: var(--mazyone-accent-yellow);
}

/* مكونات التبديل */
.toggle-mazyone {
  @apply relative inline-flex h-6 w-11 items-center rounded-full transition-colors;
  background-color: var(--mazyone-text-light);
}

.toggle-mazyone.checked {
  background-color: var(--mazyone-accent-blue);
}

.toggle-mazyone-handle {
  @apply inline-block h-4 w-4 transform rounded-full bg-white transition-transform;
  transform: translateX(0.25rem);
}

.toggle-mazyone.checked .toggle-mazyone-handle {
  transform: translateX(1.75rem);
}

/* مكونات التوقيت */
.timeline-mazyone {
  @apply relative;
}

.timeline-mazyone-item {
  @apply relative pb-8;
}

.timeline-mazyone-item:last-child {
  @apply pb-0;
}

.timeline-mazyone-line {
  @apply absolute right-4 top-4 -ml-px h-full w-0.5;
  background-color: var(--mazyone-border-medium);
}

.timeline-mazyone-item:last-child .timeline-mazyone-line {
  @apply hidden;
}

.timeline-mazyone-marker {
  @apply relative flex h-8 w-8 items-center justify-center rounded-full border-2;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-accent-blue);
}

.timeline-mazyone-content {
  @apply mr-12;
}

.timeline-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.timeline-mazyone-description {
  @apply text-sm mt-1;
  color: var(--mazyone-text-secondary);
}

.timeline-mazyone-time {
  @apply text-xs mt-1;
  color: var(--mazyone-text-muted);
}

/* مكونات خاصة بالمشروع */
.qr-preview-mazyone {
  @apply flex items-center justify-center p-4 rounded-lg border;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
  min-height: 200px;
}

.card-preview-mazyone {
  @apply rounded-lg shadow-md p-6 max-w-sm mx-auto;
  background-color: var(--mazyone-bg-primary);
  border-top: 4px solid var(--mazyone-accent-blue);
}

.social-link-mazyone {
  @apply w-10 h-10 rounded-full flex items-center justify-center transition-colors;
  background-color: var(--mazyone-bg-secondary);
}

.social-link-mazyone:hover {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.landing-page-preview-mazyone {
  @apply aspect-video rounded-lg flex items-center justify-center;
  background: linear-gradient(135deg, var(--mazyone-accent-blue) 0%, var(--mazyone-accent-teal) 100%);
}

/* تحسينات الاستجابة */
@media (max-width: 640px) {
  .card-mazyone {
    padding: 1rem;
  }
  
  .btn-mazyone {
    @apply w-full justify-center;
  }
  
  .modal-mazyone-content {
    @apply mx-2;
  }
  
  .sidebar-mazyone {
    width: 100%;
  }
  
  .dropdown-mazyone {
    @apply w-full;
  }
}

@media (max-width: 768px) {
  .tabs-mazyone {
    @apply flex-col;
  }
  
  .tab-mazyone {
    @apply w-full text-center;
  }
  
  .header-mazyone-content {
    @apply flex-col space-y-4;
  }
  
  .stats-card-mazyone {
    @apply text-center;
  }
}

/* تحسينات الوصولية */
.focus-visible-mazyone:focus {
  outline: 2px solid var(--mazyone-accent-blue);
  outline-offset: 2px;
}

.sr-only-mazyone {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* تحسينات الطباعة */
@media print {
  .no-print-mazyone {
    display: none !important;
  }
  
  .card-mazyone {
    box-shadow: none;
    border: 1px solid #ddd;
  }
  
  .btn-mazyone {
    border: 1px solid #000;
    background: white !important;
    color: black !important;
  }
}


============================================================
FILE: src/styles/login.css
============================================================
/* المحاذاة الأفقية للعناصر */
@media (min-width: 1024px) {
  /* تأكد من أن الجانبين لهما نفس التخطيط العمودي */
  .min-h-screen.grid.lg\\:grid-cols-2 {
    grid-template-columns: 1fr 1fr;
    height: 100vh;
    align-items: stretch;
  }
  
  /* الجانب الأيسر */
  .flex.flex-col.justify-start {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 3rem 2rem;
  }
  
  /* الجانب الأيمن */
  .hidden.lg\\:flex.lg\\:flex-col {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 3rem 2rem;
  }
}

/* تحسين المحاذاة الأفقية */
.horizontal-alignment {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
}

/* تحسين الخطوط */
.font-inter {
  font-family: 'Inter', sans-serif;
}

/* تحسين الألوان */
.text-primary-500 {
  color: #006BE3;
}

.dark .text-primary-500 {
  color: #7EDDB9;
}

/* تحسين الأزرار */
.btn-primary {
  background: linear-gradient(135deg, #006BE3 0%, #7EDDB9 100%);
  color: white;
  border: none;
  border-radius: 0.5rem;
  padding: 0.75rem 1.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
}

/* تحسين حقول الإدخال */
.input-field {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  transition: all 0.2s ease-in-out;
  background-color: white;
  color: #171717;
}

.dark .input-field {
  background-color: #262626;
  border-color: #404040;
  color: #f5f5f5;
}

.input-field:focus {
  outline: none;
  border-color: #006BE3;
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

/* تحسين الاستجابة للموبايل */
@media (max-width: 1023px) {
  .hidden.lg\\:flex {
    display: none !important;
  }
  
  .flex.flex-col.justify-start {
    justify-content: center;
  }
}


============================================================
FILE: src/styles/variables.css
============================================================
:root {
  /* Brand Colors */
  --color-primary: #3B82F6;
  --color-primary-hover: #2563EB;
  --color-secondary: #F59E0B;
  --color-accent: #10B981;
  
  /* Neutral Colors */
  --color-neutral-50: #F9FAFB;
  --color-neutral-100: #F3F4F6;
  --color-neutral-200: #E5E7EB;
  --color-neutral-300: #D1D5DB;
  --color-neutral-400: #9CA3AF;
  --color-neutral-500: #6B7280;
  --color-neutral-600: #4B5563;
  --color-neutral-700: #374151;
  --color-neutral-800: #1F2937;
  --color-neutral-900: #111827;
  
  /* Background Colors */
  --bg-primary: #FFFFFF;
  --bg-secondary: #F9FAFB;
  --bg-accent: #F59E0B;
  
  /* Text Colors */
  --text-primary: #111827;
  --text-secondary: #6B7280;
  --text-light: #FFFFFF;
}

.dark {
  --bg-primary: #1F2937;
  --bg-secondary: #111827;
  --text-primary: #F9FAFB;
  --text-secondary: #D1D5DB;
}


============================================================
FILE: src/App.css
============================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


============================================================
FILE: src/App.tsx
============================================================
import React, { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { useStore } from './store/useStore';

// Layout
import Layout from './components/Layout/Layout';

// Public Pages
import LandingPage from './pages/LandingPage';
import Login from './pages/Login';
import Register from './pages/Register';
import Payment from './pages/Payment';

// Protected Pages
import Dashboard from './pages/Dashboard';
import Cards from './pages/Cards';
import CreateCard from './pages/CreateCard';
import CardView from './pages/CardView';
import Contacts from './pages/Contacts';
import Jobs from './pages/Jobs';
import QRGenerator from './pages/QRGenerator';
import Analytics from './pages/Analytics';
import Scan from './pages/Scan';
import CVBuilder from './pages/CVBuilder';
import LandingPages from './pages/LandingPages';
import Referrals from './pages/Referrals';
import Settings from './pages/Settings';
import Support from './pages/Support';
import Subscription from './pages/Subscription';
import ThemeCustomizer from './components/ThemeCustomizer';

function App() {
  const { isAuthenticated, darkMode } = useStore();

  useEffect(() => {
    // Apply dark mode on initial load
    if (darkMode) {
      document.documentElement.setAttribute('data-theme', 'dark');
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.removeAttribute('data-theme');
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  return (
    <Router>
      <div className="App">
        <Toaster
          position="top-center"
          toastOptions={{
            duration: 4000,
            style: {
              background: 'var(--bg-primary)',
              color: 'var(--text-primary)',
              border: '1px solid var(--border-light)',
              borderRadius: '8px',
              fontSize: '14px',
              fontWeight: '500',
            },
            success: {
              style: {
                background: '#10B981',
                color: '#FFFFFF',
              },
              iconTheme: {
                primary: '#FFFFFF',
                secondary: '#10B981',
              },
            },
            error: {
              style: {
                background: '#EF4444',
                color: '#FFFFFF',
              },
              iconTheme: {
                primary: '#FFFFFF',
                secondary: '#EF4444',
              },
            },
          }}
        />
        
        <Routes>
          {/* Public Routes */}
          <Route path="/" element={<LandingPage />} />
          <Route 
            path="/login" 
            element={
              isAuthenticated ? <Navigate to="/dashboard" replace /> : <Login />
            } 
          />
          <Route 
            path="/register" 
            element={
              isAuthenticated ? <Navigate to="/dashboard" replace /> : <Register />
            } 
          />
          <Route 
            path="/payment" 
            element={
              isAuthenticated ? <Payment /> : <Navigate to="/login" replace />
            } 
          />
          
          {/* Protected Routes */}
          <Route 
            path="/dashboard" 
            element={
              isAuthenticated ? <Layout><Dashboard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards" 
            element={
              isAuthenticated ? <Layout><Cards /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/new" 
            element={
              isAuthenticated ? <Layout><CreateCard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/:id" 
            element={
              isAuthenticated ? <Layout><CardView /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/:id/edit" 
            element={
              isAuthenticated ? <Layout><CreateCard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/contacts" 
            element={
              isAuthenticated ? <Layout><Contacts /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/jobs" 
            element={
              isAuthenticated ? <Layout><Jobs /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/qr-generator" 
            element={
              isAuthenticated ? <Layout><QRGenerator /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/landing-pages" 
            element={
              isAuthenticated ? <Layout><LandingPages /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cv-builder" 
            element={
              isAuthenticated ? <Layout><CVBuilder /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/scan" 
            element={
              isAuthenticated ? <Layout><Scan /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/analytics" 
            element={
              isAuthenticated ? <Layout><Analytics /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/referrals" 
            element={
              isAuthenticated ? <Layout><Referrals /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/subscription" 
            element={
              isAuthenticated ? <Layout><Subscription /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/settings" 
            element={
              isAuthenticated ? <Layout><Settings /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/support" 
            element={
              isAuthenticated ? <Layout><Support /></Layout> : <Navigate to="/login" replace />
            }
          />
          
          {/* Catch all route */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
            <ThemeCustomizer />   {/* أضف المكوّن داخل الـ Router */}

    </Router>
  );
}

export default App;


============================================================
FILE: src/index.css
============================================================
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

/* نظام الألوان المحدد من العميل */
:root {
  /* النصوص الأساسية - رمادي غامق */
  --text-primary: #2D2D2D;
  --text-secondary: #444444;
  
  /* الخلفية الثانوية (بطاقات، أقسام جانبية) - رمادي فاتح */
  --bg-secondary: #EDEDED;
  --bg-light: #F5F5F5;
  
  /* الخلفية الرئيسية - أبيض نقي */
  --bg-primary: #FFFFFF;
  
  /* الأزرار/الروابط الرئيسية - أزرق */
  --btn-primary: #006BE3;
  --btn-primary-hover: #005BB5;
  
  /* الأزرار الثانوية/المساندة - تركوازي */
  --btn-secondary: #7EDDB9;
  --btn-secondary-hover: #6BC7A8;
  
  /* التنبيهات/التمييز - أصفر */
  --alert-warning: #FACC15;
  --alert-warning-hover: #F1C40F;
  
  /* أزرار الحث على الإجراء (CTA) - برتقالي */
  --btn-cta: #E1841F;
  --btn-cta-hover: #D4751A;
  
  /* ألوان إضافية للنظام */
  --success: #22C55E;
  --error: #EF4444;
  --info: #3B82F6;
  
  /* الحدود والظلال */
  --border-light: #E5E7EB;
  --border-medium: #D1D5DB;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

/* الوضع الليلي */
[data-theme="dark"] {
  --bg-primary: #1E1E1E;
  --bg-secondary: #2A2A2A;
  --bg-light: #374151;
  --text-primary: #F5F5F5;
  --text-secondary: #E5E7EB;
  --border-light: #374151;
  --border-medium: #4B5563;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


.font-inter {
  font-family: 'Inter', sans-serif;
}

body {
  font-family: 'Cairo', 'Poppins', sans-serif;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  direction: rtl;
  text-align: right;
  line-height: 1.6;
}

.ltr {
  direction: ltr;
  text-align: left;
}

@layer components {
  /* الأزرار الأساسية */
  .btn-primary {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-primary);
  }
  
  .btn-primary:hover {
    background-color: var(--btn-primary-hover);
  }
  
  .btn-primary:focus {
    box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
  }
  
  .btn-secondary {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-secondary);
  }
  
  .btn-secondary:hover {
    background-color: var(--btn-secondary-hover);
  }
  
  .btn-cta {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-cta);
  }
  
  .btn-cta:hover {
    background-color: var(--btn-cta-hover);
  }
  
  .btn-warning {
    @apply inline-flex items-center justify-center px-6 py-3 font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .btn-warning:hover {
    background-color: var(--alert-warning-hover);
  }
  
  /* البطاقات */
  .card {
    background-color: var(--bg-primary);
    border-radius: 0.75rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-light);
    padding: 1.5rem;
    transition: all 0.2s ease-in-out;
  }
  
  .card:hover {
    box-shadow: var(--shadow-md);
  }
  
  .card-secondary {
    background-color: var(--bg-secondary);
    border-radius: 0.75rem;
    padding: 1.5rem;
    border: 1px solid var(--border-light);
  }
  
  /* حقول الإدخال */
  .input-field {
    @apply w-full px-4 py-3 border rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--bg-primary);
    border-color: var(--border-medium);
    color: var(--text-primary);
  }
  
  .input-field:focus {
    border-color: var(--btn-primary);
    box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
  }
  
  .input-field::placeholder {
    color: var(--text-secondary);
    opacity: 0.7;
  }
  
  /* التنبيهات */
  .alert-success {
    @apply p-4 rounded-lg border;
    background-color: #F0FDF4;
    border-color: var(--success);
    color: #166534;
  }
  
  .alert-warning {
    @apply p-4 rounded-lg border;
    background-color: #FEF3C7;
    border-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .alert-error {
    @apply p-4 rounded-lg border;
    background-color: #FEF2F2;
    border-color: var(--error);
    color: #991B1B;
  }
  
  .alert-info {
    @apply p-4 rounded-lg border;
    background-color: #EFF6FF;
    border-color: var(--info);
    color: #1E40AF;
  }
  
  /* الشارات */
  .badge-primary {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-primary);
  }
  
  .badge-secondary {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-secondary);
  }
  
  .badge-warning {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
    background-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .badge-cta {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-cta);
  }
  
  /* النصوص */
  .text-primary {
    color: var(--text-primary);
  }
  
  .text-secondary {
    color: var(--text-secondary);
  }
  
  /* الخلفيات */
  .bg-primary {
    background-color: var(--bg-primary);
  }
  
  .bg-secondary {
    background-color: var(--bg-secondary);
  }
  
  .bg-light {
    background-color: var(--bg-light);
  }
  
  /* الشريط الجانبي */
  .sidebar-link {
    @apply flex items-center space-x-3 space-x-reverse px-4 py-3 rounded-lg text-sm font-medium transition-colors;
    color: var(--text-secondary);
  }
  
  .sidebar-link:hover {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
  }
  
  .sidebar-link.active {
    background-color: var(--btn-primary);
    color: white;
  }

  .sidebar {
  overflow-x: hidden !important;
  overflow-y: auto;
}

/* تحسين container الـ sidebar */
.sidebar-container {
  width: 100%;
  max-width: 100%;
  overflow-x: hidden;
}

/* تحسين النصوص لتجنب الفيض */
.sidebar-link {
  width: 100%;
  overflow: hidden;
}

.sidebar-link span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: calc(100% - 3rem); /* مساحة للأيقونة والحواف */
  display: inline-block;
}
  
  /* الجداول */
  .table {
    @apply w-full border-collapse;
  }
  
  .table th {
    @apply px-4 py-3 text-right text-xs font-medium uppercase tracking-wider;
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
    border-bottom: 1px solid var(--border-light);
  }
  
  .table td {
    @apply px-4 py-4 whitespace-nowrap text-sm;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-light);
  }
  
  .table tbody tr:hover {
    background-color: var(--bg-light);
  }
  
  /* القوائم المنسدلة */
  .dropdown-menu {
    @apply absolute right-0 mt-2 w-48 rounded-lg shadow-lg border py-1 z-50;
    background-color: var(--bg-primary);
    border-color: var(--border-light);
  }
  
  .dropdown-item {
    @apply block px-4 py-2 text-sm transition-colors cursor-pointer;
    color: var(--text-secondary);
  }
  
  .dropdown-item:hover {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
  }
  
  /* الحالات */
  .status-active {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: #DCFCE7;
    color: #166534;
  }
  
  .status-inactive {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
  }
  
  .status-pending {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: #FEF3C7;
    color: var(--text-primary);
  }
  
  /* مؤشرات التحميل */
  .loading-spinner {
    @apply animate-spin rounded-full border-2;
    border-color: var(--border-medium);
    border-top-color: var(--btn-primary);
  }
  
  /* التنقل */
  .breadcrumb {
    @apply flex items-center space-x-2 space-x-reverse text-sm;
    color: var(--text-secondary);
  }
  
  .breadcrumb-item.active {
    color: var(--text-primary);
    font-weight: 500;
  }
  
  /* الإشعارات */
  .notification-badge {
    @apply absolute -top-1 -right-1 w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold text-white;
    background-color: var(--btn-cta);
  }
  
  /* التدرجات */
  .gradient-primary {
    background: linear-gradient(135deg, var(--btn-primary) 0%, var(--btn-secondary) 100%);
  }
  
  .gradient-warning {
    background: linear-gradient(135deg, var(--alert-warning) 0%, var(--btn-cta) 100%);
  }
  
  /* تأثيرات التمرير */
  .hover-lift {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  
  .hover-lift:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
  
  /* المودال */
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
  }
  
  .modal-content {
    background-color: var(--bg-primary);
    @apply rounded-lg shadow-xl max-w-md w-full mx-4;
    border: 1px solid var(--border-light);
  }
  
  .modal-header {
    @apply px-6 py-4;
    border-bottom: 1px solid var(--border-light);
  }
  
  .modal-body {
    @apply px-6 py-4;
  }
  
  .modal-footer {
    @apply px-6 py-4 flex justify-end space-x-3 space-x-reverse;
    border-top: 1px solid var(--border-light);
  }
}

/* تحسينات الاستجابة */
@media (max-width: 640px) {
  .card {
    padding: 1rem;
  }
  
  .btn-primary,
  .btn-secondary,
  .btn-cta,
  .btn-warning {
    @apply w-full justify-center;
  }
}

/* تحسينات الوصولية */
.focus-visible:focus {
  outline: 2px solid var(--btn-primary);
  outline-offset: 2px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* تحسينات الطباعة */
@media print {
  .no-print {
    display: none !important;
  }
  
  .card {
    box-shadow: none;
    border: 1px solid #ddd;
  }
}


/* تحسينات التمرير المخفي */
.scrollbar-thin {
  scrollbar-width: thin;
  scrollbar-color: transparent transparent;
}

.scrollbar-thin:hover {
  scrollbar-color: #D1D5DB #F3F4F6;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 4px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background: transparent;
  border-radius: 2px;
}

.scrollbar-thin:hover::-webkit-scrollbar-thumb {
  background: #D1D5DB;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background: #9CA3AF;
}

/* الوضع الليلي */
.dark .scrollbar-thin:hover {
  scrollbar-color: #4B5563 #374151;
}

.dark .scrollbar-thin:hover::-webkit-scrollbar-thumb {
  background: #4B5563;
}

.dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background: #6B7280;
}

/* تحسينات إضافية للشريط الجانبي */
.sidebar-link {
  @apply flex items-center justify-between px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 relative;
}

.sidebar-link:hover {
  @apply bg-neutral-100 dark:bg-neutral-800;
}

.sidebar-link.active {
  @apply bg-blue-500 text-white shadow-lg;
}

.sidebar-link.active::before {
  content: '';
  position: absolute;
  right: -16px;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 20px;
  background: #1D4ED8;
  border-radius: 2px;
}


/* تحسينات صفحة تسجيل الدخول */
.login-container {
  min-height: 100vh;
}

/* للشاشات الكبيرة - عرض ثابت */
@media (min-width: 1024px) {
  .login-desktop-container {
    width: 100vw;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    overflow: hidden;
  }
  
  .login-form-side {
    width: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .login-image-side {
    width: 50%;
    position: relative;
  }
}

/* للموبايل - متجاوب */
@media (max-width: 1023px) {
  .login-mobile-container {
    min-height: 100vh;
    padding: 1rem;
  }
}

/* تحسين inputs */
.login-input {
  transition: all 0.3s ease;
}

.login-input:focus {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
}

/* تحسين الـ button */
.login-button {
  transition: all 0.3s ease;
}

.login-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.25);
}

/* تحسين الألوان للـ dark mode */
.dark .login-input {
  background-color: #374151;
  border-color: #4B5563;
  color: #F9FAFB;
}

.dark .login-input:focus {
  border-color: #3B82F6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}


============================================================
FILE: src/main.tsx
============================================================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


============================================================
FILE: .firebaserc
============================================================
{
  "projects": {
    "default": "ecard-frontend"
  }
}


============================================================
FILE: code.txt
============================================================
The following is a digest of the repository "mazyone-frontend".
This digest is designed to be easily parsed by Large Language Models.

--- SUMMARY ---
Repository: mazyone-frontend
Files Analyzed: 60
Total Text Size: 502.13 KB
Estimated Tokens (text only): ~132,209

--- DIRECTORY STRUCTURE ---
mazyone-frontend/
├── .firebase/
│   └── hosting.ZGlzdA.cache [binary]
├── src/
│   ├── assets/
│   │   ├── auth-illustration.svg
│   │   └── react.svg
│   ├── components/
│   │   ├── common/
│   │   │   ├── LoadingSpinner.tsx
│   │   │   └── Modal.tsx
│   │   ├── Layout/
│   │   │   ├── Header.tsx
│   │   │   ├── Layout.tsx
│   │   │   ├── NotificationDropdown.tsx
│   │   │   ├── ProfileDropdown.tsx
│   │   │   └── Sidebar.tsx
│   │   ├── qr/
│   │   │   ├── QRShapes.tsx
│   │   │   └── QRStickers.tsx
│   │   └── ThemeCustomizer.tsx
│   ├── pages/
│   │   ├── Analytics.tsx
│   │   ├── Cards.tsx
│   │   ├── CardView.tsx
│   │   ├── Contacts.tsx
│   │   ├── CreateCard.tsx
│   │   ├── CVBuilder.tsx
│   │   ├── Dashboard.tsx
│   │   ├── Jobs.tsx
│   │   ├── LandingPage.tsx
│   │   ├── LandingPages.tsx
│   │   ├── Login.tsx
│   │   ├── Payment.tsx
│   │   ├── QRGenerator.tsx
│   │   ├── Referrals.tsx
│   │   ├── Register.tsx
│   │   ├── Scan.tsx
│   │   ├── Settings.tsx
│   │   ├── Subscription.tsx
│   │   └── Support.tsx
│   ├── store/
│   │   └── useStore.ts [binary]
│   ├── styles/
│   │   ├── animations.css
│   │   ├── colors.css
│   │   ├── components.css
│   │   ├── login.css
│   │   └── variables.css
│   ├── types/
│   │   └── index.ts [binary]
│   ├── utils/
│   │   ├── cn.ts [binary]
│   │   ├── constants.ts [binary]
│   │   ├── helpers.ts [binary]
│   │   └── mockData.ts [binary]
│   ├── App.css
│   ├── App.tsx
│   ├── index.css
│   ├── main.tsx
│   └── vite-env.d.ts [binary]
├── .firebaserc
├── eslint.config.js
├── export-src-to-txt.js
├── firebase.json
├── package.json
├── postcss.config.js
├── README.md
├── tailwind.config.js
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts [binary]


--- FILE CONTENTS ---
============================================================
FILE: src/assets/auth-illustration.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="717" zoomAndPan="magnify" viewBox="0 0 537.75 525.000007" height="700" preserveAspectRatio="xMidYMid meet" version="1.2"><defs><clipPath id="81f81b2e1a"><path d="M 0.386719 272 L 254 272 L 254 450.511719 L 0.386719 450.511719 Z M 0.386719 272 "/></clipPath><clipPath id="bc6fb4ccb9"><path d="M 0.386719 272 L 189 272 L 189 450.511719 L 0.386719 450.511719 Z M 0.386719 272 "/></clipPath></defs><g id="cd3eee068d"><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 213.132812 60.644531 C 206.34375 54.042969 194.773438 53.5625 192.703125 64.660156 C 189.941406 79.5 189.378906 87.980469 183.550781 102.699219 C 166.734375 145.199219 153.667969 162.699219 156.574219 212.050781 C 157.25 223.542969 161.109375 234.796875 157.847656 246.304688 C 155.886719 253.238281 150.164062 261.023438 146.957031 267.40625 L 246.792969 327.082031 C 249.519531 324.617188 252.171875 320.265625 254.726562 317.679688 C 263.109375 309.207031 272.359375 305.109375 281.917969 298.457031 C 294.765625 289.511719 311.566406 273.804688 318.707031 259.757812 C 319.492188 259.660156 213.132812 60.644531 213.132812 60.644531 Z M 213.132812 60.644531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 213.917969 105.113281 C 212.292969 113.71875 210.628906 122.09375 209.035156 131.871094 C 207.222656 142.988281 203.019531 154.070312 201.101562 165.164062 C 200.914062 166.257812 200.71875 167.367188 200.710938 168.480469 C 200.660156 175.523438 206.882812 181.246094 211.429688 184.0625 C 212.398438 184.664062 213.222656 184.335938 213.910156 183.269531 L 213.910156 105.113281 Z M 213.917969 105.113281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 318.707031 259.757812 C 318.855469 259.742188 315.066406 252.410156 308.847656 240.578125 C 306.632812 240.625 304.40625 240.667969 302.1875 240.714844 C 286.636719 241.027344 271.078125 241.34375 255.527344 241.664062 C 242.914062 241.921875 230.292969 242.183594 217.679688 242.4375 C 216.539062 242.460938 215.042969 242.257812 213.820312 242.414062 C 213.214844 243.277344 212.210938 243.089844 212.210938 244.316406 C 212.210938 247.523438 213.304688 254.289062 213.804688 256.371094 C 214.839844 260.613281 216.539062 264.484375 219.25 267.910156 C 222.621094 272.179688 227.753906 274.671875 232.898438 276.425781 C 249.941406 282.222656 269.425781 280.121094 285.777344 287.820312 C 287.835938 288.785156 289.992188 289.632812 292.015625 290.683594 C 302.519531 281.828125 313.34375 270.328125 318.707031 259.773438 Z M 318.707031 259.757812 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 214.710938 241.464844 C 214.953125 241.320312 215.160156 241.195312 215.304688 241.113281 C 215.152344 241.195312 214.9375 241.320312 214.710938 241.464844 Z M 214.710938 241.464844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 215.304688 241.113281 C 215.386719 241.066406 215.460938 241.027344 215.476562 241.015625 C 215.507812 240.992188 215.429688 241.035156 215.304688 241.113281 Z M 215.304688 241.113281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 214.710938 241.464844 C 213.925781 241.941406 212.855469 242.609375 213.199219 242.519531 C 213.394531 242.46875 213.601562 242.429688 213.8125 242.40625 C 213.871094 242.316406 213.941406 242.226562 213.992188 242.117188 C 214.082031 241.914062 214.398438 241.671875 214.703125 241.472656 Z M 214.710938 241.464844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.199219 4.515625 L 232.621094 4.515625 C 221.347656 4.515625 212.210938 13.65625 212.210938 24.929688 L 212.210938 243.328125 C 212.210938 254.605469 221.347656 263.742188 232.621094 263.742188 L 339.199219 263.742188 C 350.472656 263.742188 359.613281 254.605469 359.613281 243.328125 L 359.613281 24.929688 C 359.613281 13.65625 350.472656 4.515625 339.199219 4.515625 Z M 339.199219 4.515625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 339.199219 12.683594 C 345.957031 12.683594 351.449219 18.175781 351.449219 24.929688 L 351.449219 243.328125 C 351.449219 250.085938 345.957031 255.578125 339.199219 255.578125 L 232.621094 255.578125 C 225.867188 255.578125 220.375 250.085938 220.375 243.328125 L 220.375 24.929688 C 220.375 18.175781 225.867188 12.683594 232.621094 12.683594 L 339.199219 12.683594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fcca03;fill-opacity:1;" d="M 395.761719 149.265625 L 351.441406 149.15625 L 351.441406 166.722656 L 240.414062 166.722656 C 235.902344 166.722656 232.246094 163.066406 232.246094 158.554688 L 232.246094 60.433594 C 232.246094 55.804688 236 52.050781 240.628906 52.050781 L 395.851562 52.050781 C 400.484375 52.050781 404.234375 55.804688 404.234375 60.433594 L 404.234375 140.882812 C 404.234375 145.550781 400.421875 149.320312 395.757812 149.265625 Z M 395.761719 149.265625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 334.152344 91.101562 L 351.972656 91.101562 L 351.972656 73.28125 L 334.152344 73.28125 Z M 336.371094 75.5 L 349.753906 75.5 L 349.753906 88.886719 L 336.371094 88.886719 Z M 336.371094 75.5 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.140625 78.269531 L 346.984375 78.269531 L 346.984375 86.113281 L 339.140625 86.113281 Z M 339.140625 78.269531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 351.972656 108.933594 L 334.152344 108.933594 L 334.152344 126.753906 L 351.972656 126.753906 Z M 349.753906 124.539062 L 336.371094 124.539062 L 336.371094 111.148438 L 349.753906 111.148438 Z M 349.753906 124.539062 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 339.140625 113.921875 L 346.984375 113.921875 L 346.984375 121.765625 L 339.140625 121.765625 Z M 339.140625 113.921875 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 387.621094 73.28125 L 369.800781 73.28125 L 369.800781 91.101562 L 387.621094 91.101562 Z M 385.402344 88.886719 L 372.019531 88.886719 L 372.019531 75.5 L 385.402344 75.5 Z M 385.402344 88.886719 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 374.789062 78.269531 L 382.632812 78.269531 L 382.632812 86.113281 L 374.789062 86.113281 Z M 374.789062 78.269531 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 354.519531 78.375 L 357.066406 78.375 L 357.066406 80.921875 L 354.519531 80.921875 Z M 354.519531 78.375 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 78.375 L 362.160156 78.375 L 362.160156 80.921875 L 359.613281 80.921875 Z M 359.613281 78.375 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 73.28125 L 362.160156 73.28125 L 362.160156 75.828125 L 359.613281 75.828125 Z M 359.613281 73.28125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 367.253906 75.828125 L 367.253906 73.28125 L 364.707031 73.28125 L 364.707031 78.375 L 367.253906 78.375 Z M 367.253906 75.828125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 88.5625 L 367.253906 88.5625 L 367.253906 91.109375 L 364.707031 91.109375 Z M 364.707031 88.5625 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 377.433594 108.933594 L 379.980469 108.933594 L 379.980469 103.839844 L 377.433594 103.839844 Z M 377.433594 108.933594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 387.621094 116.574219 L 387.621094 106.386719 L 385.074219 106.386719 L 385.074219 103.839844 L 382.527344 103.839844 L 382.527344 119.121094 L 385.074219 119.121094 L 385.074219 116.574219 Z M 387.621094 116.574219 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 379.980469 119.121094 L 382.527344 119.121094 L 382.527344 121.667969 L 379.980469 121.667969 Z M 379.980469 119.121094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 385.074219 119.121094 L 387.621094 119.121094 L 387.621094 121.667969 L 385.074219 121.667969 Z M 385.074219 119.121094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 382.527344 124.214844 L 382.527344 126.753906 L 387.621094 126.753906 L 387.621094 124.214844 L 385.074219 124.214844 L 385.074219 121.667969 L 382.527344 121.667969 Z M 382.527344 124.214844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 372.347656 121.667969 L 377.433594 121.667969 L 377.433594 116.574219 L 374.894531 116.574219 L 374.894531 114.027344 L 377.433594 114.027344 L 377.433594 108.933594 L 374.894531 108.933594 L 374.894531 111.480469 L 369.800781 111.480469 L 369.800781 116.574219 L 372.347656 116.574219 L 372.347656 119.121094 L 369.800781 119.121094 L 369.800781 116.574219 L 367.253906 116.574219 L 367.253906 121.667969 L 364.707031 121.667969 L 364.707031 116.574219 L 362.160156 116.574219 L 362.160156 121.667969 L 359.613281 121.667969 L 359.613281 124.214844 L 357.066406 124.214844 L 357.066406 121.667969 L 359.613281 121.667969 L 359.613281 114.027344 L 357.066406 114.027344 L 357.066406 108.933594 L 362.160156 108.933594 L 362.160156 106.386719 L 354.519531 106.386719 L 354.519531 116.574219 L 357.066406 116.574219 L 357.066406 119.121094 L 354.519531 119.121094 L 354.519531 126.753906 L 364.707031 126.753906 L 364.707031 124.214844 L 367.253906 124.214844 L 367.253906 126.753906 L 372.347656 126.753906 L 372.347656 124.214844 L 369.800781 124.214844 L 369.800781 121.667969 Z M 372.347656 121.667969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 377.433594 114.027344 L 379.980469 114.027344 L 379.980469 116.574219 L 377.433594 116.574219 Z M 377.433594 114.027344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 379.980469 93.648438 L 382.527344 93.648438 L 382.527344 96.199219 L 379.980469 96.199219 Z M 379.980469 93.648438 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 382.527344 101.292969 L 387.621094 101.292969 L 387.621094 96.199219 L 382.527344 96.199219 L 382.527344 98.746094 L 379.980469 98.746094 L 379.980469 96.199219 L 377.433594 96.199219 L 377.433594 101.292969 Z M 382.527344 101.292969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 91.101562 L 359.613281 96.199219 L 362.160156 96.199219 L 362.160156 88.5625 L 364.707031 88.5625 L 364.707031 86.015625 L 367.253906 86.015625 L 367.253906 80.921875 L 364.707031 80.921875 L 364.707031 83.46875 L 362.160156 83.46875 L 362.160156 86.015625 L 359.613281 86.015625 L 359.613281 83.46875 L 357.066406 83.46875 L 357.066406 88.5625 L 359.613281 88.5625 Z M 359.613281 91.101562 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 346.878906 103.839844 L 346.878906 106.386719 L 351.972656 106.386719 L 351.972656 103.839844 L 349.425781 103.839844 L 349.425781 101.292969 L 346.878906 101.292969 Z M 346.878906 103.839844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 349.425781 98.746094 L 351.972656 98.746094 L 351.972656 101.292969 L 349.425781 101.292969 Z M 349.425781 98.746094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 344.332031 98.746094 L 344.332031 96.199219 L 341.792969 96.199219 L 341.792969 93.648438 L 334.152344 93.648438 L 334.152344 106.386719 L 336.699219 106.386719 L 336.699219 103.839844 L 341.792969 103.839844 L 341.792969 101.292969 L 339.246094 101.292969 L 339.246094 98.746094 L 341.792969 98.746094 L 341.792969 101.292969 L 346.878906 101.292969 L 346.878906 98.746094 Z M 344.332031 98.746094 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 341.792969 103.839844 L 344.339844 103.839844 L 344.339844 106.386719 L 341.792969 106.386719 Z M 341.792969 103.839844 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 103.839844 L 367.253906 103.839844 L 367.253906 106.386719 L 369.800781 106.386719 L 369.800781 108.933594 L 374.894531 108.933594 L 374.894531 103.839844 L 377.441406 103.839844 L 377.441406 101.292969 L 374.894531 101.292969 L 374.894531 96.199219 L 372.347656 96.199219 L 372.347656 98.746094 L 369.800781 98.746094 L 369.800781 96.199219 L 372.347656 96.199219 L 372.347656 93.648438 L 364.707031 93.648438 L 364.707031 96.199219 L 367.253906 96.199219 L 367.253906 101.292969 L 364.707031 101.292969 L 364.707031 96.199219 L 362.160156 96.199219 L 362.160156 98.746094 L 357.066406 98.746094 L 357.066406 88.554688 L 354.519531 88.554688 L 354.519531 93.648438 L 344.332031 93.648438 L 344.332031 96.199219 L 346.878906 96.199219 L 346.878906 98.746094 L 349.425781 98.746094 L 349.425781 96.199219 L 354.519531 96.199219 L 354.519531 103.839844 L 362.160156 103.839844 L 362.160156 106.386719 L 364.707031 106.386719 Z M 369.800781 101.292969 L 372.347656 101.292969 L 372.347656 103.839844 L 369.800781 103.839844 Z M 369.800781 101.292969 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 108.933594 L 367.253906 108.933594 L 367.253906 111.480469 L 364.707031 111.480469 Z M 364.707031 108.933594 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 364.707031 114.027344 L 367.253906 114.027344 L 367.253906 116.574219 L 364.707031 116.574219 Z M 364.707031 114.027344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 359.613281 111.480469 L 362.160156 111.480469 L 362.160156 114.027344 L 359.613281 114.027344 Z M 359.613281 111.480469 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 303.597656 94.796875 C 303.597656 95.5625 303.558594 96.328125 303.484375 97.089844 C 303.410156 97.855469 303.296875 98.613281 303.148438 99.363281 C 302.996094 100.117188 302.8125 100.859375 302.589844 101.59375 C 302.367188 102.324219 302.109375 103.046875 301.816406 103.753906 C 301.523438 104.464844 301.195312 105.15625 300.832031 105.832031 C 300.472656 106.507812 300.078125 107.164062 299.652344 107.804688 C 299.226562 108.441406 298.769531 109.054688 298.285156 109.648438 C 297.796875 110.242188 297.28125 110.808594 296.742188 111.351562 C 296.199219 111.894531 295.632812 112.40625 295.039062 112.894531 C 294.445312 113.378906 293.832031 113.835938 293.195312 114.261719 C 292.554688 114.6875 291.898438 115.082031 291.222656 115.441406 C 290.546875 115.804688 289.855469 116.132812 289.148438 116.425781 C 288.4375 116.71875 287.71875 116.976562 286.984375 117.199219 C 286.25 117.421875 285.507812 117.609375 284.753906 117.757812 C 284.003906 117.90625 283.246094 118.019531 282.484375 118.09375 C 281.71875 118.167969 280.957031 118.207031 280.1875 118.207031 C 279.421875 118.207031 278.65625 118.167969 277.894531 118.09375 C 277.132812 118.019531 276.375 117.90625 275.621094 117.757812 C 274.871094 117.609375 274.128906 117.421875 273.394531 117.199219 C 272.660156 116.976562 271.9375 116.71875 271.230469 116.425781 C 270.523438 116.132812 269.828125 115.804688 269.152344 115.441406 C 268.476562 115.082031 267.820312 114.6875 267.183594 114.261719 C 266.546875 113.835938 265.929688 113.378906 265.339844 112.894531 C 264.746094 112.40625 264.179688 111.894531 263.636719 111.351562 C 263.09375 110.808594 262.578125 110.242188 262.09375 109.648438 C 261.605469 109.054688 261.152344 108.441406 260.726562 107.804688 C 260.300781 107.164062 259.90625 106.507812 259.542969 105.832031 C 259.183594 105.15625 258.855469 104.464844 258.5625 103.753906 C 258.269531 103.046875 258.011719 102.324219 257.789062 101.59375 C 257.566406 100.859375 257.378906 100.117188 257.230469 99.363281 C 257.082031 98.613281 256.96875 97.855469 256.894531 97.089844 C 256.816406 96.328125 256.78125 95.5625 256.78125 94.796875 C 256.78125 94.03125 256.816406 93.265625 256.894531 92.5 C 256.96875 91.738281 257.082031 90.980469 257.230469 90.230469 C 257.378906 89.476562 257.566406 88.734375 257.789062 88 C 258.011719 87.265625 258.269531 86.546875 258.5625 85.835938 C 258.855469 85.128906 259.183594 84.4375 259.542969 83.761719 C 259.90625 83.085938 260.300781 82.429688 260.726562 81.789062 C 261.152344 81.152344 261.605469 80.539062 262.09375 79.945312 C 262.578125 79.351562 263.09375 78.785156 263.636719 78.242188 C 264.179688 77.699219 264.746094 77.1875 265.339844 76.699219 C 265.929688 76.214844 266.546875 75.757812 267.183594 75.332031 C 267.820312 74.90625 268.476562 74.511719 269.152344 74.148438 C 269.828125 73.789062 270.523438 73.460938 271.230469 73.167969 C 271.9375 72.875 272.660156 72.617188 273.394531 72.394531 C 274.128906 72.171875 274.871094 71.984375 275.621094 71.835938 C 276.375 71.6875 277.132812 71.574219 277.894531 71.5 C 278.65625 71.421875 279.421875 71.386719 280.1875 71.386719 C 280.957031 71.386719 281.71875 71.421875 282.484375 71.5 C 283.246094 71.574219 284.003906 71.6875 284.753906 71.835938 C 285.507812 71.984375 286.25 72.171875 286.984375 72.394531 C 287.71875 72.617188 288.4375 72.875 289.148438 73.167969 C 289.855469 73.460938 290.546875 73.789062 291.222656 74.148438 C 291.898438 74.511719 292.554688 74.90625 293.195312 75.332031 C 293.832031 75.757812 294.445312 76.214844 295.039062 76.699219 C 295.632812 77.1875 296.199219 77.699219 296.742188 78.242188 C 297.28125 78.785156 297.796875 79.351562 298.285156 79.945312 C 298.769531 80.539062 299.226562 81.152344 299.652344 81.789062 C 300.078125 82.429688 300.472656 83.085938 300.832031 83.761719 C 301.195312 84.4375 301.523438 85.128906 301.816406 85.835938 C 302.109375 86.546875 302.367188 87.265625 302.589844 88 C 302.8125 88.734375 302.996094 89.476562 303.148438 90.230469 C 303.296875 90.980469 303.410156 91.738281 303.484375 92.5 C 303.558594 93.265625 303.597656 94.03125 303.597656 94.796875 Z M 303.597656 94.796875 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 289.394531 86.757812 C 289.394531 87.363281 289.335938 87.960938 289.21875 88.554688 C 289.101562 89.148438 288.925781 89.722656 288.695312 90.28125 C 288.460938 90.839844 288.179688 91.371094 287.84375 91.875 C 287.507812 92.375 287.125 92.839844 286.699219 93.269531 C 286.269531 93.695312 285.804688 94.078125 285.304688 94.414062 C 284.800781 94.75 284.269531 95.03125 283.710938 95.265625 C 283.152344 95.496094 282.578125 95.671875 281.984375 95.789062 C 281.390625 95.90625 280.792969 95.964844 280.1875 95.964844 C 279.585938 95.964844 278.984375 95.90625 278.390625 95.789062 C 277.800781 95.671875 277.222656 95.496094 276.664062 95.265625 C 276.105469 95.03125 275.578125 94.75 275.074219 94.414062 C 274.570312 94.078125 274.105469 93.695312 273.679688 93.269531 C 273.25 92.839844 272.871094 92.375 272.535156 91.875 C 272.199219 91.371094 271.914062 90.839844 271.683594 90.28125 C 271.453125 89.722656 271.277344 89.148438 271.160156 88.554688 C 271.042969 87.960938 270.984375 87.363281 270.984375 86.757812 C 270.984375 86.152344 271.042969 85.554688 271.160156 84.960938 C 271.277344 84.371094 271.453125 83.792969 271.683594 83.234375 C 271.914062 82.675781 272.199219 82.144531 272.535156 81.644531 C 272.871094 81.140625 273.25 80.675781 273.679688 80.246094 C 274.105469 79.820312 274.570312 79.4375 275.074219 79.101562 C 275.578125 78.765625 276.105469 78.484375 276.664062 78.253906 C 277.222656 78.019531 277.800781 77.847656 278.390625 77.726562 C 278.984375 77.609375 279.585938 77.550781 280.1875 77.550781 C 280.792969 77.550781 281.390625 77.609375 281.984375 77.726562 C 282.578125 77.847656 283.152344 78.019531 283.710938 78.253906 C 284.269531 78.484375 284.800781 78.765625 285.304688 79.101562 C 285.804688 79.4375 286.269531 79.820312 286.699219 80.246094 C 287.125 80.675781 287.507812 81.140625 287.84375 81.644531 C 288.179688 82.144531 288.460938 82.675781 288.695312 83.234375 C 288.925781 83.792969 289.101562 84.371094 289.21875 84.960938 C 289.335938 85.554688 289.394531 86.152344 289.394531 86.757812 Z M 289.394531 86.757812 "/><path style=" stroke:none;fill-rule:nonzero;fill:#2d2d2d;fill-opacity:1;" d="M 296.503906 111.578125 C 294.472656 104.476562 287.941406 99.269531 280.1875 99.269531 C 272.4375 99.269531 265.902344 104.476562 263.875 111.578125 C 268.089844 115.675781 273.84375 118.207031 280.1875 118.207031 C 286.535156 118.207031 292.285156 115.675781 296.503906 111.578125 Z M 296.503906 111.578125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 308.878906 132.402344 L 251.5 132.402344 C 250.054688 132.402344 248.878906 131.226562 248.878906 129.78125 C 248.878906 128.335938 250.054688 127.160156 251.5 127.160156 L 308.878906 127.160156 C 310.324219 127.160156 311.5 128.335938 311.5 129.78125 C 311.5 131.226562 310.324219 132.402344 308.878906 132.402344 Z M 308.878906 132.402344 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 320.734375 148.832031 L 251.5 148.832031 C 250.054688 148.832031 248.878906 147.65625 248.878906 146.210938 C 248.878906 144.765625 250.054688 143.589844 251.5 143.589844 L 320.734375 143.589844 C 322.183594 143.589844 323.359375 144.765625 323.359375 146.210938 C 323.359375 147.65625 322.183594 148.832031 320.734375 148.832031 Z M 320.734375 148.832031 "/><path style=" stroke:none;fill-rule:nonzero;fill:#f0a072;fill-opacity:1;" d="M 376.054688 215.054688 C 370.632812 218.605469 364.292969 219.25 359.613281 217.035156 L 359.613281 229.378906 L 378.175781 213.339844 L 370.894531 211.316406 C 370.9375 211.347656 370.976562 211.386719 371.023438 211.414062 C 372.691406 212.644531 374.378906 213.851562 376.054688 215.0625 Z M 376.054688 215.054688 "/><path style=" stroke:none;fill-rule:nonzero;fill:#e29969;fill-opacity:1;" d="M 359.613281 217.035156 C 364.292969 219.25 370.632812 218.605469 376.054688 215.054688 C 374.371094 213.851562 372.691406 212.636719 371.023438 211.40625 C 370.976562 211.378906 370.9375 211.339844 370.894531 211.3125 L 359.621094 208.1875 L 359.621094 217.035156 Z M 359.613281 217.035156 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 383.402344 191.988281 C 383.953125 192.703125 384.410156 193.476562 384.773438 194.308594 C 385.140625 195.144531 385.40625 196.023438 385.570312 196.945312 C 385.738281 197.867188 385.800781 198.816406 385.765625 199.792969 C 385.726562 200.765625 385.585938 201.75 385.34375 202.742188 C 385.097656 203.734375 384.761719 204.714844 384.324219 205.683594 C 383.886719 206.652344 383.359375 207.589844 382.746094 208.5 C 382.132812 209.410156 381.441406 210.273438 380.671875 211.085938 C 379.902344 211.902344 379.074219 212.652344 378.179688 213.34375 C 377.285156 214.03125 376.347656 214.644531 375.367188 215.179688 C 374.382812 215.71875 373.371094 216.167969 372.335938 216.53125 C 371.300781 216.894531 370.261719 217.164062 369.210938 217.34375 C 368.164062 217.519531 367.128906 217.597656 366.109375 217.582031 C 365.089844 217.5625 364.101562 217.449219 363.148438 217.242188 C 362.195312 217.03125 361.292969 216.726562 360.445312 216.332031 C 359.59375 215.9375 358.8125 215.457031 358.097656 214.890625 C 357.382812 214.328125 356.753906 213.6875 356.203125 212.976562 C 355.652344 212.261719 355.195312 211.488281 354.828125 210.65625 C 354.464844 209.820312 354.199219 208.941406 354.03125 208.019531 C 353.863281 207.097656 353.800781 206.148438 353.839844 205.171875 C 353.878906 204.199219 354.019531 203.214844 354.261719 202.222656 C 354.503906 201.230469 354.84375 200.25 355.28125 199.28125 C 355.71875 198.3125 356.242188 197.375 356.855469 196.464844 C 357.472656 195.554688 358.164062 194.691406 358.929688 193.878906 C 359.699219 193.0625 360.53125 192.3125 361.421875 191.621094 C 362.316406 190.933594 363.253906 190.320312 364.238281 189.785156 C 365.222656 189.246094 366.230469 188.796875 367.265625 188.433594 C 368.300781 188.070312 369.34375 187.800781 370.390625 187.621094 C 371.4375 187.445312 372.472656 187.367188 373.492188 187.382812 C 374.515625 187.402344 375.5 187.515625 376.453125 187.722656 C 377.40625 187.933594 378.308594 188.238281 379.160156 188.632812 C 380.007812 189.027344 380.792969 189.507812 381.503906 190.074219 C 382.21875 190.636719 382.851562 191.277344 383.402344 191.988281 Z M 383.402344 191.988281 "/><path style=" stroke:none;fill-rule:nonzero;fill:#fbb078;fill-opacity:1;" d="M 381.660156 159.203125 C 382.25 159.882812 382.753906 160.628906 383.164062 161.4375 C 383.578125 162.25 383.894531 163.113281 384.113281 164.023438 C 384.335938 164.933594 384.453125 165.878906 384.472656 166.855469 C 384.488281 167.832031 384.40625 168.820312 384.222656 169.824219 C 384.035156 170.828125 383.753906 171.828125 383.375 172.820312 C 382.992188 173.8125 382.523438 174.78125 381.960938 175.722656 C 381.402344 176.667969 380.761719 177.566406 380.042969 178.425781 C 379.320312 179.285156 378.535156 180.082031 377.683594 180.820312 C 376.832031 181.5625 375.933594 182.226562 374.980469 182.820312 C 374.03125 183.414062 373.050781 183.921875 372.035156 184.34375 C 371.023438 184.765625 370 185.097656 368.964844 185.335938 C 367.925781 185.570312 366.898438 185.710938 365.878906 185.753906 C 364.859375 185.796875 363.867188 185.738281 362.902344 185.585938 C 361.941406 185.429688 361.023438 185.179688 360.152344 184.835938 C 359.28125 184.488281 358.472656 184.054688 357.726562 183.53125 C 356.980469 183.007812 356.3125 182.410156 355.722656 181.726562 C 355.132812 181.046875 354.628906 180.300781 354.21875 179.492188 C 353.804688 178.679688 353.488281 177.820312 353.269531 176.90625 C 353.046875 175.996094 352.929688 175.050781 352.910156 174.074219 C 352.894531 173.101562 352.976562 172.109375 353.164062 171.105469 C 353.347656 170.101562 353.628906 169.105469 354.007812 168.109375 C 354.390625 167.117188 354.859375 166.152344 355.421875 165.207031 C 355.980469 164.261719 356.621094 163.363281 357.339844 162.503906 C 358.0625 161.648438 358.847656 160.847656 359.699219 160.109375 C 360.550781 159.367188 361.453125 158.703125 362.402344 158.109375 C 363.351562 157.515625 364.332031 157.007812 365.347656 156.585938 C 366.359375 156.164062 367.382812 155.832031 368.417969 155.597656 C 369.457031 155.359375 370.484375 155.21875 371.503906 155.179688 C 372.523438 155.136719 373.515625 155.191406 374.480469 155.347656 C 375.441406 155.5 376.359375 155.75 377.230469 156.097656 C 378.101562 156.441406 378.910156 156.875 379.65625 157.398438 C 380.402344 157.921875 381.070312 158.523438 381.660156 159.203125 Z M 381.660156 159.203125 "/><path style=" stroke:none;fill-rule:nonzero;fill:#e6e6e7;fill-opacity:1;" d="M 125.773438 282.410156 L 244.261719 366.234375 L 265.460938 336.273438 L 146.964844 252.445312 Z M 125.773438 282.410156 "/><path style=" stroke:none;fill-rule:nonzero;fill:#ffffff;fill-opacity:1;" d="M 126.011719 283.34375 L 147.199219 253.382812 L 206.136719 295.070312 L 184.949219 325.03125 Z M 126.011719 283.34375 "/><g clip-rule="nonzero" clip-path="url(#81f81b2e1a)"><path style=" stroke:none;fill-rule:nonzero;fill:#006be3;fill-opacity:1;" d="M 124.015625 272.53125 L 0.386719 450.902344 L 193.160156 450.902344 L 253.347656 364.066406 Z M 124.015625 272.53125 "/></g><g clip-rule="nonzero" clip-path="url(#bc6fb4ccb9)"><path style=" stroke:none;fill-rule:nonzero;fill:#0076e0;fill-opacity:1;" d="M 124.015625 272.53125 L 0.386719 450.902344 L 96.769531 450.902344 L 188.667969 318.3125 Z M 124.015625 272.53125 "/></g><path style=" stroke:none;fill-rule:nonzero;fill:#fcca03;fill-opacity:1;" d="M 140.734375 315.515625 C 140.734375 316.273438 140.660156 317.027344 140.511719 317.769531 C 140.363281 318.515625 140.144531 319.238281 139.851562 319.941406 C 139.5625 320.640625 139.207031 321.308594 138.785156 321.9375 C 138.363281 322.570312 137.882812 323.152344 137.347656 323.691406 C 136.8125 324.226562 136.226562 324.707031 135.597656 325.128906 C 134.964844 325.550781 134.300781 325.90625 133.597656 326.195312 C 132.898438 326.484375 132.175781 326.707031 131.429688 326.851562 C 130.683594 327 129.933594 327.074219 129.175781 327.074219 C 128.417969 327.074219 127.664062 327 126.921875 326.851562 C 126.175781 326.707031 125.453125 326.484375 124.75 326.195312 C 124.050781 325.90625 123.382812 325.550781 122.753906 325.128906 C 122.121094 324.707031 121.539062 324.226562 121.003906 323.691406 C 120.464844 323.152344 119.984375 322.570312 119.566406 321.9375 C 119.144531 321.308594 118.785156 320.640625 118.496094 319.941406 C 118.207031 319.238281 117.988281 318.515625 117.839844 317.769531 C 117.691406 317.027344 117.617188 316.273438 117.617188 315.515625 C 117.617188 314.757812 117.691406 314.003906 117.839844 313.261719 C 117.988281 312.515625 118.207031 311.792969 118.496094 311.09375 C 118.785156 310.390625 119.144531 309.726562 119.566406 309.09375 C 119.984375 308.464844 120.464844 307.878906 121.003906 307.34375 C 121.539062 306.804688 122.121094 306.328125 122.753906 305.90625 C 123.382812 305.484375 124.050781 305.128906 124.75 304.835938 C 125.453125 304.546875 126.175781 304.328125 126.921875 304.179688 C 127.664062 304.03125 128.417969 303.957031 129.175781 303.957031 C 129.933594 303.957031 130.683594 304.03125 131.429688 304.179688 C 132.175781 304.328125 132.898438 304.546875 133.597656 304.835938 C 134.300781 305.128906 134.964844 305.484375 135.597656 305.90625 C 136.226562 306.328125 136.8125 306.804688 137.347656 307.34375 C 137.882812 307.878906 138.363281 308.464844 138.785156 309.09375 C 139.207031 309.726562 139.5625 310.390625 139.851562 311.09375 C 140.144531 311.792969 140.363281 312.515625 140.511719 313.261719 C 140.660156 314.003906 140.734375 314.757812 140.734375 315.515625 Z M 140.734375 315.515625 "/></g></svg>

============================================================
FILE: src/assets/react.svg
============================================================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

============================================================
FILE: src/components/common/LoadingSpinner.tsx
============================================================
import React from 'react';
import { cn } from '../../utils/cn';

interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ size = 'md', className }) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-6 h-6',
    lg: 'w-8 h-8'
  };

  return (
    <div className={cn("animate-spin rounded-full border-2 border-neutral-300 border-t-primary-500", sizeClasses[size], className)} />
  );
};

export default LoadingSpinner;


============================================================
FILE: src/components/common/Modal.tsx
============================================================
import React from 'react';
import { X } from 'lucide-react';
import { cn } from '../../utils/cn';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title?: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

const Modal: React.FC<ModalProps> = ({ isOpen, onClose, title, children, size = 'md' }) => {
  if (!isOpen) return null;

  const sizeClasses = {
    sm: 'max-w-sm',
    md: 'max-w-md',
    lg: 'max-w-lg',
    xl: 'max-w-2xl'
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className={cn("bg-white dark:bg-neutral-900 rounded-lg w-full", sizeClasses[size])}>
        {title && (
          <div className="flex items-center justify-between p-6 border-b border-neutral-200 dark:border-neutral-700">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              {title}
            </h3>
            <button
              onClick={onClose}
              className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
        )}
        
        <div className="p-6">
          {children}
        </div>
      </div>
    </div>
  );
};

export default Modal;


============================================================
FILE: src/components/Layout/Header.tsx
============================================================
import React from 'react';
import { Menu, Moon, Sun, Search, Link, Crown } from 'lucide-react';
import { useStore } from '../../store/useStore';
import NotificationDropdown from './NotificationDropdown';
import ProfileDropdown from './ProfileDropdown';

const Header = () => {
  const { user, darkMode, toggleDarkMode, toggleSidebar } = useStore();

  return (
    <header className="bg-white dark:bg-neutral-900  border-neutral-200 dark:border-neutral-700 px-6 py-4 sticky top-0 z-30">
      <div className="flex items-center justify-between">
        {/* Left side */}
        <div className="flex items-center space-x-4 space-x-reverse">
          <button
            onClick={toggleSidebar}
            className="lg:hidden p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
          >
            <Menu className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
          </button>
          
          <div className="hidden md:block">
            <h1 className="text-xl font-semibold text-neutral-800 dark:text-neutral-100">
              مرحباً، {user?.name?.split(' ')[0] || 'المستخدم'}
            </h1>
          </div>
        </div>

        {/* Center - Search (hidden on mobile) */}
        <div className="hidden lg:block flex-1 max-w-md mx-8">
          <div className="relative">
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
            <input
              type="text"
              placeholder="البحث في مزيون..."
              className="w-full pl-4 pr-10 py-2 border border-neutral-200 dark:border-neutral-700 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-neutral-50 dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100 text-sm"
            />
          </div>
        </div>

        {/* Right side */}
        <div className="flex items-center space-x-3 space-x-reverse">
          {user?.subscription === 'free' && (
  <Link to="/subscription" className="btn-primary text-sm">
    <Crown className="w-4 h-4 mr-1" />
    ترقية
  </Link>
)}
          {/* Dark mode toggle */}
          <button
            onClick={toggleDarkMode}
            className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
            title={darkMode ? 'الوضع الفاتح' : 'الوضع الليلي'}
          >
            {darkMode ? (
              <Sun className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            ) : (
              <Moon className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            )}
          </button>

          {/* Notifications */}
          <NotificationDropdown />

          {/* Profile */}
          <ProfileDropdown />
        </div>
      </div>
    </header>
  );
};

export default Header;


============================================================
FILE: src/components/Layout/Layout.tsx
============================================================
import React from 'react';
import { Outlet } from 'react-router-dom';
import Sidebar from './Sidebar';
import Header from './Header';
import { useStore } from '../../store/useStore';

interface LayoutProps {
  children?: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
  const { sidebarOpen } = useStore();

  return (
    <div className="h-screen bg-white dark:bg-neutral-900 overflow-hidden">
      <Sidebar />
      <div className={`h-full flex flex-col transition-all duration-300 ${sidebarOpen ? 'lg:mr-64' : 'lg:mr-16'}`}>
        <Header />
        <main className="flex-1 overflow-y-auto p-6">
          {children || <Outlet />}
        </main>
      </div>
    </div>
  );
};

export default Layout;


============================================================
FILE: src/components/Layout/NotificationDropdown.tsx
============================================================
import React, { useState } from 'react';
import { Bell, X, Check, Eye, Trash2, Settings } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { cn } from '../../utils/cn';
import { formatDistanceToNow } from 'date-fns';
import { ar } from 'date-fns/locale';

const NotificationDropdown = () => {
  const { notifications, markNotificationAsRead, markAllNotificationsAsRead } = useStore();
  const [isOpen, setIsOpen] = useState(false);
  
  const unreadNotifications = notifications.filter(n => !n.isRead);
  const recentNotifications = notifications.slice(0, 5);

  const getNotificationIcon = (type: string) => {
    switch (type) {
      case 'card_view': return Eye;
      case 'card_share': return '🔗';
      case 'contact_add': return '👤';
      case 'success': return '✅';
      case 'warning': return '⚠️';
      case 'error': return '❌';
      default: return Bell;
    }
  };

  const getNotificationColor = (type: string) => {
    switch (type) {
      case 'card_view': return 'text-blue-500';
      case 'card_share': return 'text-green-500';
      case 'contact_add': return 'text-purple-500';
      case 'success': return 'text-green-500';
      case 'warning': return 'text-yellow-500';
      case 'error': return 'text-red-500';
      default: return 'text-neutral-500';
    }
  };

  const handleNotificationClick = (notification: any) => {
    if (!notification.isRead) {
      markNotificationAsRead(notification.id);
    }
    if (notification.actionUrl) {
      window.location.href = notification.actionUrl;
    }
  };

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
      >
        <Bell className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
        {unreadNotifications.length > 0 && (
          <span 
            className="absolute -top-1 -right-1 w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold text-white"
            style={{ backgroundColor: '#FACC15', color: '#2D2D2D' }}
          >
            {unreadNotifications.length > 9 ? '9+' : unreadNotifications.length}
          </span>
        )}
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute left-0 mt-2 w-80 bg-white dark:bg-neutral-900 rounded-lg shadow-xl border border-neutral-200 dark:border-neutral-700 z-50">
            {/* Header */}
            <div className="flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-700">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                الإشعارات
              </h3>
              <div className="flex items-center space-x-2 space-x-reverse">
                {unreadNotifications.length > 0 && (
                  <button
                    onClick={markAllNotificationsAsRead}
                    className="text-xs text-blue-500 hover:text-blue-600 font-medium"
                  >
                    تحديد الكل كمقروء
                  </button>
                )}
                <button
                  onClick={() => setIsOpen(false)}
                  className="p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            </div>

            {/* Notifications List */}
            <div className="max-h-96 overflow-y-auto">
              {recentNotifications.length === 0 ? (
                <div className="p-8 text-center">
                  <Bell className="w-12 h-12 text-neutral-400 mx-auto mb-3" />
                  <p className="text-neutral-500 dark:text-neutral-400">
                    لا توجد إشعارات جديدة
                  </p>
                </div>
              ) : (
                <div className="divide-y divide-neutral-200 dark:divide-neutral-700">
                  {recentNotifications.map((notification) => {
                    const Icon = getNotificationIcon(notification.type);
                    return (
                      <div
                        key={notification.id}
                        onClick={() => handleNotificationClick(notification)}
                        className={cn(
                          "p-4 hover:bg-neutral-50 dark:hover:bg-neutral-800 cursor-pointer transition-colors",
                          !notification.isRead && "bg-blue-50 dark:bg-blue-900/10"
                        )}
                      >
                        <div className="flex items-start space-x-3 space-x-reverse">
                          <div className={cn(
                            "w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0",
                            !notification.isRead ? "bg-blue-100 dark:bg-blue-900/20" : "bg-neutral-100 dark:bg-neutral-800"
                          )}>
                            {typeof Icon === 'string' ? (
                              <span className="text-sm">{Icon}</span>
                            ) : (
                              <Icon className={cn("w-4 h-4", getNotificationColor(notification.type))} />
                            )}
                          </div>
                          
                          <div className="flex-1 min-w-0">
                            <div className="flex items-center justify-between mb-1">
                              <h4 className={cn(
                                "text-sm font-medium truncate",
                                !notification.isRead 
                                  ? "text-neutral-900 dark:text-neutral-100" 
                                  : "text-neutral-700 dark:text-neutral-300"
                              )}>
                                {notification.title}
                              </h4>
                              {!notification.isRead && (
                                <div className="w-2 h-2 bg-blue-500 rounded-full flex-shrink-0" />
                              )}
                            </div>
                            <p className="text-sm text-neutral-600 dark:text-neutral-400 leading-relaxed">
                              {notification.message}
                            </p>
                            <div className="flex items-center justify-between mt-2">
                              <span className="text-xs text-neutral-500 dark:text-neutral-500">
                                {formatDistanceToNow(new Date(notification.createdAt), { 
                                  addSuffix: true, 
                                  locale: ar 
                                })}
                              </span>
                              {notification.actionText && (
                                <span className="text-xs text-blue-500 font-medium">
                                  {notification.actionText}
                                </span>
                              )}
                            </div>
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Footer */}
            {notifications.length > 5 && (
              <div className="p-3 border-t border-neutral-200 dark:border-neutral-700">
                <button className="w-full text-center text-sm text-blue-500 hover:text-blue-600 font-medium py-2">
                  عرض جميع الإشعارات
                </button>
              </div>
            )}
          </div>
        </>
      )}
    </div>
  );
};

export default NotificationDropdown;


============================================================
FILE: src/components/Layout/ProfileDropdown.tsx
============================================================
import React, { useState } from 'react';
import { User, Settings, LogOut, CreditCard, BarChart3, HelpCircle, Crown } from 'lucide-react';
import { useStore } from '../../store/useStore';
import { Link } from 'react-router-dom';
import { cn } from '../../utils/cn';

const ProfileDropdown = () => {
  const { user, logout } = useStore();
  const [isOpen, setIsOpen] = useState(false);

  const menuItems = [
    {
      icon: User,
      label: 'الملف الشخصي',
      href: '/settings',
      color: 'text-neutral-600'
    },
    {
      icon: CreditCard,
      label: 'بطاقاتي',
      href: '/cards',
      color: 'text-blue-500'
    },
    {
      icon: BarChart3,
      label: 'التحليلات',
      href: '/analytics',
      color: 'text-green-500'
    },
    {
      icon: Settings,
      label: 'الإعدادات',
      href: '/settings',
      color: 'text-neutral-600'
    },
    {
      icon: HelpCircle,
      label: 'المساعدة',
      href: '/support',
      color: 'text-purple-500'
    }
  ];

  const getSubscriptionBadge = (subscription: string) => {
    switch (subscription) {
      case 'core':
        return { text: 'مزيون الأصيل', color: 'bg-gray-100 text-gray-800' };
      case 'pro':
        return { text: 'مزيون برو', color: 'bg-blue-100 text-blue-800' };
      case 'pro-plus':
        return { text: 'مزيون برو بلس', color: 'bg-purple-100 text-purple-800' };
      case 'business':
        return { text: 'مزيون المؤسسي', color: 'bg-orange-100 text-orange-800' };
      default:
        return { text: 'مجاني', color: 'bg-gray-100 text-gray-800' };
    }
  };

  const handleLogout = () => {
    if (window.confirm('هل أنت متأكد أنك تريد تسجيل الخروج؟')) {
      logout();
      setIsOpen(false);
    }
  };

  const subscriptionBadge = getSubscriptionBadge(user?.subscription || 'free');

  return (
    <div className="relative">
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="flex items-center space-x-2 space-x-reverse p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
      >
        <div className="w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-teal-500 flex items-center justify-center">
          {user?.avatar ? (
            <img 
              src={user.avatar} 
              alt={user.name}
              className="w-8 h-8 rounded-full object-cover"
            />
          ) : (
            <User className="w-4 h-4 text-white" />
          )}
        </div>
      </button>

      {isOpen && (
        <>
          <div 
            className="fixed inset-0 z-40" 
            onClick={() => setIsOpen(false)}
          />
          <div className="absolute left-0 mt-2 w-64 bg-white dark:bg-neutral-900 rounded-lg shadow-xl border border-neutral-200 dark:border-neutral-700 z-50">
            {/* User Info */}
            <div className="p-4 border-b border-neutral-200 dark:border-neutral-700">
              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-12 h-12 rounded-full bg-gradient-to-br from-blue-500 to-teal-500 flex items-center justify-center">
                  {user?.avatar ? (
                    <img 
                      src={user.avatar} 
                      alt={user.name}
                      className="w-12 h-12 rounded-full object-cover"
                    />
                  ) : (
                    <User className="w-6 h-6 text-white" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="text-sm font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {user?.name || 'المستخدم'}
                  </h3>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 truncate">
                    {user?.email}
                  </p>
                  <div className="mt-1">
                    <span className={cn(
                      "inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium",
                      subscriptionBadge.color
                    )}>
                      {user?.subscription === 'business' && <Crown className="w-3 h-3 ml-1" />}
                      {subscriptionBadge.text}
                    </span>
                  </div>
                </div>
              </div>
            </div>

            {/* Menu Items */}
            <div className="py-2">
              {menuItems.map((item, index) => (
                <Link
                  key={index}
                  to={item.href}
                  onClick={() => setIsOpen(false)}
                  className="flex items-center space-x-3 space-x-reverse px-4 py-3 text-sm text-neutral-700 dark:text-neutral-300 hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  <item.icon className={cn("w-4 h-4", item.color)} />
                  <span>{item.label}</span>
                </Link>
              ))}
            </div>

            {/* Subscription Upgrade */}
            {user?.subscription === 'free' && (
              <div className="p-3 border-t border-neutral-200 dark:border-neutral-700">
                <div className="bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 rounded-lg p-3">
                  <div className="flex items-center space-x-2 space-x-reverse mb-2">
                    <Crown className="w-4 h-4 text-yellow-500" />
                    <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                      ترقية الاشتراك
                    </span>
                  </div>
                  <p className="text-xs text-neutral-600 dark:text-neutral-400 mb-3">
                    احصل على ميزات إضافية مع مزيون برو
                  </p>
                  <button 
                    className="w-full text-xs font-medium text-white py-2 rounded-lg transition-colors"
                    style={{ backgroundColor: '#006BE3' }}
                  >
                    ترقية الآن
                  </button>
                </div>
              </div>
            )}

            {/* Logout */}
            <div className="p-2 border-t border-neutral-200 dark:border-neutral-700">
              <button
                onClick={handleLogout}
                className="w-full flex items-center space-x-3 space-x-reverse px-4 py-3 text-sm text-red-600 dark:text-red-400 hover:bg-red-50 dark:hover:bg-red-900/20 rounded-lg transition-colors"
              >
                <LogOut className="w-4 h-4" />
                <span>تسجيل الخروج</span>
              </button>
            </div>
          </div>
        </>
      )}
    </div>
  );
};

export default ProfileDropdown;


============================================================
FILE: src/components/Layout/Sidebar.tsx
============================================================
import { Link, useLocation } from 'react-router-dom';
import { 
  Home, 
  CreditCard, 
  Users, 
  Briefcase, 
  QrCode, 
  BarChart3,
  Scan,
  FileText,
  Globe,
  Gift,
  Settings,
  HelpCircle,
  Crown,
  X,
  Menu,
  ChevronLeft,
  ChevronRight
} from 'lucide-react';
import { useStore } from '../../store/useStore';
import { cn } from '../../utils/cn';

const Sidebar = () => {
  const location = useLocation();
  const { sidebarOpen, toggleSidebar, user } = useStore();

  const menuItems = [
    {
      name: 'لوحة التحكم',
      href: '/dashboard',
      icon: Home,
      badge: null
    },
    {
      name: 'بطاقاتي',
      href: '/cards',
      icon: CreditCard,
      badge: null
    },
    {
      name: 'جهات الاتصال',
      href: '/contacts',
      icon: Users,
      badge: null
    },
    {
      name: 'الوظائف',
      href: '/jobs',
      icon: Briefcase,
      badge: null
    },
    {
      name: 'مولد QR',
      href: '/qr-generator',
      icon: QrCode,
      badge: null
    },
    {
      name: 'صفحات الهبوط',
      href: '/landing-pages',
      icon: Globe,
      badge: user?.subscription === 'free' ? 'برو' : null
    },
    {
      name: 'منشئ السيرة',
      href: '/cv-builder',
      icon: FileText,
      badge: user?.subscription === 'free' ? 'برو' : null
    },
    {
      name: 'مسح البطاقات',
      href: '/scan',
      icon: Scan,
      badge: null
    },
    {
      name: 'التحليلات',
      href: '/analytics',
      icon: BarChart3,
      badge: null
    },
    {
      name: 'الإحالات',
      href: '/referrals',
      icon: Gift,
      badge: null
    },
    {
      name: 'الاشتراك',
      href: '/subscription',
      icon: Crown,
      badge: user?.subscription === 'free' ? 'ترقية' : null
    },
    {
      name: 'الإعدادات',
      href: '/settings',
      icon: Settings,
      badge: null
    },
    {
      name: 'المساعدة',
      href: '/support',
      icon: HelpCircle,
      badge: null
    }
  ];

  return (
    <>
      {/* Mobile Overlay */}
      {sidebarOpen && (
        <div 
          className="fixed inset-0 bg-black bg-opacity-50 z-40 lg:hidden"
          onClick={toggleSidebar}
        />
      )}

      {/* Sidebar */}
      <div className={cn(
        "sidebar fixed top-0 right-0 h-full bg-white dark:bg-neutral-900  border-neutral-200 dark:border-neutral-700 z-50 transition-all duration-300 ease-in-out shadow-lg",
        sidebarOpen ? "w-64" : "w-16 lg:w-16",
        "transform lg:transform-none overflow-hidden",
        sidebarOpen ? "translate-x-0" : "translate-x-full lg:translate-x-0"
      )}>
        
        {/* Header */}
        <div className="flex items-center justify-between p-4  border-neutral-200 dark:border-neutral-700 relative">
          <div className={cn(
            "flex items-center space-x-3 space-x-reverse transition-opacity duration-200",
            sidebarOpen ? "opacity-100" : "opacity-0 lg:opacity-0"
          )}>
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-teal-500 rounded-lg flex items-center justify-center">
              <span className="text-white font-bold text-sm">M</span>
            </div>
            <span className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
              مزيون
            </span>
          </div>
          
          {/* Toggle Button */}
          <button
            onClick={toggleSidebar}
            className={cn(
              "sidebar-toggle-btn p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-all duration-200 relative z-10",
              "border border-neutral-200 dark:border-neutral-700 bg-white dark:bg-neutral-900 shadow-sm",
              !sidebarOpen && "lg:absolute lg:left-[-16px] lg:top-1/2 lg:transform lg:-translate-y-1/2"
            )}
          >
            {sidebarOpen ? (
              <ChevronRight className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
            ) : (
              <Menu className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
            )}
          </button>

          {/* Mobile Close Button */}
          <button
            onClick={toggleSidebar}
            className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors lg:hidden"
          >
            <X className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
          </button>
        </div>

        {/* Navigation Menu */}
        <nav className="flex-1 overflow-y-auto overflow-x-hidden scrollbar-thin scrollbar-thumb-neutral-300 dark:scrollbar-thumb-neutral-600 scrollbar-track-transparent hover:scrollbar-thumb-neutral-400 dark:hover:scrollbar-thumb-neutral-500">
          <div className="sidebar-container p-4 space-y-2">
            {menuItems.map((item) => {
              const isActive = location.pathname === item.href;
              
              return (
                <div key={item.name} className="relative group">
                  <Link
                    to={item.href}
                    className={cn(
                      "sidebar-link group/item relative w-full flex items-center justify-between px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200",
                      isActive 
                        ? "active bg-blue-500 text-white shadow-lg" 
                        : "hover:bg-neutral-100 dark:hover:bg-neutral-800"
                    )}
                  >
                    <div className="flex items-center space-x-3 space-x-reverse w-full overflow-hidden">
                      {/* Icon */}
                      <div className="w-5 h-5 flex items-center justify-center flex-shrink-0">
                        <item.icon className={cn(
                          "w-5 h-5 transition-colors",
                          isActive 
                            ? "text-white" 
                            : "text-neutral-600 dark:text-neutral-400 group-hover/item:text-neutral-800 dark:group-hover/item:text-neutral-200"
                        )} />
                      </div>
                      
                      {/* Text */}
                      <span className={cn(
                        "font-medium transition-all duration-200 flex-1 min-w-0",
                        sidebarOpen ? "opacity-100 translate-x-0" : "opacity-0 translate-x-2 lg:opacity-0 lg:translate-x-2",
                        isActive 
                          ? "text-white" 
                          : "text-neutral-700 dark:text-neutral-300 group-hover/item:text-neutral-900 dark:group-hover/item:text-neutral-100",
                        "truncate"
                      )}>
                        {item.name}
                      </span>
                    </div>

                    {/* Badge */}
                    {item.badge && (
                      <span className={cn(
                        "bg-yellow-400 text-yellow-900 text-xs px-2 py-0.5 rounded-full transition-all duration-200 flex-shrink-0",
                        sidebarOpen ? "opacity-100 scale-100" : "opacity-0 scale-75 lg:opacity-0 lg:scale-75"
                      )}>
                        {item.badge}
                      </span>
                    )}
                  </Link>

                  {/* Tooltip */}
                  {!sidebarOpen && (
                    <div className="absolute right-full mr-3 top-1/2 transform -translate-y-1/2 bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 px-3 py-2 rounded-lg text-sm opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none whitespace-nowrap z-[60] shadow-lg min-w-max">
                      {item.name}
                      {item.badge && (
                        <span className="mr-2 bg-yellow-400 text-yellow-900 px-1 rounded text-xs">
                          {item.badge}
                        </span>
                      )}
                      {/* Arrow */}
                      <div className="absolute left-0 top-1/2 transform -translate-y-1/2 translate-x-full">
                        <div className="w-0 h-0 border-l-[6px] border-r-0 border-t-[6px] border-b-[6px] border-l-neutral-900 dark:border-l-neutral-100 border-t-transparent border-b-transparent"></div>
                      </div>
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </nav>

        {/* User Info at Bottom */}
        <div className="border-t border-neutral-200 dark:border-neutral-700 p-4">
          <div className={cn(
            "flex items-center space-x-3 space-x-reverse transition-all duration-200",
            sidebarOpen ? "opacity-100" : "opacity-0 lg:opacity-0"
          )}>
            <div className="w-8 h-8 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full flex items-center justify-center">
              <span className="text-white font-bold text-xs">
                {user?.name?.charAt(0) || 'M'}
              </span>
            </div>
            <div className="flex-1 min-w-0">
              <p className="text-sm font-medium text-neutral-900 dark:text-neutral-100 truncate">
                {user?.name || 'المستخدم'}
              </p>
              <p className="text-xs text-neutral-500 dark:text-neutral-400 truncate">
                {user?.subscription === 'free' ? 'مزيون الأصيل' : 
                 user?.subscription === 'pro' ? 'مزيون برو' : 
                 user?.subscription === 'business' ? 'مزيون المؤسسي' : 'مزيون الأصيل'}
              </p>
            </div>
          </div>

          {/* Upgrade Button for Free Users */}
          {user?.subscription === 'free' && (
            <Link
              to="/subscription"
              className={cn(
                "mt-3 w-full bg-yellow-400 hover:bg-yellow-500 text-yellow-900 font-medium text-xs py-2 px-4 rounded-lg transition-all duration-200 flex items-center justify-center",
                sidebarOpen ? "opacity-100 scale-100" : "opacity-0 scale-75 lg:opacity-0 lg:scale-75"
              )}
            >
              <Crown className="w-3 h-3 ml-1" />
              ترقية الحساب
            </Link>
          )}
        </div>
      </div>
    </>
  );
};

export default Sidebar;


============================================================
FILE: src/components/qr/QRShapes.tsx
============================================================
// src/components/qr/QRShapes.tsx (محسن ومصحح)
import React, { useState } from 'react';
import { cn } from '../../utils/cn';

const QR_SHAPES = {
  square: { name: 'مربع', path: 'M3 3h18v18H3z' },
  circle: { name: 'دائرة', path: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2z' },
  heart: { name: 'قلب', path: 'M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z' },
  star: { name: 'نجمة', path: 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z' },
  diamond: { name: 'معين', path: 'M6 2l2 4h8l2-4h4l-4 7 4 7h-4l-2-4H8l-2 4H2l4-7L2 2h4z' },
  hexagon: { name: 'سداسي', path: 'M17.5 3.5L22 12l-4.5 8.5h-9L4 12l4.5-8.5h9z' },
  apple: { name: 'تفاحة', path: 'M12 2c3.31 0 6 2.69 6 6 0 2.97-2.16 5.43-5 5.92V16h2v2h-6v-2h2v-2.08c-2.84-.49-5-2.95-5-5.92 0-3.31 2.69-6 6-6z' },
  guitar: { name: 'جيتار', path: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10c1.19 0 2.34-.21 3.41-.6.3-.11.49-.4.49-.72v-1.57c0-.55-.45-1-1-1h-1c-2.76 0-5-2.24-5-5s2.24-5 5-5h1c.55 0 1-.45 1-1V6.32c0-.32-.19-.61-.49-.72C14.34 2.21 13.19 2 12 2z' },
  car: { name: 'سيارة', path: 'M18.92 6.01C18.72 5.42 18.16 5 17.5 5h-11c-.66 0-1.21.42-1.42 1.01L3 12v8c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-1h12v1c0 .55.45 1 1 1h1c.55 0 1-.45 1-1v-8l-2.08-5.99z' },
  camera: { name: 'كاميرا', path: 'M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z' },
  laptop: { name: 'لابتوب', path: 'M20 18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2H4c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2H1v2h22v-2h-3zM4 6h16v10H4V6z' },
  phone: { name: 'هاتف', path: 'M17 1.01L7 1c-1.1 0-2 .9-2 2v18c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V3c0-1.1-.9-1.99-2-1.99zM17 19H7V5h10v14z' },
  house: { name: 'منزل', path: 'M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z' },
  pizza: { name: 'بيتزا', path: 'M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z' },
  coffee: { name: 'قهوة', path: 'M18.5 3H6c-.83 0-1.5.67-1.5 1.5v3C4.5 8.33 5.17 9 6 9h.5v8c0 1.1.9 2 2 2h7c1.1 0 2-.9 2-2V9h.5c.83 0 1.5-.67 1.5-1.5v-3C19 3.67 18.33 3 17.5 3h-1z' },
  crown: { name: 'تاج', path: 'M5 16L3 5l5.5 5L12 4l3.5 6L21 5l-2 11H5z' },
  lightning: { name: 'برق', path: 'M11 21h-1l1-7H7.5c-.88 0-.33-.75-.31-.78C8.48 10.94 10.42 7.54 13.01 3h1.05L13 10h3.5c.49 0 .56.75.48.78l-5.98 10.22z' }
};

interface QRShapesProps {
  selectedShape: string;
  onShapeSelect: (shapeId: string) => void;
  className?: string;
}

const QRShapes: React.FC<QRShapesProps> = ({ selectedShape, onShapeSelect, className }) => {
  return (
    <div className={className}>
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-8 gap-3 max-h-64 overflow-y-auto">
        {Object.entries(QR_SHAPES).map(([id, shape]) => (
          <button
            key={id}
            onClick={() => onShapeSelect(id)}
            className={cn(
              "aspect-square p-2 rounded-lg border-2 transition-all hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500",
              selectedShape === id
                ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                : "border-neutral-200 dark:border-neutral-700 hover:border-primary-300"
            )}
            title={shape.name}
          >
            <svg
              viewBox="0 0 24 24"
              fill="currentColor"
              className="w-full h-full text-neutral-600 dark:text-neutral-400"
            >
              <path d={shape.path} />
            </svg>
          </button>
        ))}
      </div>
    </div>
  );
};

export default QRShapes;


============================================================
FILE: src/components/qr/QRStickers.tsx
============================================================
// src/components/qr/QRStickers.tsx (محسن ومصحح)
import React from 'react';
import { cn } from '../../utils/cn';

const STICKER_CONFIGS = {
  'hiring-1': { name: 'نوظف الآن', color: 'green', icon: '💼' },
  'hiring-2': { name: 'باحث عن وظيفة', color: 'blue', icon: '🔍' },
  'hiring-3': { name: 'متاح للعمل', color: 'purple', icon: '💻' },
  'support-1': { name: 'دعم فلسطين', color: 'red', icon: '🇵🇸' },
  'support-2': { name: 'التوعية البيئية', color: 'green', icon: '🌱' },
  'celebration-1': { name: 'عيد مبارك', color: 'yellow', icon: '🎉' },
  'celebration-2': { name: 'تخرج', color: 'indigo', icon: '🎓' },
  'business-1': { name: 'شركة ناشئة', color: 'teal', icon: '🚀' },
  'social-1': { name: 'متابعوني', color: 'cyan', icon: '👥' },
  'seasonal-1': { name: 'رمضان كريم', color: 'emerald', icon: '🌙' }
};

const COLOR_CLASSES = {
  green: 'border-green-500 bg-green-50 text-green-700',
  blue: 'border-blue-500 bg-blue-50 text-blue-700',
  purple: 'border-purple-500 bg-purple-50 text-purple-700',
  red: 'border-red-500 bg-red-50 text-red-700',
  yellow: 'border-yellow-500 bg-yellow-50 text-yellow-700',
  indigo: 'border-indigo-500 bg-indigo-50 text-indigo-700',
  teal: 'border-teal-500 bg-teal-50 text-teal-700',
  cyan: 'border-cyan-500 bg-cyan-50 text-cyan-700',
  emerald: 'border-emerald-500 bg-emerald-50 text-emerald-700'
};

interface QRStickersProps {
  selectedSticker: string;
  onStickerSelect: (stickerId: string) => void;
  className?: string;
}

const QRStickers: React.FC<QRStickersProps> = ({ selectedSticker, onStickerSelect, className }) => {
  return (
    <div className={className}>
      <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4 max-h-64 overflow-y-auto">
        {Object.entries(STICKER_CONFIGS).map(([id, sticker]) => (
          <button
            key={id}
            onClick={() => onStickerSelect(id)}
            className={cn(
              "relative aspect-square p-3 rounded-lg border-2 transition-all hover:scale-105 focus:outline-none focus:ring-2 focus:ring-primary-500",
              selectedSticker === id
                ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                : "border-neutral-200 dark:border-neutral-700 hover:border-primary-300"
            )}
            title={sticker.name}
          >
            <div className={cn(
              "w-full h-full rounded-lg flex flex-col items-center justify-center text-center border-4",
              COLOR_CLASSES[sticker.color as keyof typeof COLOR_CLASSES]
            )}>
              <div className="text-2xl mb-1">{sticker.icon}</div>
              <div className="text-xs font-bold leading-tight">
                {sticker.name}
              </div>
            </div>
          </button>
        ))}
      </div>
    </div>
  );
};

export default QRStickers;


============================================================
FILE: src/components/ThemeCustomizer.tsx
============================================================
import React, { useEffect, useState } from 'react';
import { Palette, Star, Undo2 } from 'lucide-react';
import { useStore } from '../store/useStore';

/* جميع المتغيّرات القابلة للتخصيص */
const VARS = [
  'btn-primary', 'btn-primary-hover',
  'btn-secondary', 'btn-secondary-hover',
  'alert-warning', 'alert-warning-hover',
  'bg-primary', 'bg-secondary',
  'text-primary', 'text-secondary',
];

/* ➊ - ثلاث ثيمات جاهزة */
const PRESETS: Record<string, Record<string, string>> = {
  classic: {
    'btn-primary': '#006BE3',
    'btn-primary-hover': '#0056be',
    'btn-secondary': '#7EDDB9',
    'btn-secondary-hover': '#65c4a1',
    'alert-warning': '#FACC15',
    'alert-warning-hover': '#e0b900',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#EDEDED',
    'text-primary': '#2D2D2D',
    'text-secondary': '#444444',
  },
  emerald: {
    'btn-primary': '#059669',
    'btn-primary-hover': '#047857',
    'btn-secondary': '#10B981',
    'btn-secondary-hover': '#0e9f6e',
    'alert-warning': '#FBBF24',
    'alert-warning-hover': '#f59e0b',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#ECFDF5',
    'text-primary': '#064E3B',
    'text-secondary': '#065F46',
  },
  sunset: {
    'btn-primary': '#EA580C',
    'btn-primary-hover': '#c2410c',
    'btn-secondary': '#FDBA74',
    'btn-secondary-hover': '#fb923c',
    'alert-warning': '#F97316',
    'alert-warning-hover': '#ea580c',
    'bg-primary': '#FFFFFF',
    'bg-secondary': '#FFEFE6',
    'text-primary': '#7C2D12',
    'text-secondary': '#9A3412',
  },
};

const ThemeCustomizer: React.FC = () => {
  const { userColors, setUserColors } = useStore();
  const [open, setOpen] = useState(false);
  const [colors, setColors] = useState<Record<string, string>>(userColors);

  /* ➋ - تطبيق الألوان فور التعديل */
  useEffect(() => {
    const root = document.documentElement;
    Object.entries(colors).forEach(([k, v]) => root.style.setProperty(`--${k}`, v));
  }, [colors]);

  /* ➌ - حفظ إلى التخزين */
  const saveColors = () => {
    setUserColors(colors);       // يحفظ فى store + localStorage
    setOpen(false);
  };

  /*➍ - استرجاع الافتراضى */
  const resetColors = () => setColors(useStore.getState().defaultColors);

  /*➎ - تغيير ثيم جاهز */
  const applyPreset = (name: string) => setColors(PRESETS[name]);

  return (
    <>
      {/* زر عائم */}
      <button
        onClick={() => setOpen(!open)}
        className="fixed bottom-6 left-6 z-50 p-3 rounded-full shadow-lg bg-primary-500 text-white hover:scale-110 transition-transform"
        title="تخصيص الألوان"
      >
        <Palette />
      </button>

      {/* اللوحة */}
      {open && (
        <div className="fixed bottom-24 left-6 z-50 w-80 bg-white dark:bg-neutral-900 p-6 rounded-2xl shadow-2xl border">
          <h3 className="font-bold mb-4 flex items-center space-x-2 space-x-reverse">
            <Star className="w-4 h-4 text-yellow-400" /> <span>اختَر ثيماً أو خصِّصه</span>
          </h3>

          {/* الثيمات الجاهزة */}
          <div className="grid grid-cols-3 gap-2 mb-6">
            {Object.keys(PRESETS).map((preset) => (
              <button
                key={preset}
                onClick={() => applyPreset(preset)}
                className="h-10 rounded-lg border-2 border-transparent hover:border-primary-500 transition-all"
                style={{ background: PRESETS[preset]['btn-primary'] }}
                title={preset}
              />
            ))}
          </div>

          {/* محرّر يدوى */}
          <div className="space-y-4 max-h-60 overflow-y-auto pr-1">
            {VARS.map((varName) => (
              <div key={varName}>
                <label className="text-xs font-medium block mb-1">{varName}</label>
                <input
                  type="color"
                  value={colors[varName]}
                  onChange={(e) => setColors({ ...colors, [varName]: e.target.value })}
                  className="w-full h-8 rounded border cursor-pointer"
                  style={{ background: colors[varName] }}
                />
              </div>
            ))}
          </div>

          {/* أزرار الحفظ / إعادة الضبط */}
          <div className="mt-6 flex items-center space-x-2 space-x-reverse">
            <button
              onClick={resetColors}
              className="flex-1 flex items-center justify-center space-x-1 space-x-reverse px-3 py-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700"
            >
              <Undo2 className="w-4 h-4" /> <span className="text-sm">إعادة الضبط</span>
            </button>
            <button
              onClick={saveColors}
              className="flex-1 btn-primary py-2"
            >
              حفظ
            </button>
          </div>
        </div>
      )}
    </>
  );
};

export default ThemeCustomizer;


============================================================
FILE: src/pages/Analytics.tsx
============================================================
import React, { useState } from 'react';
import { 
  TrendingUp, 
  Eye, 
  Share2, 
  Users, 
  Calendar,
  Download,
  Filter,
  BarChart3,
  PieChart,
  Globe
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockAnalytics } from '../utils/mockData';
import { cn } from '../utils/cn';

const Analytics = () => {
  const { cards } = useStore();
  const [timeRange, setTimeRange] = useState('7d');
  const [selectedCard, setSelectedCard] = useState('all');

  const timeRanges = [
    { value: '7d', label: 'آخر 7 أيام' },
    { value: '30d', label: 'آخر 30 يوم' },
    { value: '90d', label: 'آخر 3 أشهر' },
    { value: '1y', label: 'آخر سنة' }
  ];

  const stats = [
    {
      name: 'إجمالي المشاهدات',
      value: mockAnalytics.cardViews.reduce((sum, item) => sum + item.value, 0),
      change: '+12.5%',
      changeType: 'positive',
      icon: Eye,
      color: 'bg-blue-500'
    },
    {
      name: 'إجمالي المشاركات',
      value: mockAnalytics.cardShares.reduce((sum, item) => sum + item.value, 0),
      change: '+8.2%',
      changeType: 'positive',
      icon: Share2,
      color: 'bg-green-500'
    },
    {
      name: 'مسح QR',
      value: mockAnalytics.qrScans.reduce((sum, item) => sum + item.value, 0),
      change: '+15.3%',
      changeType: 'positive',
      icon: BarChart3,
      color: 'bg-purple-500'
    },
    {
      name: 'جهات اتصال جديدة',
      value: mockAnalytics.contactAdds.reduce((sum, item) => sum + item.value, 0),
      change: '+5.7%',
      changeType: 'positive',
      icon: Users,
      color: 'bg-orange-500'
    }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            التحليلات والإحصائيات
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            تتبع أداء بطاقاتك وتفاعل المستخدمين
          </p>
        </div>

        <div className="flex items-center space-x-3 space-x-reverse">
          <select
            value={selectedCard}
            onChange={(e) => setSelectedCard(e.target.value)}
            className="input-field w-auto"
          >
            <option value="all">جميع البطاقات</option>
            {cards.map((card) => (
              <option key={card.id} value={card.id}>
                {card.name}
              </option>
            ))}
          </select>

          <select
            value={timeRange}
            onChange={(e) => setTimeRange(e.target.value)}
            className="input-field w-auto"
          >
            {timeRanges.map((range) => (
              <option key={range.value} value={range.value}>
                {range.label}
              </option>
            ))}
          </select>

          <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
            <Download className="w-4 h-4" />
            <span>تصدير</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                  {stat.name}
                </p>
                <p className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mt-1">
                  {stat.value.toLocaleString()}
                </p>
                <div className="flex items-center mt-2">
                  <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
                  <span className={cn(
                    "text-sm font-medium",
                    stat.changeType === 'positive' ? "text-green-600" : "text-red-600"
                  )}>
                    {stat.change}
                  </span>
                </div>
              </div>
              <div className={cn("p-3 rounded-lg", stat.color)}>
                <stat.icon className="w-6 h-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Views Chart */}
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              مشاهدات البطاقات
            </h2>
            <div className="flex items-center space-x-2 space-x-reverse">
              <div className="w-3 h-3 bg-primary-500 rounded-full"></div>
              <span className="text-sm text-neutral-600 dark:text-neutral-400">المشاهدات</span>
            </div>
          </div>
          
          <div className="h-64 flex items-end space-x-2 space-x-reverse">
            {mockAnalytics.cardViews.map((item, index) => (
              <div key={index} className="flex-1 flex flex-col items-center">
                <div 
                  className="w-full bg-primary-500 rounded-t-sm"
                  style={{ 
                    height: `${(item.value / Math.max(...mockAnalytics.cardViews.map(i => i.value))) * 200}px`,
                    minHeight: '4px'
                  }}
                ></div>
                <span className="text-xs text-neutral-500 dark:text-neutral-400 mt-2">
                  {new Date(item.date).getDate()}
                </span>
              </div>
            ))}
          </div>
        </div>

        {/* Top Cards */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            أفضل البطاقات أداءً
          </h2>
          
          <div className="space-y-3">
            {mockAnalytics.topCards.map((card, index) => (
              <div key={card.cardId} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                <div className="flex items-center justify-center w-8 h-8 bg-primary-500 text-white rounded-full text-sm font-bold">
                  {index + 1}
                </div>
                
                <div className="flex-1">
                  <h3 className="font-medium text-neutral-900 dark:text-neutral-100">
                    {card.cardName}
                  </h3>
                  <div className="flex items-center space-x-4 space-x-reverse text-sm text-neutral-600 dark:text-neutral-400">
                    <span>{card.views} مشاهدة</span>
                    <span>{card.shares} مشاركة</span>
                    <span>{card.clicks} نقرة</span>
                  </div>
                </div>
                
                <div className="text-right">
                  <div className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                    {((card.views / stats[0].value) * 100).toFixed(1)}%
                  </div>
                  <div className="w-20 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full mt-1">
                    <div 
                      className="h-full bg-primary-500 rounded-full"
                      style={{ width: `${(card.views / stats[0].value) * 100}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Demographics */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            التوزيع الجغرافي
          </h2>
          
          <div className="space-y-3">
            {Object.entries(mockAnalytics.demographics.countries).map(([country, percentage]) => (
              <div key={country} className="flex items-center justify-between">
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Globe className="w-4 h-4 text-neutral-400" />
                  <span className="text-neutral-900 dark:text-neutral-100">{country}</span>
                </div>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                    {percentage}%
                  </span>
                  <div className="w-16 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full">
                    <div 
                      className="h-full bg-secondary-500 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Device Types */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            أنواع الأجهزة
          </h2>
          
          <div className="space-y-4">
            {Object.entries(mockAnalytics.demographics.devices).map(([device, percentage]) => (
              <div key={device} className="flex items-center justify-between">
                <span className="text-neutral-900 dark:text-neutral-100">{device}</span>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                    {percentage}%
                  </span>
                  <div className="w-20 h-2 bg-neutral-200 dark:bg-neutral-700 rounded-full">
                    <div 
                      className="h-full bg-accent-500 rounded-full"
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="mt-6 pt-4 border-t border-neutral-200 dark:border-neutral-700">
            <h3 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
              المتصفحات الأكثر استخداماً
            </h3>
            <div className="space-y-2">
              {Object.entries(mockAnalytics.demographics.browsers).slice(0, 3).map(([browser, percentage]) => (
                <div key={browser} className="flex items-center justify-between text-sm">
                  <span className="text-neutral-600 dark:text-neutral-400">{browser}</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">{percentage}%</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      <div className="card">
        <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
          النشاط الأخير
        </h2>
        
        <div className="space-y-3">
          {[
            { action: 'مشاهدة بطاقة', card: 'أحمد محمد السعيد', time: 'منذ دقيقتين', location: 'الرياض، السعودية' },
            { action: 'مسح QR', card: 'بطاقة الشركة', time: 'منذ 5 دقائق', location: 'جدة، السعودية' },
            { action: 'مشاركة بطاقة', card: 'أحمد محمد السعيد', time: 'منذ 10 دقائق', location: 'دبي، الإمارات' },
            { action: 'حفظ جهة اتصال', card: 'بطاقة المؤتمرات', time: 'منذ 15 دقيقة', location: 'الكويت، الكويت' }
          ].map((activity, index) => (
            <div key={index} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              <div className="flex-1">
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {activity.action}
                  </span>
                  <span className="text-neutral-600 dark:text-neutral-400">
                    • {activity.card}
                  </span>
                </div>
                <div className="flex items-center space-x-2 space-x-reverse text-sm text-neutral-500 dark:text-neutral-400">
                  <span>{activity.time}</span>
                  <span>•</span>
                  <span>{activity.location}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default Analytics;


============================================================
FILE: src/pages/Cards.tsx
============================================================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import { 
  Plus, 
  Search, 
  Filter, 
  Eye, 
  Share2, 
  Edit, 
  Trash2,
  QrCode,
  MoreVertical,
  Grid,
  List,
  Copy,
  ExternalLink,
  TrendingUp,
  Users,
  Calendar,
  Star
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Cards = () => {
  const { cards, deleteCard } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'active' | 'inactive'>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [sortBy, setSortBy] = useState<'name' | 'views' | 'created'>('created');

  const filteredCards = cards.filter(card => {
    const matchesSearch = card.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         card.company?.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesFilter = filterStatus === 'all' || 
                         (filterStatus === 'active' && card.isActive) ||
                         (filterStatus === 'inactive' && !card.isActive);
    
    return matchesSearch && matchesFilter;
  }).sort((a, b) => {
    switch (sortBy) {
      case 'name':
        return a.name.localeCompare(b.name);
      case 'views':
        return b.views - a.views;
      case 'created':
        return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
      default:
        return 0;
    }
  });

  const handleDeleteCard = (cardId: string) => {
    if (window.confirm('هل أنت متأكد من حذف هذه البطاقة؟ سيتم حذف جميع البيانات المرتبطة بها.')) {
      deleteCard(cardId);
      toast.success('تم حذف البطاقة بنجاح');
    }
  };

  const handleCopyLink = (cardId: string) => {
    const link = `${window.location.origin}/card/${cardId}`;
    navigator.clipboard.writeText(link);
    toast.success('تم نسخ رابط البطاقة بنجاح!');
  };

  const handleShareCard = async (card: any) => {
    const shareData = {
      title: `بطاقة ${card.name}`,
      text: `تعرف على ${card.name} - ${card.title}`,
      url: `${window.location.origin}/card/${card.id}`
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        handleCopyLink(card.id);
      }
    } else {
      handleCopyLink(card.id);
    }
  };

  const totalViews = cards.reduce((sum, card) => sum + card.views, 0);
  const totalShares = cards.reduce((sum, card) => sum + card.shares, 0);
  const activeCards = cards.filter(card => card.isActive).length;

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
            بطاقاتي الرقمية
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400 mt-1">
            إدارة وتتبع جميع بطاقاتك الرقمية في مكان واحد
          </p>
        </div>
        
        <Link 
          to="/cards/new"
          className="btn-primary flex items-center space-x-2 space-x-reverse shadow-lg hover:shadow-xl transition-shadow"
        >
          <Plus className="w-5 h-5" />
          <span>إنشاء بطاقة جديدة</span>
        </Link>
      </div>

      {/* Stats Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="card bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 border-blue-200 dark:border-blue-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
              <Grid className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-blue-600 dark:text-blue-400">إجمالي البطاقات</p>
              <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">{cards.length}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 border-green-200 dark:border-green-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
              <Eye className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-green-600 dark:text-green-400">إجمالي المشاهدات</p>
              <p className="text-2xl font-bold text-green-900 dark:text-green-100">{totalViews.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-purple-50 to-purple-100 dark:from-purple-900/20 dark:to-purple-800/20 border-purple-200 dark:border-purple-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
              <Share2 className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-purple-600 dark:text-purple-400">إجمالي المشاركات</p>
              <p className="text-2xl font-bold text-purple-900 dark:text-purple-100">{totalShares.toLocaleString()}</p>
            </div>
          </div>
        </div>

        <div className="card bg-gradient-to-r from-orange-50 to-orange-100 dark:from-orange-900/20 dark:to-orange-800/20 border-orange-200 dark:border-orange-800">
          <div className="flex items-center space-x-3 space-x-reverse">
            <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
              <TrendingUp className="w-5 h-5 text-white" />
            </div>
            <div>
              <p className="text-sm font-medium text-orange-600 dark:text-orange-400">البطاقات النشطة</p>
              <p className="text-2xl font-bold text-orange-900 dark:text-orange-100">{activeCards}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Search and Filter */}
      <div className="card">
        <div className="flex flex-col lg:flex-row gap-4">
          <div className="relative flex-1">
            <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
            <input
              type="text"
              placeholder="البحث في البطاقات..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="input-field pr-10"
            />
          </div>
          
          <div className="flex flex-col sm:flex-row gap-3">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as any)}
              className="input-field w-full sm:w-auto"
            >
              <option value="all">جميع البطاقات</option>
              <option value="active">نشطة</option>
              <option value="inactive">غير نشطة</option>
            </select>

            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value as any)}
              className="input-field w-full sm:w-auto"
            >
              <option value="created">الأحدث</option>
              <option value="name">الاسم</option>
              <option value="views">الأكثر مشاهدة</option>
            </select>

            <div className="flex items-center space-x-2 space-x-reverse">
              <button
                onClick={() => setViewMode('grid')}
                className={cn(
                  "p-2 rounded-lg transition-colors",
                  viewMode === 'grid' 
                    ? "bg-blue-500 text-white" 
                    : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
                )}
              >
                <Grid className="w-4 h-4" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={cn(
                  "p-2 rounded-lg transition-colors",
                  viewMode === 'list' 
                    ? "bg-blue-500 text-white" 
                    : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
                )}
              >
                <List className="w-4 h-4" />
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Cards Display */}
      {filteredCards.length === 0 ? (
        <div className="text-center py-16">
          <div className="w-24 h-24 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-6">
            <Plus className="w-12 h-12 text-neutral-400" />
          </div>
          <h3 className="text-xl font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
            {searchTerm || filterStatus !== 'all' ? 'لا توجد نتائج مطابقة' : 'لا توجد بطاقات حتى الآن'}
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-8 max-w-md mx-auto">
            {searchTerm || filterStatus !== 'all' 
              ? 'جرب تغيير معايير البحث أو الفلترة للعثور على البطاقات التي تبحث عنها'
              : 'ابدأ رحلتك الرقمية بإنشاء بطاقتك الأولى الآن'}
          </p>
          <Link 
            to="/cards/new"
            className="btn-primary inline-flex items-center space-x-2 space-x-reverse"
          >
            <Plus className="w-5 h-5" />
            <span>إنشاء بطاقة جديدة</span>
          </Link>
        </div>
      ) : viewMode === 'grid' ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCards.map((card) => (
            <div key={card.id} className="card group hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
              {/* Card Header */}
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3 space-x-reverse flex-1">
                  <div 
                    className="w-14 h-14 rounded-xl flex items-center justify-center shadow-lg"
                    style={{ backgroundColor: card.colors.primary }}
                  >
                    {card.avatar ? (
                      <img 
                        src={card.avatar} 
                        alt={card.name}
                        className="w-14 h-14 rounded-xl object-cover"
                      />
                    ) : (
                      <span className="text-white font-bold text-lg">
                        {card.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-bold text-neutral-900 dark:text-neutral-100 truncate text-lg">
                      {card.name}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400 truncate">
                      {card.title}
                    </p>
                    {card.company && (
                      <p className="text-sm text-neutral-500 dark:text-neutral-500 truncate">
                        {card.company}
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="flex items-center space-x-2 space-x-reverse">
                  <div className={cn(
                    "w-3 h-3 rounded-full",
                    card.isActive ? "bg-green-500" : "bg-neutral-400"
                  )} />
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">
                    {card.isActive ? 'نشطة' : 'غير نشطة'}
                  </span>
                </div>
              </div>

              {/* Stats */}
              <div className="grid grid-cols-3 gap-4 mb-6">
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-blue-500 mb-1">
                    <Eye className="w-4 h-4" />
                    <span className="font-bold">{card.views}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">مشاهدة</span>
                </div>
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-green-500 mb-1">
                    <Share2 className="w-4 h-4" />
                    <span className="font-bold">{card.shares}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">مشاركة</span>
                </div>
                <div className="text-center">
                  <div className="flex items-center justify-center space-x-1 space-x-reverse text-purple-500 mb-1">
                    <Users className="w-4 h-4" />
                    <span className="font-bold">{card.clicks}</span>
                  </div>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400">نقرة</span>
                </div>
              </div>

              {/* Actions */}
              <div className="flex items-center space-x-2 space-x-reverse">
                <Link
                  to={`/cards/${card.id}`}
                  className="flex-1 bg-blue-500 text-white px-4 py-2.5 rounded-lg text-sm font-medium hover:bg-blue-600 transition-colors text-center"
                >
                  عرض البطاقة
                </Link>
                
                <button
                  onClick={() => handleShareCard(card)}
                  className="p-2.5 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  title="مشاركة"
                >
                  <Share2 className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                
                <Link
                  to={`/cards/${card.id}/edit`}
                  className="p-2.5 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  title="تعديل"
                >
                  <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </Link>
                
                <button 
                  onClick={() => handleDeleteCard(card.id)}
                  className="p-2.5 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                  title="حذف"
                >
                  <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                </button>
              </div>

              {/* Created Date */}
              <div className="mt-4 pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <div className="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-400">
                  <span>تم الإنشاء: {new Date(card.createdAt).toLocaleDateString('ar-SA')}</span>
                  <span>آخر تحديث: {new Date(card.updatedAt).toLocaleDateString('ar-SA')}</span>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        /* List View */
        <div className="card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البطاقة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الشركة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المشاهدات
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المشاركات
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الحالة
                  </th>
                  <th className="px-6 py-4 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الإجراءات
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {filteredCards.map((card) => (
                  <tr key={card.id} className="hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-3 space-x-reverse">
                        <div 
                          className="w-10 h-10 rounded-lg flex items-center justify-center"
                          style={{ backgroundColor: card.colors.primary }}
                        >
                          {card.avatar ? (
                            <img 
                              src={card.avatar} 
                              alt={card.name}
                              className="w-10 h-10 rounded-lg object-cover"
                            />
                          ) : (
                            <span className="text-white font-bold text-sm">
                              {card.name.charAt(0)}
                            </span>
                          )}
                        </div>
                        <div>
                          <div className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                            {card.name}
                          </div>
                          <div className="text-sm text-neutral-500 dark:text-neutral-400">
                            {card.title}
                          </div>
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {card.company || '-'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-1 space-x-reverse text-blue-500">
                        <Eye className="w-4 h-4" />
                        <span className="text-sm font-medium">{card.views}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-1 space-x-reverse text-green-500">
                        <Share2 className="w-4 h-4" />
                        <span className="text-sm font-medium">{card.shares}</span>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={cn(
                        "px-3 py-1 text-xs font-medium rounded-full",
                        card.isActive 
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
                      )}>
                        {card.isActive ? 'نشطة' : 'غير نشطة'}
                      </span>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <Link
                          to={`/cards/${card.id}`}
                          className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300"
                        >
                          <Eye className="w-4 h-4" />
                        </Link>
                        <button
                          onClick={() => handleShareCard(card)}
                          className="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300"
                        >
                          <Share2 className="w-4 h-4" />
                        </button>
                        <Link
                          to={`/cards/${card.id}/edit`}
                          className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300"
                        >
                          <Edit className="w-4 h-4" />
                        </Link>
                        <button 
                          onClick={() => handleDeleteCard(card.id)}
                          className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cards;


============================================================
FILE: src/pages/CardView.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { 
  ArrowLeft, 
  Share2, 
  QrCode, 
  Edit, 
  Eye, 
  Download,
  Phone,
  Mail,
  Globe,
  MapPin,
  Calendar,
  MoreVertical
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const CardView = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const { cards } = useStore();
  const [showQR, setShowQR] = useState(false);
  const [showShareMenu, setShowShareMenu] = useState(false);

  const card = cards.find(c => c.id === id);

  useEffect(() => {
    if (!card) {
      toast.error('البطاقة غير موجودة');
      navigate('/cards');
    }
  }, [card, navigate]);

  if (!card) return null;

  const handleShare = async () => {
    const shareData = {
      title: `بطاقة ${card.name}`,
      text: `تعرف على ${card.name} - ${card.title}`,
      url: `${window.location.origin}/card/${card.id}`
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      navigator.clipboard.writeText(shareData.url);
      toast.success('تم نسخ الرابط بنجاح!');
    }
  };

  const handleDownloadVCard = () => {
    const vcard = `BEGIN:VCARD
VERSION:3.0
FN:${card.name}
ORG:${card.company || ''}
TITLE:${card.title}
TEL:${card.phone || ''}
EMAIL:${card.email || ''}
URL:${card.website || ''}
END:VCARD`;

    const blob = new Blob([vcard], { type: 'text/vcard' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${card.name}.vcf`;
    a.click();
    window.URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="max-w-4xl mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4 space-x-reverse">
            <button
              onClick={() => navigate('/cards')}
              className="p-2 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-800 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                {card.name}
              </h1>
              <p className="text-neutral-600 dark:text-neutral-400">
                {card.title}
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3 space-x-reverse">
            <button
              onClick={() => setShowQR(true)}
              className="p-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors"
            >
              <QrCode className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <button
              onClick={handleShare}
              className="p-2 rounded-lg bg-neutral-200 dark:bg-neutral-800 hover:bg-neutral-300 dark:hover:bg-neutral-700 transition-colors"
            >
              <Share2 className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <button
              onClick={() => navigate(`/cards/${card.id}/edit`)}
              className="btn-primary flex items-center space-x-2 space-x-reverse"
            >
              <Edit className="w-4 h-4" />
              <span>تعديل</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Card Preview */}
          <div className="lg:col-span-2">
            <div className="card">
              <div 
                className="bg-gradient-to-br from-white to-neutral-50 dark:from-neutral-800 dark:to-neutral-900 rounded-lg p-8"
                style={{ borderTop: `4px solid ${card.colors.primary}` }}
              >
                {/* Avatar and Basic Info */}
                <div className="text-center mb-6">
                  <div className="w-24 h-24 mx-auto mb-4 rounded-full bg-neutral-200 dark:bg-neutral-700 flex items-center justify-center">
                    {card.avatar ? (
                      <img 
                        src={card.avatar} 
                        alt={card.name}
                        className="w-24 h-24 rounded-full object-cover"
                      />
                    ) : (
                      <span className="text-2xl font-bold text-neutral-600 dark:text-neutral-400">
                        {card.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  
                  <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                    {card.name}
                  </h2>
                  <p className="text-lg text-neutral-600 dark:text-neutral-400 mb-2">
                    {card.title}
                  </p>
                  {card.company && (
                    <p className="text-neutral-500 dark:text-neutral-500">
                      {card.company}
                    </p>
                  )}
                </div>

                {/* Contact Information */}
                <div className="space-y-4 mb-6">
                  {card.phone && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-primary-100 dark:bg-primary-900/20 flex items-center justify-center">
                        <Phone className="w-5 h-5 text-primary-600 dark:text-primary-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">الهاتف</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.phone}</p>
                      </div>
                    </div>
                  )}

                  {card.email && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-secondary-100 dark:bg-secondary-900/20 flex items-center justify-center">
                        <Mail className="w-5 h-5 text-secondary-600 dark:text-secondary-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">البريد الإلكتروني</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.email}</p>
                      </div>
                    </div>
                  )}

                  {card.website && (
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <div className="w-10 h-10 rounded-full bg-accent-100 dark:bg-accent-900/20 flex items-center justify-center">
                        <Globe className="w-5 h-5 text-accent-600 dark:text-accent-400" />
                      </div>
                      <div>
                        <p className="text-sm text-neutral-500 dark:text-neutral-400">الموقع الإلكتروني</p>
                        <p className="text-neutral-900 dark:text-neutral-100">{card.website}</p>
                      </div>
                    </div>
                  )}
                </div>

                {/* Social Links */}
                {card.socialLinks.length > 0 && (
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      التواصل الاجتماعي
                    </h3>
                    <div className="flex flex-wrap gap-3">
                      {card.socialLinks.map((link) => (
                        <a
                          key={link.id}
                          href={link.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="flex items-center space-x-2 space-x-reverse px-4 py-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                        >
                          <span className="text-sm font-medium text-neutral-700 dark:text-neutral-300">
                            {link.platform}
                          </span>
                        </a>
                      ))}
                    </div>
                  </div>
                )}

                {/* Custom Fields */}
                {card.customFields.length > 0 && (
                  <div className="mb-6">
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      معلومات إضافية
                    </h3>
                    <div className="space-y-3">
                      {card.customFields.map((field) => (
                        <div key={field.id} className="flex justify-between">
                          <span className="text-neutral-600 dark:text-neutral-400">{field.label}:</span>
                          <span className="text-neutral-900 dark:text-neutral-100">{field.value}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3">
                  <button
                    onClick={handleDownloadVCard}
                    className="btn-primary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                  >
                    <Download className="w-4 h-4" />
                    <span>حفظ جهة الاتصال</span>
                  </button>
                  <button
                    onClick={handleShare}
                    className="btn-secondary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                  >
                    <Share2 className="w-4 h-4" />
                    <span>مشاركة البطاقة</span>
                  </button>
                </div>
              </div>
            </div>
          </div>

          {/* Statistics */}
          <div className="space-y-6">
            <div className="card">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                إحصائيات البطاقة
              </h3>
              
              <div className="space-y-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Eye className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">المشاهدات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.views}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Share2 className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">المشاركات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.shares}
                  </span>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-2 space-x-reverse">
                    <Phone className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">النقرات</span>
                  </div>
                  <span className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    {card.clicks}
                  </span>
                </div>
              </div>
            </div>

            <div className="card">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                معلومات البطاقة
              </h3>
              
              <div className="space-y-3 text-sm">
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">تاريخ الإنشاء:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(card.createdAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">آخر تحديث:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(card.updatedAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">الحالة:</span>
                  <span className={cn(
                    "px-2 py-1 rounded-full text-xs font-medium",
                    card.isActive 
                      ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                      : "bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400"
                  )}>
                    {card.isActive ? 'نشطة' : 'غير نشطة'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* QR Code Modal */}
      {showQR && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-sm w-full">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                رمز QR للبطاقة
              </h3>
              
              <div className="w-48 h-48 bg-neutral-100 dark:bg-neutral-800 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <QrCode className="w-24 h-24 text-neutral-400" />
              </div>
              
              <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                امسح هذا الرمز للوصول إلى البطاقة
              </p>
              
              <button
                onClick={() => setShowQR(false)}
                className="btn-primary w-full"
              >
                إغلاق
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CardView;


============================================================
FILE: src/pages/Contacts.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  Filter, 
  Plus, 
  User, 
  Mail, 
  Phone, 
  Building,
  Tag,
  MoreVertical,
  Edit,
  Trash2,
  Download,
  Upload,
  Eye,
  Grid,
  List,
  FileText,
  MessageCircle,
  X
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Contact } from '../types';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Contacts = () => {
  const { contacts, deleteContact } = useStore();
  const [searchTerm, setSearchTerm] = useState('');
  const [filterSource, setFilterSource] = useState<string>('all');
  const [filterTag, setFilterTag] = useState<string>('all');
  const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid');
  const [selectedContacts, setSelectedContacts] = useState<string[]>([]);
  const [showContactModal, setShowContactModal] = useState(false);
  const [selectedContact, setSelectedContact] = useState<Contact | null>(null);

  const filteredContacts = contacts.filter(contact => {
    const matchesSearch = 
      contact.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.company?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      contact.phone?.includes(searchTerm);
    
    const matchesSource = filterSource === 'all' || contact.source === filterSource;
    const matchesTag = filterTag === 'all' || contact.tags.includes(filterTag);
    
    return matchesSearch && matchesSource && matchesTag;
  });

  const allTags = Array.from(new Set(contacts.flatMap(contact => contact.tags)));

  const handleDeleteContact = (contactId: string) => {
    if (window.confirm('هل أنت متأكد من حذف جهة الاتصال هذه؟')) {
      deleteContact(contactId);
      toast.success('تم حذف جهة الاتصال بنجاح');
    }
  };

  const handleBulkDelete = () => {
    if (selectedContacts.length === 0) return;
    
    if (window.confirm(`هل أنت متأكد من حذف ${selectedContacts.length} جهة اتصال؟`)) {
      selectedContacts.forEach(id => deleteContact(id));
      setSelectedContacts([]);
      toast.success('تم حذف جهات الاتصال المحددة');
    }
  };

  const handleExportContacts = () => {
    const csvContent = [
      ['الاسم', 'البريد الإلكتروني', 'الهاتف', 'الشركة', 'المنصب', 'المصدر', 'التاغات', 'تاريخ الإضافة'],
      ...filteredContacts.map(contact => [
        contact.name,
        contact.email || '',
        contact.phone || '',
        contact.company || '',
        contact.position || '',
        contact.source,
        contact.tags.join(', '),
        new Date(contact.createdAt).toLocaleDateString('ar-SA')
      ])
    ].map(row => row.join(',')).join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = `contacts-${new Date().toISOString().split('T')[0]}.csv`;
    link.click();
    toast.success('تم تصدير جهات الاتصال بنجاح');
  };

  const toggleContactSelection = (contactId: string) => {
    setSelectedContacts(prev => 
      prev.includes(contactId) 
        ? prev.filter(id => id !== contactId)
        : [...prev, contactId]
    );
  };

  const selectAllContacts = () => {
    if (selectedContacts.length === filteredContacts.length) {
      setSelectedContacts([]);
    } else {
      setSelectedContacts(filteredContacts.map(c => c.id));
    }
  };

  const getSourceBadgeColor = (source: string) => {
    switch (source) {
      case 'card': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'qr': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'nfc': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'manual': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
      case 'import': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';
      case 'scan': return 'bg-teal-100 text-teal-800 dark:bg-teal-900/20 dark:text-teal-400';
      default: return 'bg-neutral-100 text-neutral-800 dark:bg-neutral-900/20 dark:text-neutral-400';
    }
  };

  const getSourceText = (source: string) => {
    switch (source) {
      case 'card': return 'من البطاقة';
      case 'qr': return 'من QR';
      case 'nfc': return 'من NFC';
      case 'manual': return 'يدوي';
      case 'import': return 'مستورد';
      case 'scan': return 'مسح ضوئي';
      default: return source;
    }
  };

  const handleContactClick = (contact: Contact) => {
    setSelectedContact(contact);
    setShowContactModal(true);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            جهات الاتصال
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            إدارة جميع جهات الاتصال المحفوظة ({filteredContacts.length} من {contacts.length})
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
            <Upload className="w-4 h-4" />
            <span>استيراد</span>
          </button>
          <button 
            onClick={handleExportContacts}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Download className="w-4 h-4" />
            <span>تصدير</span>
          </button>
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة جهة اتصال</span>
          </button>
        </div>
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
          <input
            type="text"
            placeholder="البحث في جهات الاتصال..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10"
          />
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4">
          <select
            value={filterSource}
            onChange={(e) => setFilterSource(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع المصادر</option>
            <option value="card">من البطاقة</option>
            <option value="qr">من QR</option>
            <option value="nfc">من NFC</option>
            <option value="manual">يدوي</option>
            <option value="import">مستورد</option>
            <option value="scan">مسح ضوئي</option>
          </select>

          <select
            value={filterTag}
            onChange={(e) => setFilterTag(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع التاغات</option>
            {allTags.map((tag) => (
              <option key={tag} value={tag}>{tag}</option>
            ))}
          </select>

          <div className="flex items-center space-x-2 space-x-reverse">
            <button
              onClick={() => setViewMode('grid')}
              className={cn(
                "p-2 rounded-lg transition-colors",
                viewMode === 'grid' 
                  ? "bg-primary-500 text-white" 
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
              )}
            >
              <Grid className="w-4 h-4" />
            </button>
            <button
              onClick={() => setViewMode('list')}
              className={cn(
                "p-2 rounded-lg transition-colors",
                viewMode === 'list' 
                  ? "bg-primary-500 text-white" 
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400"
              )}
            >
              <List className="w-4 h-4" />
            </button>
          </div>
        </div>
      </div>

      {/* Bulk Actions */}
      {selectedContacts.length > 0 && (
        <div className="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-4">
          <div className="flex items-center justify-between">
            <span className="text-primary-700 dark:text-primary-300">
              تم تحديد {selectedContacts.length} جهة اتصال
            </span>
            <div className="flex items-center space-x-2 space-x-reverse">
              <button
                onClick={handleBulkDelete}
                className="text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300 px-3 py-1 rounded-lg hover:bg-red-100 dark:hover:bg-red-900/20 transition-colors"
              >
                حذف المحدد
              </button>
              <button
                onClick={() => setSelectedContacts([])}
                className="text-neutral-600 hover:text-neutral-700 dark:text-neutral-400 dark:hover:text-neutral-300 px-3 py-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors"
              >
                إلغاء التحديد
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Contacts Display */}
      {filteredContacts.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <User className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            {searchTerm || filterSource !== 'all' || filterTag !== 'all' 
              ? 'لا توجد نتائج مطابقة' 
              : 'لا توجد جهات اتصال'}
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            {searchTerm || filterSource !== 'all' || filterTag !== 'all'
              ? 'جرب تغيير معايير البحث أو الفلترة'
              : 'ابدأ بإضافة جهات اتصال أو استيرادها من ملف'}
          </p>
          <button className="btn-primary inline-flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة جهة اتصال جديدة</span>
          </button>
        </div>
      ) : viewMode === 'grid' ? (
        /* Grid View */
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredContacts.map((contact) => (
            <div key={contact.id} className="card group hover:shadow-lg transition-shadow">
              <div className="flex items-start justify-between mb-4">
                <div className="flex items-center space-x-3 space-x-reverse flex-1">
                  <input
                    type="checkbox"
                    checked={selectedContacts.includes(contact.id)}
                    onChange={() => toggleContactSelection(contact.id)}
                    className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                  />
                  <div 
                    className="w-12 h-12 bg-primary-500 rounded-full flex items-center justify-center cursor-pointer"
                    onClick={() => handleContactClick(contact)}
                  >
                    {contact.avatar ? (
                      <img 
                        src={contact.avatar} 
                        alt={contact.name}
                        className="w-12 h-12 rounded-full object-cover"
                      />
                    ) : (
                      <span className="text-white font-bold">
                        {contact.name.charAt(0)}
                      </span>
                    )}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 
                      className="font-semibold text-neutral-900 dark:text-neutral-100 truncate cursor-pointer hover:text-primary-500"
                      onClick={() => handleContactClick(contact)}
                    >
                      {contact.name}
                    </h3>
                    {contact.position && (
                      <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                        {contact.position}
                      </p>
                    )}
                    {contact.company && (
                      <p className="text-xs text-neutral-500 dark:text-neutral-500 truncate">
                        {contact.company}
                      </p>
                    )}
                  </div>
                </div>
                
                <div className="relative">
                  <button className="p-1 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-colors">
                    <MoreVertical className="w-4 h-4 text-neutral-400" />
                  </button>
                </div>
              </div>

              <div className="space-y-2 mb-4">
                {contact.email && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Mail className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400 truncate">
                      {contact.email}
                    </span>
                  </div>
                )}
                {contact.phone && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Phone className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400">
                      {contact.phone}
                    </span>
                  </div>
                )}
                {contact.company && !contact.position && (
                  <div className="flex items-center space-x-2 space-x-reverse text-sm">
                    <Building className="w-4 h-4 text-neutral-400" />
                    <span className="text-neutral-600 dark:text-neutral-400 truncate">
                      {contact.company}
                    </span>
                  </div>
                )}
              </div>
              
              {contact.tags.length > 0 && (
                <div className="flex flex-wrap gap-1 mb-3">
                  {contact.tags.slice(0, 3).map((tag, tagIndex) => (
                    <span
                      key={tagIndex}
                      className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                    >
                      {tag}
                    </span>
                  ))}
                  {contact.tags.length > 3 && (
                    <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                      +{contact.tags.length - 3}
                    </span>
                  )}
                </div>
              )}

              <div className="flex items-center justify-between text-xs text-neutral-500 dark:text-neutral-400 mb-3">
                <span className={cn("px-2 py-1 rounded-full text-xs", getSourceBadgeColor(contact.source))}>
                  {getSourceText(contact.source)}
                </span>
                <span>{new Date(contact.createdAt).toLocaleDateString('ar-SA')}</span>
              </div>

              <div className="flex items-center space-x-2 space-x-reverse">
                <button 
                  onClick={() => handleContactClick(contact)}
                  className="flex-1 bg-primary-500 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-primary-600 transition-colors"
                >
                  عرض
                </button>
                <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                  <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                  <MessageCircle className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                </button>
                <button 
                  onClick={() => handleDeleteContact(contact.id)}
                  className="p-2 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                >
                  <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                </button>
              </div>
            </div>
          ))}
        </div>
      ) : (
        /* List View */
        <div className="card overflow-hidden">
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    <input
                      type="checkbox"
                      checked={selectedContacts.length === filteredContacts.length && filteredContacts.length > 0}
                      onChange={selectAllContacts}
                      className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                    />
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الاسم
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البريد الإلكتروني
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الهاتف
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الشركة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المصدر
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    التاغات
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الإجراءات
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {filteredContacts.map((contact) => (
                  <tr key={contact.id} className="hover:bg-neutral-50 dark:hover:bg-neutral-800">
                    <td className="px-4 py-4 whitespace-nowrap">
                      <input
                        type="checkbox"
                        checked={selectedContacts.includes(contact.id)}
                        onChange={() => toggleContactSelection(contact.id)}
                        className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                      />
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex items-center space-x-3 space-x-reverse">
                        <div className="w-8 h-8 bg-primary-500 rounded-full flex items-center justify-center">
                          {contact.avatar ? (
                            <img 
                              src={contact.avatar} 
                              alt={contact.name}
                              className="w-8 h-8 rounded-full object-cover"
                            />
                          ) : (
                            <span className="text-white text-xs font-bold">
                              {contact.name.charAt(0)}
                            </span>
                          )}
                        </div>
                        <div>
                          <div 
                            className="text-sm font-medium text-neutral-900 dark:text-neutral-100 cursor-pointer hover:text-primary-500"
                            onClick={() => handleContactClick(contact)}
                          >
                            {contact.name}
                          </div>
                          {contact.position && (
                            <div className="text-sm text-neutral-500 dark:text-neutral-400">
                              {contact.position}
                            </div>
                          )}
                        </div>
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.email || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.phone || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {contact.company || '-'}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={cn("px-2 py-1 text-xs rounded-full", getSourceBadgeColor(contact.source))}>
                        {getSourceText(contact.source)}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <div className="flex flex-wrap gap-1">
                        {contact.tags.slice(0, 2).map((tag, tagIndex) => (
                          <span
                            key={tagIndex}
                            className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                          >
                            {tag}
                          </span>
                        ))}
                        {contact.tags.length > 2 && (
                          <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                            +{contact.tags.length - 2}
                          </span>
                        )}
                      </div>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm font-medium">
                      <div className="flex items-center space-x-2 space-x-reverse">
                        <button 
                          onClick={() => handleContactClick(contact)}
                          className="text-primary-600 hover:text-primary-900 dark:text-primary-400 dark:hover:text-primary-300"
                        >
                          <Eye className="w-4 h-4" />
                        </button>
                        <button className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300">
                          <Edit className="w-4 h-4" />
                        </button>
                        <button className="text-neutral-600 hover:text-neutral-900 dark:text-neutral-400 dark:hover:text-neutral-300">
                          <MessageCircle className="w-4 h-4" />
                        </button>
                        <button 
                          onClick={() => handleDeleteContact(contact.id)}
                          className="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-300"
                        >
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Contact Details Modal */}
      {showContactModal && selectedContact && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-md w-full max-h-[80vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                تفاصيل جهة الاتصال
              </h3>
              <button
                onClick={() => setShowContactModal(false)}
                className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="space-y-4">
              {/* Avatar and Name */}
              <div className="text-center">
                <div className="w-20 h-20 bg-primary-500 rounded-full flex items-center justify-center mx-auto mb-3">
                  {selectedContact.avatar ? (
                    <img 
                      src={selectedContact.avatar} 
                      alt={selectedContact.name}
                      className="w-20 h-20 rounded-full object-cover"
                    />
                  ) : (
                    <span className="text-white font-bold text-xl">
                      {selectedContact.name.charAt(0)}
                    </span>
                  )}
                </div>
                <h4 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                  {selectedContact.name}
                </h4>
                {selectedContact.position && (
                  <p className="text-neutral-600 dark:text-neutral-400">
                    {selectedContact.position}
                  </p>
                )}
                {selectedContact.company && (
                  <p className="text-sm text-neutral-500 dark:text-neutral-500">
                    {selectedContact.company}
                  </p>
                )}
              </div>

              {/* Contact Information */}
              <div className="space-y-3">
                {selectedContact.email && (
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <Mail className="w-5 h-5 text-neutral-400" />
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.email}
                    </span>
                  </div>
                )}
                {selectedContact.phone && (
                  <div className="flex items-center space-x-3 space-x-reverse">
                    <Phone className="w-5 h-5 text-neutral-400" />
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.phone}
                    </span>
                  </div>
                )}
              </div>

              {/* Tags */}
              {selectedContact.tags.length > 0 && (
                <div>
                  <h5 className="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                    التاغات
                  </h5>
                  <div className="flex flex-wrap gap-2">
                    {selectedContact.tags.map((tag, index) => (
                      <span
                        key={index}
                        className="px-2 py-1 text-xs bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                      >
                        {tag}
                      </span>
                    ))}
                  </div>
                </div>
              )}

              {/* Notes */}
              {selectedContact.notes && (
                <div>
                  <h5 className="text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                    ملاحظات
                  </h5>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 bg-neutral-50 dark:bg-neutral-800 p-3 rounded-lg">
                    {selectedContact.notes}
                  </p>
                </div>
              )}

              {/* Source and Date */}
              <div className="pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <div className="flex justify-between text-sm">
                  <span className="text-neutral-500 dark:text-neutral-400">المصدر:</span>
                  <span className={cn("px-2 py-1 rounded-full text-xs", getSourceBadgeColor(selectedContact.source))}>
                    {getSourceText(selectedContact.source)}
                  </span>
                </div>
                <div className="flex justify-between text-sm mt-2">
                  <span className="text-neutral-500 dark:text-neutral-400">تاريخ الإضافة:</span>
                  <span className="text-neutral-900 dark:text-neutral-100">
                    {new Date(selectedContact.createdAt).toLocaleDateString('ar-SA')}
                  </span>
                </div>
                {selectedContact.interactionCount > 0 && (
                  <div className="flex justify-between text-sm mt-2">
                    <span className="text-neutral-500 dark:text-neutral-400">عدد التفاعلات:</span>
                    <span className="text-neutral-900 dark:text-neutral-100">
                      {selectedContact.interactionCount}
                    </span>
                  </div>
                )}
              </div>

              {/* Action Buttons */}
              <div className="flex space-x-3 space-x-reverse pt-4">
                <button className="flex-1 btn-primary">
                  تعديل
                </button>
                <button className="flex-1 btn-secondary">
                  مراسلة
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Contacts;


============================================================
FILE: src/pages/CreateCard.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { 
  User, 
  Mail, 
  Phone, 
  Globe, 
  Building, 
  Camera, 
  Plus, 
  X,
  Palette,
  Eye,
  Save,
  Upload,
  Link,
  Trash2,
  ArrowLeft,
  Check
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Card, SocialLink, CustomField } from '../types';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

interface CardForm {
  name: string;
  title: string;
  company?: string;
  phone?: string;
  email?: string;
  website?: string;
  avatar?: string;
  template: string;
  colors: {
    primary: string;
    secondary: string;
    background: string;
    text: string;
  };
}

const CreateCard = () => {
  const navigate = useNavigate();
  const { addCard } = useStore();
  const [socialLinks, setSocialLinks] = useState<Omit<SocialLink, 'id'>[]>([]);
  const [customFields, setCustomFields] = useState<Omit<CustomField, 'id'>[]>([]);
  const [previewMode, setPreviewMode] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const { register, handleSubmit, watch, setValue, formState: { errors } } = useForm<CardForm>({
    defaultValues: {
      template: 'modern',
      colors: {
        primary: '#1D4ED8',
        secondary: '#00D1B2',
        background: '#FFFFFF',
        text: '#2D2D2D'
      }
    }
  });

  const watchedValues = watch();

  const templates = [
    { id: 'modern', name: 'عصري', preview: '/templates/modern.png' },
    { id: 'classic', name: 'كلاسيكي', preview: '/templates/classic.png' },
    { id: 'creative', name: 'إبداعي', preview: '/templates/creative.png' },
    { id: 'corporate', name: 'مؤسسي', preview: '/templates/corporate.png' },
    { id: 'minimal', name: 'بسيط', preview: '/templates/minimal.png' }
  ];

  const socialPlatforms = [
    { id: 'linkedin', name: 'LinkedIn', icon: 'linkedin', placeholder: 'https://linkedin.com/in/username' },
    { id: 'twitter', name: 'Twitter', icon: 'twitter', placeholder: 'https://twitter.com/username' },
    { id: 'instagram', name: 'Instagram', icon: 'instagram', placeholder: 'https://instagram.com/username' },
    { id: 'facebook', name: 'Facebook', icon: 'facebook', placeholder: 'https://facebook.com/username' },
    { id: 'github', name: 'GitHub', icon: 'github', placeholder: 'https://github.com/username' },
    { id: 'youtube', name: 'YouTube', icon: 'youtube', placeholder: 'https://youtube.com/@username' },
    { id: 'whatsapp', name: 'WhatsApp', icon: 'whatsapp', placeholder: 'https://wa.me/966501234567' },
    { id: 'telegram', name: 'Telegram', icon: 'telegram', placeholder: 'https://t.me/username' }
  ];

  const addSocialLink = () => {
    setSocialLinks([...socialLinks, {
      platform: '',
      url: '',
      icon: '',
      isVisible: true,
      order: socialLinks.length + 1
    }]);
  };

  const removeSocialLink = (index: number) => {
    setSocialLinks(socialLinks.filter((_, i) => i !== index));
  };

  const updateSocialLink = (index: number, field: string, value: string) => {
    const updated = [...socialLinks];
    updated[index] = { ...updated[index], [field]: value };
    
    if (field === 'platform') {
      const platform = socialPlatforms.find(p => p.id === value);
      if (platform) {
        updated[index].icon = platform.icon;
      }
    }
    
    setSocialLinks(updated);
  };

  const addCustomField = () => {
    setCustomFields([...customFields, {
      label: '',
      value: '',
      type: 'text',
      isVisible: true,
      order: customFields.length + 1
    }]);
  };

  const removeCustomField = (index: number) => {
    setCustomFields(customFields.filter((_, i) => i !== index));
  };

  const updateCustomField = (index: number, field: string, value: string) => {
    const updated = [...customFields];
    updated[index] = { ...updated[index], [field]: value };
    setCustomFields(updated);
  };

  const onSubmit = async (data: CardForm) => {
    setIsLoading(true);
    
    try {
      const newCard: Omit<Card, 'id' | 'createdAt' | 'updatedAt'> = {
        userId: '1', // سيتم تحديثه من المستخدم الحالي
        name: data.name,
        title: data.title,
        company: data.company,
        phone: data.phone,
        email: data.email,
        website: data.website,
        avatar: data.avatar,
        nfcEnabled: false,
        isActive: true,
        views: 0,
        shares: 0,
        clicks: 0,
        template: data.template,
        colors: data.colors,
        socialLinks: socialLinks.map((link, index) => ({
          ...link,
          id: `social_${index + 1}`
        })),
        customFields: customFields.map((field, index) => ({
          ...field,
          id: `custom_${index + 1}`
        }))
      };

      addCard(newCard);
      toast.success('تم إنشاء البطاقة بنجاح! 🎉');
      navigate('/cards');
    } catch (error) {
      toast.error('حدث خطأ أثناء إنشاء البطاقة');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-neutral-50 dark:bg-neutral-900">
      <div className="max-w-6xl mx-auto p-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-8">
          <div className="flex items-center space-x-4 space-x-reverse">
            <button
              onClick={() => navigate('/cards')}
              className="p-2 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-800 transition-colors"
            >
              <ArrowLeft className="w-5 h-5 text-neutral-600 dark:text-neutral-400" />
            </button>
            <div>
              <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                إنشاء بطاقة جديدة
              </h1>
              <p className="text-neutral-600 dark:text-neutral-400">
                أنشئ بطاقتك الرقمية الاحترافية في دقائق
              </p>
            </div>
          </div>

          <div className="flex items-center space-x-3 space-x-reverse">
            <button
              type="button"
              onClick={() => setPreviewMode(!previewMode)}
              className={cn(
                "flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg transition-colors",
                previewMode
                  ? "bg-secondary-500 text-white"
                  : "bg-neutral-200 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300"
              )}
            >
              <Eye className="w-4 h-4" />
              <span>معاينة</span>
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Form Section */}
          <div className="space-y-6">
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-6">
              {/* Basic Information */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  المعلومات الأساسية
                </h2>
                
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الاسم الكامل *
                    </label>
                    <div className="relative">
                      <User className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('name', { required: 'الاسم مطلوب' })}
                        className="input-field pr-10"
                        placeholder="أدخل اسمك الكامل"
                      />
                    </div>
                    {errors.name && (
                      <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      المسمى الوظيفي *
                    </label>
                    <input
                      {...register('title', { required: 'المسمى الوظيفي مطلوب' })}
                      className="input-field"
                      placeholder="مثال: مطور تطبيقات"
                    />
                    {errors.title && (
                      <p className="text-red-500 text-sm mt-1">{errors.title.message}</p>
                    )}
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الشركة
                    </label>
                    <div className="relative">
                      <Building className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('company')}
                        className="input-field pr-10"
                        placeholder="اسم الشركة أو المؤسسة"
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        رقم الهاتف
                      </label>
                      <div className="relative">
                        <Phone className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          {...register('phone')}
                          className="input-field pr-10"
                          placeholder="+966501234567"
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        البريد الإلكتروني
                      </label>
                      <div className="relative">
                        <Mail className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          {...register('email')}
                          type="email"
                          className="input-field pr-10"
                          placeholder="example@domain.com"
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الموقع الإلكتروني
                    </label>
                    <div className="relative">
                      <Globe className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        {...register('website')}
                        className="input-field pr-10"
                        placeholder="https://example.com"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Profile Image */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  الصورة الشخصية
                </h2>
                
                <div className="flex items-center space-x-4 space-x-reverse">
                  <div className="w-20 h-20 bg-neutral-200 dark:bg-neutral-800 rounded-full flex items-center justify-center">
                    {watchedValues.avatar ? (
                      <img 
                        src={watchedValues.avatar} 
                        alt="Profile"
                        className="w-20 h-20 rounded-full object-cover"
                      />
                    ) : (
                      <Camera className="w-8 h-8 text-neutral-400" />
                    )}
                  </div>
                  
                  <div className="flex-1">
                    <button
                      type="button"
                      className="btn-secondary flex items-center space-x-2 space-x-reverse"
                    >
                      <Upload className="w-4 h-4" />
                      <span>رفع صورة</span>
                    </button>
                    <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                      PNG أو JPG، الحد الأقصى 2MB
                    </p>
                  </div>
                </div>
              </div>

              {/* Template Selection */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  اختيار القالب
                </h2>
                
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                  {templates.map((template) => (
                    <div
                      key={template.id}
                      className={cn(
                        "relative p-4 rounded-lg border-2 cursor-pointer transition-all",
                        watchedValues.template === template.id
                          ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                          : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600"
                      )}
                      onClick={() => setValue('template', template.id)}
                    >
                      <div className="aspect-square bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-2 flex items-center justify-center">
                        <span className="text-xs text-neutral-500">معاينة</span>
                      </div>
                      <p className="text-sm font-medium text-center text-neutral-700 dark:text-neutral-300">
                        {template.name}
                      </p>
                      {watchedValues.template === template.id && (
                        <div className="absolute top-2 right-2 w-5 h-5 bg-primary-500 rounded-full flex items-center justify-center">
                          <Check className="w-3 h-3 text-white" />
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              </div>

              {/* Color Customization */}
              <div className="card">
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  تخصيص الألوان
                </h2>
                
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللون الأساسي
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="color"
                        {...register('colors.primary')}
                        className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                      />
                      <input
                        type="text"
                        {...register('colors.primary')}
                        className="input-field flex-1"
                        placeholder="#1D4ED8"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللون الثانوي
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="color"
                        {...register('colors.secondary')}
                        className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                      />
                      <input
                        type="text"
                        {...register('colors.secondary')}
                        className="input-field flex-1"
                        placeholder="#00D1B2"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Social Links */}
              <div className="card">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    روابط التواصل الاجتماعي
                  </h2>
                  <button
                    type="button"
                    onClick={addSocialLink}
                    className="btn-secondary flex items-center space-x-2 space-x-reverse"
                  >
                    <Plus className="w-4 h-4" />
                    <span>إضافة رابط</span>
                  </button>
                </div>

                <div className="space-y-3">
                  {socialLinks.map((link, index) => (
                    <div key={index} className="flex items-center space-x-3 space-x-reverse p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                      <select
                        value={link.platform}
                        onChange={(e) => updateSocialLink(index, 'platform', e.target.value)}
                        className="input-field w-32"
                      >
                        <option value="">اختر المنصة</option>
                        {socialPlatforms.map((platform) => (
                          <option key={platform.id} value={platform.id}>
                            {platform.name}
                          </option>
                        ))}
                      </select>
                      
                      <input
                        type="url"
                        value={link.url}
                        onChange={(e) => updateSocialLink(index, 'url', e.target.value)}
                        placeholder={socialPlatforms.find(p => p.id === link.platform)?.placeholder || 'أدخل الرابط'}
                        className="input-field flex-1"
                      />
                      
                      <button
                        type="button"
                        onClick={() => removeSocialLink(index)}
                        className="p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  
                  {socialLinks.length === 0 && (
                    <p className="text-center text-neutral-500 dark:text-neutral-400 py-4">
                      لم تتم إضافة أي روابط تواصل اجتماعي بعد
                    </p>
                  )}
                </div>
              </div>

              {/* Custom Fields */}
              <div className="card">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    حقول مخصصة
                  </h2>
                  <button
                    type="button"
                    onClick={addCustomField}
                    className="btn-secondary flex items-center space-x-2 space-x-reverse"
                  >
                    <Plus className="w-4 h-4" />
                    <span>إضافة حقل</span>
                  </button>
                </div>

                <div className="space-y-3">
                  {customFields.map((field, index) => (
                    <div key={index} className="grid grid-cols-12 gap-3 p-3 bg-neutral-50 dark:bg-neutral-800 rounded-lg">
                      <input
                        type="text"
                        value={field.label}
                        onChange={(e) => updateCustomField(index, 'label', e.target.value)}
                        placeholder="اسم الحقل"
                        className="input-field col-span-4"
                      />
                      
                      <input
                        type="text"
                        value={field.value}
                        onChange={(e) => updateCustomField(index, 'value', e.target.value)}
                        placeholder="القيمة"
                        className="input-field col-span-6"
                      />
                      
                      <select
                        value={field.type}
                        onChange={(e) => updateCustomField(index, 'type', e.target.value)}
                        className="input-field col-span-1"
                      >
                        <option value="text">نص</option>
                        <option value="url">رابط</option>
                        <option value="email">إيميل</option>
                        <option value="phone">هاتف</option>
                      </select>
                      
                      <button
                        type="button"
                        onClick={() => removeCustomField(index)}
                        className="col-span-1 p-2 text-red-500 hover:bg-red-100 dark:hover:bg-red-900/20 rounded-lg transition-colors"
                      >
                        <Trash2 className="w-4 h-4" />
                      </button>
                    </div>
                  ))}
                  
                  {customFields.length === 0 && (
                    <p className="text-center text-neutral-500 dark:text-neutral-400 py-4">
                      لم تتم إضافة أي حقول مخصصة بعد
                    </p>
                  )}
                </div>
              </div>

              {/* Submit Button */}
              <div className="flex items-center justify-end space-x-3 space-x-reverse">
                <button
                  type="button"
                  onClick={() => navigate('/cards')}
                  className="px-6 py-3 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  إلغاء
                </button>
                <button
                  type="submit"
                  disabled={isLoading}
                  className="btn-primary flex items-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Save className="w-4 h-4" />
                  <span>{isLoading ? 'جاري الحفظ...' : 'حفظ البطاقة'}</span>
                </button>
              </div>
            </form>
          </div>

          {/* Preview Section */}
          <div className="lg:sticky lg:top-6">
            <div className="card">
              <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                معاينة البطاقة
              </h2>
              
              <div className="bg-gradient-to-br from-neutral-100 to-neutral-200 dark:from-neutral-800 dark:to-neutral-900 rounded-lg p-6 min-h-96">
                {/* Card Preview */}
                <div 
                  className="bg-white dark:bg-neutral-800 rounded-lg p-6 shadow-lg max-w-sm mx-auto"
                  style={{ 
                    borderTop: `4px solid ${watchedValues.colors?.primary || '#1D4ED8'}` 
                  }}
                >
                  {/* Avatar */}
                  <div className="flex justify-center mb-4">
                    <div className="w-20 h-20 bg-neutral-200 dark:bg-neutral-700 rounded-full flex items-center justify-center">
                      {watchedValues.avatar ? (
                        <img 
                          src={watchedValues.avatar} 
                          alt="Profile"
                          className="w-20 h-20 rounded-full object-cover"
                        />
                      ) : (
                        <User className="w-8 h-8 text-neutral-400" />
                      )}
                    </div>
                  </div>

                  {/* Name & Title */}
                  <div className="text-center mb-4">
                    <h3 className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
                      {watchedValues.name || 'اسمك هنا'}
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400">
                      {watchedValues.title || 'المسمى الوظيفي'}
                    </p>
                    {watchedValues.company && (
                      <p className="text-sm text-neutral-500 dark:text-neutral-500">
                        {watchedValues.company}
                      </p>
                    )}
                  </div>

                  {/* Contact Info */}
                  <div className="space-y-2 mb-4">
                    {watchedValues.phone && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Phone className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.phone}</span>
                      </div>
                    )}
                    {watchedValues.email && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Mail className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.email}</span>
                      </div>
                    )}
                    {watchedValues.website && (
                      <div className="flex items-center space-x-2 space-x-reverse text-sm">
                        <Globe className="w-4 h-4 text-neutral-400" />
                        <span className="text-neutral-600 dark:text-neutral-400">{watchedValues.website}</span>
                      </div>
                    )}
                  </div>

                  {/* Social Links Preview */}
                  {socialLinks.length > 0 && (
                    <div className="flex justify-center space-x-3 space-x-reverse mb-4">
                      {socialLinks.slice(0, 4).map((link, index) => (
                        <div
                          key={index}
                          className="w-8 h-8 rounded-full bg-neutral-200 dark:bg-neutral-700 flex items-center justify-center"
                        >
                          <span className="text-xs text-neutral-600 dark:text-neutral-400">
                            {link.platform ? link.platform.charAt(0).toUpperCase() : '?'}
                          </span>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* Action Button */}
                  <button
                    className="w-full py-2 rounded-lg text-white font-medium"
                    style={{ backgroundColor: watchedValues.colors?.primary || '#1D4ED8' }}
                  >
                    حفظ جهة الاتصال
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateCard;


============================================================
FILE: src/pages/CVBuilder.tsx
============================================================
import React, { useState } from 'react';
import { 
  Plus, 
  Download, 
  Eye, 
  Edit, 
  Trash2,
  FileText,
  User,
  Briefcase,
  GraduationCap,
  Award,
  Languages,
  Code,
  Save
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockCV } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const CVBuilder = () => {
  const { user } = useStore();
  const [cvs] = useState([mockCV]);
  const [selectedCV, setSelectedCV] = useState(mockCV);
  const [activeSection, setActiveSection] = useState('personal');

  const sections = [
    { id: 'personal', name: 'المعلومات الشخصية', icon: User },
    { id: 'summary', name: 'الملخص المهني', icon: FileText },
    { id: 'experience', name: 'الخبرات العملية', icon: Briefcase },
    { id: 'education', name: 'التعليم', icon: GraduationCap },
    { id: 'skills', name: 'المهارات', icon: Code },
    { id: 'languages', name: 'اللغات', icon: Languages },
    { id: 'certifications', name: 'الشهادات', icon: Award },
  ];

  const handleDownloadPDF = () => {
    toast.success('جاري تحضير ملف PDF...');
    // هنا سيتم تطبيق تحويل السيرة إلى PDF
  };

  const handlePreview = () => {
    toast('فتح معاينة السيرة الذاتية', {
  icon: 'ℹ️',
  style: {
    background: '#3B82F6',
    color: '#FFFFFF',
  },
}); 
    // هنا سيتم فتح معاينة في نافذة جديدة
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            منشئ السيرة الذاتية
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ سيرة ذاتية احترافية بتصاميم حديثة
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button
            onClick={handlePreview}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Eye className="w-4 h-4" />
            <span>معاينة</span>
          </button>
          <button
            onClick={handleDownloadPDF}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <Download className="w-4 h-4" />
            <span>تحميل PDF</span>
          </button>
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>سيرة جديدة</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="card">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              أقسام السيرة الذاتية
            </h3>
            <nav className="space-y-2">
              {sections.map((section) => (
                <button
                  key={section.id}
                  onClick={() => setActiveSection(section.id)}
                  className={cn(
                    "w-full flex items-center space-x-3 space-x-reverse px-3 py-2 rounded-lg text-sm font-medium transition-colors",
                    activeSection === section.id
                      ? "bg-primary-500 text-white"
                      : "text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                  )}
                >
                  <section.icon className="w-4 h-4" />
                  <span>{section.name}</span>
                </button>
              ))}
            </nav>
          </div>

          {/* CV List */}
          <div className="card mt-6">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              سيرتي الذاتية
            </h3>
            <div className="space-y-3">
              {cvs.map((cv) => (
                <div
                  key={cv.id}
                  className={cn(
                    "p-3 rounded-lg border cursor-pointer transition-colors",
                    selectedCV?.id === cv.id
                      ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 dark:hover:border-neutral-600"
                  )}
                  onClick={() => setSelectedCV(cv)}
                >
                  <h4 className="font-medium text-neutral-900 dark:text-neutral-100 truncate">
                    {cv.title}
                  </h4>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    آخر تحديث: {new Date(cv.updatedAt).toLocaleDateString('ar-SA')}
                  </p>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-3">
          <div className="card">
            {activeSection === 'personal' && (
              <div>
                <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  المعلومات الشخصية
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      الاسم الأول
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.firstName}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اسم العائلة
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.lastName}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      البريد الإلكتروني
                    </label>
                    <input
                      type="email"
                      defaultValue={selectedCV?.personalInfo.email}
                      className="input-field"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رقم الهاتف
                    </label>
                    <input
                      type="tel"
                      defaultValue={selectedCV?.personalInfo.phone}
                      className="input-field"
                    />
                  </div>
                  <div className="md:col-span-2">
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      العنوان
                    </label>
                    <input
                      type="text"
                      defaultValue={selectedCV?.personalInfo.address}
                      className="input-field"
                    />
                  </div>
                </div>
              </div>
            )}

            {activeSection === 'summary' && (
              <div>
                <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                  الملخص المهني
                </h3>
                <textarea
                  rows={6}
                  defaultValue={selectedCV?.summary}
                  className="input-field"
                  placeholder="اكتب ملخصاً مهنياً يبرز خبراتك ومهاراتك..."
                />
              </div>
            )}

            {activeSection === 'experience' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    الخبرات العملية
                  </h3>
                  <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                    <Plus className="w-4 h-4" />
                    <span>إضافة خبرة</span>
                  </button>
                </div>
                
                <div className="space-y-4">
                  {selectedCV?.experience.map((exp, index) => (
                    <div key={exp.id} className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            المسمى الوظيفي
                          </label>
                          <input
                            type="text"
                            defaultValue={exp.position}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            اسم الشركة
                          </label>
                          <input
                            type="text"
                            defaultValue={exp.company}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            تاريخ البداية
                          </label>
                          <input
                            type="date"
                            defaultValue={exp.startDate}
                            className="input-field"
                          />
                        </div>
                        <div>
                          <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                            تاريخ النهاية
                          </label>
                          <input
                            type="date"
                            defaultValue={exp.endDate}
                            className="input-field"
                            disabled={exp.current}
                          />
                        </div>
                      </div>
                      <div className="mb-4">
                        <label className="flex items-center space-x-2 space-x-reverse">
                          <input
                            type="checkbox"
                            defaultChecked={exp.current}
                            className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                          />
                          <span className="text-sm text-neutral-700 dark:text-neutral-300">
                            أعمل حالياً في هذا المنصب
                          </span>
                        </label>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          وصف المهام والإنجازات
                        </label>
                        <textarea
                          rows={3}
                          defaultValue={exp.description}
                          className="input-field"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {activeSection === 'skills' && (
              <div>
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    المهارات
                  </h3>
                  <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                    <Plus className="w-4 h-4" />
                    <span>إضافة مهارة</span>
                  </button>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  {selectedCV?.skills.map((skill, index) => (
                    <div key={skill.id} className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg">
                      <div className="flex items-center justify-between mb-2">
                        <input
                          type="text"
                          defaultValue={skill.name}
                          className="input-field flex-1 mr-2"
                          placeholder="اسم المهارة"
                        />
                        <button className="text-red-500 hover:text-red-700">
                          <Trash2 className="w-4 h-4" />
                        </button>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          مستوى الإتقان
                        </label>
                        <select
                          defaultValue={skill.level}
                          className="input-field"
                        >
                          <option value="beginner">مبتدئ</option>
                          <option value="intermediate">متوسط</option>
                          <option value="advanced">متقدم</option>
                          <option value="expert">خبير</option>
                        </select>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {/* Save Button */}
            <div className="flex justify-end mt-6 pt-6 border-t border-neutral-200 dark:border-neutral-700">
              <button
                onClick={() => toast.success('تم حفظ التغييرات')}
                className="btn-primary flex items-center space-x-2 space-x-reverse"
              >
                <Save className="w-4 h-4" />
                <span>حفظ التغييرات</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CVBuilder;


============================================================
FILE: src/pages/Dashboard.tsx
============================================================
import React from 'react';
import { Link } from 'react-router-dom';
import { 
  CreditCard, 
  Eye, 
  Share2, 
  Plus, 
  TrendingUp,
  Users,
  QrCode,
  BarChart3,
  Calendar,
  ArrowRight,
  Zap,
  Target,
  Award
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';

const Dashboard = () => {
  const { cards, contacts, user, notifications } = useStore();

  const stats = [
    {
      name: 'إجمالي البطاقات',
      value: cards.length,
      icon: CreditCard,
      color: 'bg-blue-500',
      change: '+12%',
      changeType: 'positive'
    },
    {
      name: 'إجمالي المشاهدات',
      value: cards.reduce((sum, card) => sum + card.views, 0),
      icon: Eye,
      color: 'bg-green-500',
      change: '+8%',
      changeType: 'positive'
    },
    {
      name: 'إجمالي المشاركات',
      value: cards.reduce((sum, card) => sum + card.shares, 0),
      icon: Share2,
      color: 'bg-purple-500',
      change: '+15%',
      changeType: 'positive'
    },
    {
      name: 'جهات الاتصال',
      value: contacts.length,
      icon: Users,
      color: 'bg-orange-500',
      change: '+5%',
      changeType: 'positive'
    }
  ];

  const quickActions = [
    {
      name: 'إنشاء بطاقة جديدة',
      description: 'أنشئ بطاقة رقمية احترافية',
      icon: Plus,
      href: '/cards/new',
      color: 'bg-blue-500'
    },
    {
      name: 'مولد QR',
      description: 'أنشئ رمز QR مخصص',
      icon: QrCode,
      href: '/qr-generator',
      color: 'bg-teal-500'
    },
    {
      name: 'مسح البطاقات',
      description: 'امسح بطاقة أو رمز QR',
      icon: Zap,
      href: '/scan',
      color: 'bg-yellow-500'
    },
    {
      name: 'التحليلات',
      description: 'تتبع أداء بطاقاتك',
      icon: BarChart3,
      href: '/analytics',
      color: 'bg-indigo-500'
    }
  ];

  const recentActivity = [
    {
      id: '1',
      type: 'card_view',
      message: 'تم عرض بطاقة "أحمد محمد السعيد" 5 مرات',
      time: 'منذ ساعتين',
      icon: Eye,
      color: 'text-blue-500'
    },
    {
      id: '2',
      type: 'card_share',
      message: 'تم مشاركة بطاقة "بطاقة الشركة"',
      time: 'منذ 4 ساعات',
      icon: Share2,
      color: 'text-green-500'
    },
    {
      id: '3',
      type: 'contact_add',
      message: 'تم إضافة جهة اتصال جديدة "سارة أحمد"',
      time: 'أمس',
      icon: Users,
      color: 'text-purple-500'
    },
    {
      id: '4',
      type: 'qr_scan',
      message: 'تم مسح رمز QR الخاص بك 3 مرات',
      time: 'أمس',
      icon: QrCode,
      color: 'text-orange-500'
    }
  ];

  const unreadNotifications = notifications.filter(n => !n.isRead).length;

  return (
    <div className="space-y-6">
{/* Welcome Section */}
<div className="relative overflow-hidden rounded-2xl p-8 text-white" style={{ background: '#FACC15' }}>
  <div className="relative z-10">
    <div className="flex items-center justify-between">
      <div>
        <h1 className="text-3xl font-bold mb-2">
          مرحباً بعودتك، {user?.name}! 👋
        </h1>
        <p className="text-yellow-100 text-lg">
          بطاقتك الذكية تبدأ من هنا. تحكم بهويتك، شاركها، وتتبع تفاعلها.
        </p>
      </div>
      <div className="hidden lg:block">
        <div className="w-32 h-32 bg-white/10 rounded-full flex items-center justify-center">
          <Award className="w-16 h-16 text-white" />
        </div>
      </div>
    </div>
    
    <div className="mt-6 flex flex-wrap gap-4">
      <div className="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
        <span className="text-sm font-medium">اشتراكك: </span>
        <span className="font-bold">
          {user?.subscription === 'pro' && 'مزيون برو'}
          {user?.subscription === 'free' && 'مزيون الأصيل'}
          {user?.subscription === 'business' && 'مزيون المؤسسي'}
        </span>
      </div>
      {unreadNotifications > 0 && (
        <div className="bg-white/20 backdrop-blur-sm rounded-lg px-4 py-2">
          <span className="text-sm font-medium">{unreadNotifications} إشعار جديد</span>
        </div>
      )}
    </div>
  </div>
  
  {/* Background Pattern */}
  <div className="absolute inset-0 opacity-10">
    <div className="absolute top-4 right-4 w-20 h-20 border-2 border-white rounded-full"></div>
    <div className="absolute bottom-4 left-4 w-16 h-16 border-2 border-white rounded-lg rotate-45"></div>
    <div className="absolute top-1/2 left-1/4 w-12 h-12 border-2 border-white rounded-full"></div>
  </div>
</div>
      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card hover:shadow-lg transition-all duration-200">
            <div className="flex items-center justify-between">
              <div className="flex-1">
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400 mb-1">
                  {stat.name}
                </p>
                <p className="text-3xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
                  {stat.value.toLocaleString()}
                </p>
                <div className="flex items-center">
                  <TrendingUp className="w-4 h-4 text-green-500 ml-1" />
                  <span className={cn(
                    "text-sm font-medium",
                    stat.changeType === 'positive' ? "text-green-600" : "text-red-600"
                  )}>
                    {stat.change}
                  </span>
                  <span className="text-xs text-neutral-500 dark:text-neutral-400 mr-1">
                    من الشهر الماضي
                  </span>
                </div>
              </div>
              <div className={cn("p-4 rounded-xl", stat.color)}>
                <stat.icon className="w-8 h-8 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Quick Actions */}
      <div className="card">
        <div className="flex items-center justify-between mb-6">
          <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
            إجراءات سريعة
          </h2>
          <Target className="w-6 h-6 text-neutral-400" />
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {quickActions.map((action) => (
            <Link
              key={action.name}
              to={action.href}
              className="group p-4 rounded-xl border-2 border-neutral-200 dark:border-neutral-700 hover:border-blue-300 dark:hover:border-blue-600 transition-all duration-200 hover:shadow-md"
            >
              <div className="flex items-center space-x-3 space-x-reverse mb-3">
                <div className={cn("p-2 rounded-lg", action.color)}>
                  <action.icon className="w-5 h-5 text-white" />
                </div>
                <ArrowRight className="w-4 h-4 text-neutral-400 group-hover:text-blue-500 transition-colors" />
              </div>
              <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 mb-1">
                {action.name}
              </h3>
              <p className="text-sm text-neutral-600 dark:text-neutral-400">
                {action.description}
              </p>
            </Link>
          ))}
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Recent Cards */}
        <div className="card">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
              بطاقاتي الأخيرة
            </h2>
            <Link 
              to="/cards" 
              className="text-blue-500 hover:text-blue-600 text-sm font-medium flex items-center space-x-1 space-x-reverse"
            >
              <span>عرض الكل</span>
              <ArrowRight className="w-4 h-4" />
            </Link>
          </div>
          
          <div className="space-y-4">
            {cards.slice(0, 3).map((card) => (
              <div key={card.id} className="flex items-center space-x-4 space-x-reverse p-4 rounded-lg bg-neutral-50 dark:bg-neutral-800 hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors">
                <div className="w-12 h-12 rounded-lg flex items-center justify-center" style={{ backgroundColor: card.colors.primary }}>
                  {card.avatar ? (
                    <img 
                      src={card.avatar} 
                      alt={card.name}
                      className="w-12 h-12 rounded-lg object-cover"
                    />
                  ) : (
                    <CreditCard className="w-6 h-6 text-white" />
                  )}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {card.name}
                  </h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                    {card.title}
                  </p>
                  <div className="flex items-center space-x-4 space-x-reverse text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    <span>{card.views} مشاهدة</span>
                    <span>{card.shares} مشاركة</span>
                  </div>
                </div>
                <div className={cn(
                  "w-3 h-3 rounded-full",
                  card.isActive ? "bg-green-500" : "bg-neutral-400"
                )} />
              </div>
            ))}
          </div>
          
          <Link 
            to="/cards/new"
            className="mt-6 w-full btn-primary flex items-center justify-center space-x-2 space-x-reverse"
          >
            <Plus className="w-5 h-5" />
            <span>أنشئ بطاقة جديدة</span>
          </Link>
        </div>

        {/* Recent Activity */}
        <div className="card">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
              النشاط الأخير
            </h2>
            <Calendar className="w-6 h-6 text-neutral-400" />
          </div>
          
          <div className="space-y-4">
            {recentActivity.map((activity) => (
              <div key={activity.id} className="flex items-start space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center">
                  <activity.icon className={cn("w-5 h-5", activity.color)} />
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm text-neutral-900 dark:text-neutral-100 leading-relaxed">
                    {activity.message}
                  </p>
                  <p className="text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                    {activity.time}
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          <div className="mt-6 pt-4 border-t border-neutral-200 dark:border-neutral-700">
            <Link 
              to="/analytics"
              className="text-blue-500 hover:text-blue-600 text-sm font-medium flex items-center space-x-1 space-x-reverse"
            >
              <span>عرض جميع الأنشطة</span>
              <ArrowRight className="w-4 h-4" />
            </Link>
          </div>
        </div>
      </div>

      {/* Tips Section */}
      <div className="card bg-gradient-to-r from-yellow-50 to-orange-50 dark:from-yellow-900/20 dark:to-orange-900/20 border-yellow-200 dark:border-yellow-800">
        <div className="flex items-start space-x-4 space-x-reverse">
          <div className="w-10 h-10 bg-yellow-500 rounded-full flex items-center justify-center">
            <Zap className="w-5 h-5 text-white" />
          </div>
          <div className="flex-1">
            <h3 className="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">
              💡 نصيحة اليوم
            </h3>
            <p className="text-yellow-700 dark:text-yellow-300 text-sm leading-relaxed">
              شارك بطاقتك عبر رمز QR في المؤتمرات والفعاليات لزيادة شبكة اتصالاتك المهنية بسرعة وفعالية.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;


============================================================
FILE: src/pages/Jobs.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  Filter, 
  Plus, 
  MapPin, 
  Clock, 
  DollarSign,
  Building,
  Users,
  Calendar,
  Eye,
  Edit,
  Trash2,
  Send,
  Bookmark,
  ExternalLink,
  X,
  Briefcase
} from 'lucide-react';
import { useStore } from '../store/useStore';
import type { Job } from '../types';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Jobs = () => {
  const { user } = useStore();
  const [jobs] = useState<Job[]>([
    {
      id: '1',
      title: 'مطور React Frontend محترف',
      company: 'شركة التقنية الحديثة',
      location: 'الرياض، السعودية',
      type: 'full-time',
      description: 'نبحث عن مطور React محترف للانضمام لفريقنا المتنامي وتطوير تطبيقات ويب حديثة ومبتكرة.',
      requirements: [
        'خبرة 3+ سنوات في React وTypeScript',
        'معرفة قوية بـ Redux أو Zustand',
        'خبرة في Git وأدوات CI/CD',
        'فهم عميق لمبادئ UX/UI',
        'إجادة اللغة الإنجليزية'
      ],
      responsibilities: [
        'تطوير واجهات مستخدم تفاعلية',
        'التعاون مع فريق التصميم والباك إند',
        'كتابة كود نظيف وقابل للصيانة',
        'إجراء مراجعات الكود',
        'تحسين أداء التطبيقات'
      ],
      salary: {
        min: 8000,
        max: 15000,
        currency: 'SAR'
      },
      benefits: [
        'تأمين صحي شامل',
        'إجازة سنوية مدفوعة',
        'فرص تطوير مهني',
        'بيئة عمل مرنة'
      ],
      status: 'open',
      postedBy: '1',
      createdAt: '2024-07-01T09:00:00Z',
      updatedAt: '2024-07-08T12:00:00Z',
      applications: [],
      tags: ['react', 'frontend', 'typescript', 'remote-friendly'],
      expiresAt: '2024-08-01T23:59:59Z'
    },
    {
      id: '2',
      title: 'مصمم UI/UX إبداعي',
      company: 'استوديو الإبداع الرقمي',
      location: 'جدة، السعودية',
      type: 'part-time',
      description: 'مطلوب مصمم واجهات مستخدم مبدع لتصميم تجارب رقمية استثنائية.',
      requirements: [
        'خبرة في Figma وAdobe XD',
        'معرفة بمبادئ UX Research',
        'portfolio قوي ومتنوع',
        'فهم للتصميم المتجاوب',
        'مهارات تواصل ممتازة'
      ],
      responsibilities: [
        'تصميم واجهات مستخدم جذابة',
        'إجراء بحوث المستخدمين',
        'إنشاء النماذج الأولية',
        'التعاون مع فريق التطوير'
      ],
      salary: {
        min: 4000,
        max: 8000,
        currency: 'SAR'
      },
      status: 'open',
      postedBy: '1',
      createdAt: '2024-06-25T11:00:00Z',
      updatedAt: '2024-07-05T16:30:00Z',
      applications: [],
      tags: ['design', 'ui', 'ux', 'figma', 'part-time']
    },
    {
      id: '3',
      title: 'مطور Full Stack (Node.js + React)',
      company: 'شركة الحلول التقنية المتكاملة',
      location: 'الدمام، السعودية',
      type: 'full-time',
      description: 'فرصة ممتازة للمطورين الشاملين للعمل على مشاريع متنوعة ومثيرة.',
      requirements: [
        'خبرة 4+ سنوات في Node.js و React',
        'معرفة بقواعد البيانات (MongoDB, PostgreSQL)',
        'خبرة في AWS أو Azure',
        'فهم لمبادئ الأمان السيبراني',
        'خبرة في Docker وKubernetes'
      ],
      responsibilities: [
        'تطوير APIs متكاملة',
        'بناء واجهات مستخدم حديثة',
        'إدارة قواعد البيانات',
        'تطبيق أفضل ممارسات الأمان'
      ],
      salary: {
        min: 12000,
        max: 20000,
        currency: 'SAR'
      },
      status: 'closed',
      postedBy: '1',
      createdAt: '2024-06-30T08:00:00Z',
      updatedAt: '2024-07-07T14:15:00Z',
      applications: [],
      tags: ['fullstack', 'nodejs', 'react', 'aws', 'senior']
    }
  ]);

  const [searchTerm, setSearchTerm] = useState('');
  const [filterType, setFilterType] = useState<string>('all');
  const [filterStatus, setFilterStatus] = useState<string>('all');
  const [selectedJob, setSelectedJob] = useState<Job | null>(null);
  const [showJobModal, setShowJobModal] = useState(false);

  const filteredJobs = jobs.filter(job => {
    const matchesSearch = 
      job.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      job.company.toLowerCase().includes(searchTerm.toLowerCase()) ||
      job.location.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesType = filterType === 'all' || job.type === filterType;
    const matchesStatus = filterStatus === 'all' || job.status === filterStatus;
    
    return matchesSearch && matchesType && matchesStatus;
  });

  const getJobTypeText = (type: string) => {
    switch (type) {
      case 'full-time': return 'دوام كامل';
      case 'part-time': return 'دوام جزئي';
      case 'contract': return 'تعاقد';
      case 'internship': return 'تدريب';
      case 'remote': return 'عن بُعد';
      default: return type;
    }
  };

  const getJobTypeColor = (type: string) => {
    switch (type) {
      case 'full-time': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'part-time': return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-400';
      case 'contract': return 'bg-orange-100 text-orange-800 dark:bg-orange-900/20 dark:text-orange-400';
      case 'internship': return 'bg-purple-100 text-purple-800 dark:bg-purple-900/20 dark:text-purple-400';
      case 'remote': return 'bg-teal-100 text-teal-800 dark:bg-teal-900/20 dark:text-teal-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open': return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400';
      case 'closed': return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-400';
      case 'draft': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
      case 'paused': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-400';
    }
  };

  const handleJobClick = (job: Job) => {
    setSelectedJob(job);
    setShowJobModal(true);
  };

  const handleApplyJob = (jobId: string) => {
    toast.success('تم إرسال طلب التقديم بنجاح!');
    setShowJobModal(false);
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            الوظائف المتاحة
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            اكتشف الفرص الوظيفية المناسبة لك ({filteredJobs.length} وظيفة)
          </p>
        </div>
        
        {user?.role === 'admin' && (
          <button className="btn-primary flex items-center space-x-2 space-x-reverse">
            <Plus className="w-4 h-4" />
            <span>إضافة وظيفة جديدة</span>
          </button>
        )}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col lg:flex-row gap-4">
        <div className="relative flex-1">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-neutral-400" />
          <input
            type="text"
            placeholder="البحث في الوظائف..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10"
          />
        </div>
        
        <div className="flex flex-col sm:flex-row gap-4">
          <select
            value={filterType}
            onChange={(e) => setFilterType(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع الأنواع</option>
            <option value="full-time">دوام كامل</option>
            <option value="part-time">دوام جزئي</option>
            <option value="contract">تعاقد</option>
            <option value="internship">تدريب</option>
            <option value="remote">عن بُعد</option>
          </select>

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="input-field w-full sm:w-auto"
          >
            <option value="all">جميع الحالات</option>
            <option value="open">مفتوحة</option>
            <option value="closed">مغلقة</option>
            <option value="draft">مسودة</option>
            <option value="paused">متوقفة</option>
          </select>
        </div>
      </div>

      {/* Jobs List */}
      {filteredJobs.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <Briefcase className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            لا توجد وظائف متاحة
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            جرب تغيير معايير البحث أو تحقق لاحقاً
          </p>
        </div>
      ) : (
        <div className="space-y-4">
          {filteredJobs.map((job) => (
            <div key={job.id} className="card hover:shadow-lg transition-shadow cursor-pointer" onClick={() => handleJobClick(job)}>
              <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
                <div className="flex-1">
                  <div className="flex items-start justify-between mb-2">
                    <div>
                      <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 hover:text-primary-500">
                        {job.title}
                      </h3>
                      <p className="text-neutral-600 dark:text-neutral-400 flex items-center space-x-2 space-x-reverse">
                        <Building className="w-4 h-4" />
                        <span>{job.company}</span>
                      </p>
                    </div>
                    <div className="flex items-center space-x-2 space-x-reverse">
                      <span className={cn("px-2 py-1 text-xs rounded-full", getJobTypeColor(job.type))}>
                        {getJobTypeText(job.type)}
                      </span>
                      <span className={cn("px-2 py-1 text-xs rounded-full", getStatusColor(job.status))}>
                        {job.status === 'open' && 'مفتوحة'}
                        {job.status === 'closed' && 'مغلقة'}
                        {job.status === 'draft' && 'مسودة'}
                        {job.status === 'paused' && 'متوقفة'}
                      </span>
                    </div>
                  </div>

                  <div className="flex flex-wrap items-center gap-4 text-sm text-neutral-600 dark:text-neutral-400 mb-3">
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <MapPin className="w-4 h-4" />
                      <span>{job.location}</span>
                    </div>
                    {job.salary && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <DollarSign className="w-4 h-4" />
                        <span>{job.salary.min.toLocaleString()} - {job.salary.max.toLocaleString()} {job.salary.currency}</span>
                      </div>
                    )}
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Calendar className="w-4 h-4" />
                      <span>{new Date(job.createdAt).toLocaleDateString('ar-SA')}</span>
                    </div>
                    {job.applications && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <Users className="w-4 h-4" />
                        <span>{job.applications.length} متقدم</span>
                      </div>
                    )}
                  </div>

                  <p className="text-neutral-700 dark:text-neutral-300 line-clamp-2 mb-3">
                    {job.description}
                  </p>

                  {job.tags && job.tags.length > 0 && (
                    <div className="flex flex-wrap gap-2">
                      {job.tags.slice(0, 4).map((tag, index) => (
                        <span
                          key={index}
                          className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                      {job.tags.length > 4 && (
                        <span className="px-2 py-1 text-xs bg-neutral-100 dark:bg-neutral-800 text-neutral-600 dark:text-neutral-400 rounded-full">
                          +{job.tags.length - 4}
                        </span>
                      )}
                    </div>
                  )}
                </div>

                <div className="flex items-center space-x-3 space-x-reverse lg:flex-col lg:space-x-0 lg:space-y-2">
                  {job.status === 'open' && (
                    <button 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleApplyJob(job.id);
                      }}
                      className="btn-primary flex items-center space-x-2 space-x-reverse"
                    >
                      <Send className="w-4 h-4" />
                      <span>تقدم الآن</span>
                    </button>
                  )}
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      toast.success('تم حفظ الوظيفة');
                    }}
                    className="p-2 rounded-lg bg-neutral-100 dark:bg-neutral-800 hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  >
                    <Bookmark className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Job Details Modal */}
      {showJobModal && selectedJob && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg max-w-2xl w-full max-h-[80vh] overflow-y-auto">
            <div className="p-6">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                  {selectedJob.title}
                </h3>
                <button
                  onClick={() => setShowJobModal(false)}
                  className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>

              <div className="space-y-6">
                {/* Job Info */}
                <div>
                  <div className="flex items-center space-x-3 space-x-reverse mb-3">
                    <Building className="w-5 h-5 text-neutral-400" />
                    <span className="text-lg font-medium text-neutral-900 dark:text-neutral-100">
                      {selectedJob.company}
                    </span>
                  </div>
                  
                  <div className="flex flex-wrap gap-4 text-sm text-neutral-600 dark:text-neutral-400">
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <MapPin className="w-4 h-4" />
                      <span>{selectedJob.location}</span>
                    </div>
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Clock className="w-4 h-4" />
                      <span>{getJobTypeText(selectedJob.type)}</span>
                    </div>
                    {selectedJob.salary && (
                      <div className="flex items-center space-x-1 space-x-reverse">
                        <DollarSign className="w-4 h-4" />
                        <span>{selectedJob.salary.min.toLocaleString()} - {selectedJob.salary.max.toLocaleString()} {selectedJob.salary.currency}</span>
                      </div>
                    )}
                    <div className="flex items-center space-x-1 space-x-reverse">
                      <Calendar className="w-4 h-4" />
                      <span>نُشر في {new Date(selectedJob.createdAt).toLocaleDateString('ar-SA')}</span>
                    </div>
                  </div>
                </div>

                {/* Description */}
                <div>
                  <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                    وصف الوظيفة
                  </h4>
                  <p className="text-neutral-700 dark:text-neutral-300 leading-relaxed">
                    {selectedJob.description}
                  </p>
                </div>

                {/* Requirements */}
                {selectedJob.requirements && selectedJob.requirements.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المتطلبات
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.requirements.map((requirement, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-primary-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{requirement}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Responsibilities */}
                {selectedJob.responsibilities && selectedJob.responsibilities.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المسؤوليات
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.responsibilities.map((responsibility, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-secondary-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{responsibility}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Benefits */}
                {selectedJob.benefits && selectedJob.benefits.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المزايا
                    </h4>
                    <ul className="space-y-2">
                      {selectedJob.benefits.map((benefit, index) => (
                        <li key={index} className="flex items-start space-x-2 space-x-reverse">
                          <div className="w-2 h-2 bg-accent-500 rounded-full mt-2 flex-shrink-0"></div>
                          <span className="text-neutral-700 dark:text-neutral-300">{benefit}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                {/* Tags */}
                {selectedJob.tags && selectedJob.tags.length > 0 && (
                  <div>
                    <h4 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-3">
                      المهارات المطلوبة
                    </h4>
                    <div className="flex flex-wrap gap-2">
                      {selectedJob.tags.map((tag, index) => (
                        <span
                          key={index}
                          className="px-3 py-1 text-sm bg-primary-100 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300 rounded-full"
                        >
                          {tag}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-3 pt-4 border-t border-neutral-200 dark:border-neutral-700">
                  {selectedJob.status === 'open' ? (
                    <>
                      <button
                        onClick={() => handleApplyJob(selectedJob.id)}
                        className="btn-primary flex items-center justify-center space-x-2 space-x-reverse flex-1"
                      >
                        <Send className="w-4 h-4" />
                        <span>تقدم للوظيفة الآن</span>
                      </button>
                      <button
                        onClick={() => {
                          toast.success('تم حفظ الوظيفة');
                          setShowJobModal(false);
                        }}
                        className="btn-secondary flex items-center justify-center space-x-2 space-x-reverse"
                      >
                        <Bookmark className="w-4 h-4" />
                        <span>حفظ</span>
                      </button>
                    </>
                  ) : (
                    <div className="text-center py-4">
                      <p className="text-neutral-600 dark:text-neutral-400">
                        هذه الوظيفة غير متاحة للتقديم حالياً
                      </p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Jobs;


============================================================
FILE: src/pages/LandingPage.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { 
  ArrowRight, 
  Play, 
  Check, 
  Star, 
  Users, 
  Zap, 
  Shield, 
  Globe, 
  Smartphone,
  QrCode,
  BarChart3,
  Award,
  ChevronDown,
  Menu,
  X,
  Mail,
  Phone,
  MapPin,
  Palette,
  Share2
} from 'lucide-react';
import { motion, useAnimation, useInView } from 'framer-motion';
import { cn } from '../utils/cn';

const LandingPage = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeTestimonial, setActiveTestimonial] = useState(0);

  const features = [
    {
      icon: Zap,
      title: 'إنشاء سريع',
      description: 'أنشئ بطاقتك الرقمية في أقل من 5 دقائق',
      color: 'from-yellow-400 to-orange-500'
    },
    {
      icon: QrCode,
      title: 'مشاركة ذكية',
      description: 'شارك بطاقتك عبر QR Code أو NFC أو رابط مباشر',
      color: 'from-blue-400 to-purple-500'
    },
    {
      icon: BarChart3,
      title: 'تحليلات متقدمة',
      description: 'تتبع من شاهد بطاقتك ومن تفاعل معها',
      color: 'from-green-400 to-teal-500'
    },
    {
      icon: Shield,
      title: 'أمان عالي',
      description: 'حماية بياناتك بأعلى معايير الأمان',
      color: 'from-red-400 to-pink-500'
    },
    {
      icon: Globe,
      title: 'وصول عالمي',
      description: 'بطاقتك متاحة في أي مكان وأي وقت',
      color: 'from-indigo-400 to-blue-500'
    },
    {
      icon: Smartphone,
      title: 'متوافق مع الجوال',
      description: 'تصميم متجاوب يعمل على جميع الأجهزة',
      color: 'from-purple-400 to-indigo-500'
    }
  ];

  const testimonials = [
    {
      name: 'أحمد محمد',
      position: 'مدير تسويق',
      company: 'شركة التقنية الحديثة',
      avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=100&h=100&fit=crop&crop=face',
      content: 'مزيون غيّر طريقة تواصلي مع العملاء. الآن أستطيع مشاركة معلوماتي بسهولة ومتابعة التفاعل.',
      rating: 5
    },
    {
      name: 'سارة أحمد',
      position: 'مصممة جرافيك',
      company: 'استوديو الإبداع',
      avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=100&h=100&fit=crop&crop=face',
      content: 'التصميم رائع والميزات متقدمة. أصبحت أكثر احترافية في التعامل مع العملاء.',
      rating: 5
    },
    {
      name: 'محمد علي',
      position: 'رائد أعمال',
      company: 'شركة الابتكار',
      avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=100&h=100&fit=crop&crop=face',
      content: 'منصة ممتازة ساعدتني في توسيع شبكة علاقاتي المهنية بشكل كبير.',
      rating: 5
    }
  ];

  const plans = [
    {
      name: 'مزيون الأصيل',
      nameEn: 'Mazyone Core',
      price: 'مجاني',
      description: 'للأفراد والمستخدمين الجدد',
      features: [
        'بطاقة واحدة',
        'QR Code أساسي',
        'تحليلات محدودة',
        'دعم أساسي'
      ],
      popular: false,
      color: 'border-gray-200'
    },
    {
      name: 'مزيون برو',
      nameEn: 'Mazyone Pro',
      price: '29 ريال/شهر',
      description: 'للمحترفين والأعمال الصغيرة',
      features: [
        '5 بطاقات',
        'QR مخصص مع شعار',
        'تحليلات متقدمة',
        'صفحات هبوط',
        'دعم أولوية'
      ],
      popular: true,
      color: 'border-blue-500'
    },
    {
      name: 'مزيون المؤسسي',
      nameEn: 'Mazyone Business',
      price: '99 ريال/شهر',
      description: 'للشركات والمؤسسات',
      features: [
        'بطاقات غير محدودة',
        'فرق متعددة',
        'العلامة البيضاء',
        'تكاملات API',
        'دعم مخصص'
      ],
      popular: false,
      color: 'border-purple-500'
    }
  ];

  const stats = [
    { number: '10,000+', label: 'مستخدم نشط' },
    { number: '50,000+', label: 'بطاقة تم إنشاؤها' },
    { number: '1M+', label: 'مشاهدة شهرياً' },
    { number: '99.9%', label: 'وقت التشغيل' }
  ];

  // Animation variants
  const fadeInUp = {
    hidden: { opacity: 0, y: 60 },
    visible: { opacity: 1, y: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const fadeInLeft = {
    hidden: { opacity: 0, x: -60 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const fadeInRight = {
    hidden: { opacity: 0, x: 60 },
    visible: { opacity: 1, x: 0, transition: { duration: 0.6, ease: "easeOut" } }
  };

  const staggerContainer = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.2,
        delayChildren: 0.1
      }
    }
  };

  const scaleIn = {
    hidden: { opacity: 0, scale: 0.8 },
    visible: { opacity: 1, scale: 1, transition: { duration: 0.5, ease: "easeOut" } }
  };

  // Auto-rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setActiveTestimonial((prev) => (prev + 1) % testimonials.length);
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="min-h-screen bg-white dark:bg-neutral-900 overflow-hidden">
      {/* Navigation */}
      <motion.nav 
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.6, ease: "easeOut" }}
        className="fixed top-0 w-full bg-white/80 dark:bg-neutral-900/80 backdrop-blur-md border-b border-neutral-200 dark:border-neutral-700 z-50"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            {/* Logo */}
            <motion.div 
              whileHover={{ scale: 1.05 }}
              className="flex items-center space-x-3 space-x-reverse"
            >
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-teal-500 rounded-xl flex items-center justify-center">
                <span className="text-white font-bold text-lg">M</span>
              </div>
              <span className="text-xl font-bold text-neutral-900 dark:text-neutral-100">
                مزيون
              </span>
            </motion.div>

            {/* Desktop Navigation */}
            <div className="hidden md:flex items-center space-x-8 space-x-reverse">
              <a href="#features" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                الميزات
              </a>
              <a href="#pricing" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                الأسعار
              </a>
              <a href="#testimonials" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                آراء العملاء
              </a>
              <a href="#contact" className="text-neutral-700 dark:text-neutral-300 hover:text-blue-500 transition-colors">
                تواصل معنا
              </a>
              <Link to="/login" className="btn-primary">
                تسجيل الدخول
              </Link>
            </div>

            {/* Mobile menu button */}
            <button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="md:hidden p-2 rounded-lg text-neutral-700 dark:text-neutral-300"
            >
              {isMenuOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
            </button>
          </div>

          {/* Mobile Navigation */}
          {isMenuOpen && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              className="md:hidden py-4 border-t border-neutral-200 dark:border-neutral-700"
            >
              <div className="space-y-4">
                <a href="#features" className="block text-neutral-700 dark:text-neutral-300">الميزات</a>
                <a href="#pricing" className="block text-neutral-700 dark:text-neutral-300">الأسعار</a>
                <a href="#testimonials" className="block text-neutral-700 dark:text-neutral-300">آراء العملاء</a>
                <a href="#contact" className="block text-neutral-700 dark:text-neutral-300">تواصل معنا</a>
                <Link to="/login" className="btn-primary w-full text-center">
                  تسجيل الدخول
                </Link>
              </div>
            </motion.div>
          )}
        </div>
      </motion.nav>

      {/* Hero Section */}
      <section className="relative pt-20 pb-20 lg:pt-32 lg:pb-32 overflow-hidden">
        {/* Background Animation */}
        <div className="absolute inset-0 -z-10">
          <motion.div
            animate={{
              scale: [1, 1.1, 1],
              rotate: [0, 5, 0],
            }}
            transition={{
              duration: 20,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute top-10 right-10 w-72 h-72 bg-gradient-to-br from-blue-400/20 to-purple-400/20 rounded-full blur-3xl"
          />
          <motion.div
            animate={{
              scale: [1.1, 1, 1.1],
              rotate: [0, -5, 0],
            }}
            transition={{
              duration: 15,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute bottom-10 left-10 w-96 h-96 bg-gradient-to-br from-teal-400/20 to-green-400/20 rounded-full blur-3xl"
          />
        </div>

        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
            {/* Hero Content */}
            <motion.div
              initial="hidden"
              animate="visible"
              variants={staggerContainer}
              className="text-center lg:text-right"
            >
              <motion.h1 
                variants={fadeInUp}
                className="text-4xl lg:text-6xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 leading-tight"
              >
                بطاقتك الرقمية
                <span className="bg-gradient-to-r from-blue-500 to-teal-500 bg-clip-text text-transparent">
                  {' '}الاحترافية
                </span>
              </motion.h1>

              <motion.p 
                variants={fadeInUp}
                className="text-xl text-neutral-600 dark:text-neutral-400 mb-8 leading-relaxed"
              >
                أنشئ بطاقة عمل رقمية احترافية في دقائق. شاركها بسهولة وتتبع تفاعل العملاء معها.
                <strong className="text-blue-500"> تواصل ذكي، نتائج أفضل.</strong>
              </motion.p>

              <motion.div 
                variants={fadeInUp}
                className="flex flex-col sm:flex-row gap-4 justify-center lg:justify-start"
              >
                <Link 
                  to="/login"
                  className="btn-primary text-lg px-8 py-4 shadow-lg hover:shadow-xl transform hover:scale-105 transition-all"
                >
                  ابدأ مجاناً الآن
                  <ArrowRight className="w-5 h-5 mr-2" />
                </Link>
                
                <motion.button 
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  className="flex items-center justify-center space-x-2 space-x-reverse px-8 py-4 border-2 border-neutral-300 dark:border-neutral-600 rounded-lg text-neutral-700 dark:text-neutral-300 hover:border-blue-500 hover:text-blue-500 transition-all"
                >
                  <Play className="w-5 h-5" />
                  <span>شاهد العرض التوضيحي</span>
                </motion.button>
              </motion.div>

              <motion.div 
                variants={fadeInUp}
                className="mt-8 flex items-center justify-center lg:justify-start space-x-6 space-x-reverse text-sm text-neutral-500 dark:text-neutral-400"
              >
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>مجاني للبدء</span>
                </div>
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>لا يتطلب بطاقة ائتمان</span>
                </div>
                <div className="flex items-center space-x-1 space-x-reverse">
                  <Check className="w-4 h-4 text-green-500" />
                  <span>إعداد في دقائق</span>
                </div>
              </motion.div>
            </motion.div>

            {/* Hero Visual */}
            <motion.div
              initial="hidden"
              animate="visible"
              variants={fadeInRight}
              className="relative"
            >
              <div className="relative z-10">
                {/* Main Card */}
                <motion.div
                  animate={{
                    y: [0, -10, 0],
                  }}
                  transition={{
                    duration: 3,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="bg-white dark:bg-neutral-800 rounded-2xl shadow-2xl p-8 max-w-sm mx-auto"
                  style={{ borderTop: '4px solid #1D4ED8' }}
                >
                  <div className="text-center">
                    <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full mx-auto mb-4 flex items-center justify-center">
                      <span className="text-white font-bold text-xl">أ</span>
                    </div>
                    <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                      أحمد محمد
                    </h3>
                    <p className="text-neutral-600 dark:text-neutral-400 mb-2">
                      مطور تطبيقات
                    </p>
                    <p className="text-sm text-neutral-500 dark:text-neutral-500 mb-4">
                      شركة التقنية المتقدمة
                    </p>
                    
                    <div className="flex justify-center space-x-3 space-x-reverse mb-4">
                      {['linkedin', 'twitter', 'github'].map((platform, index) => (
                        <motion.div
                          key={platform}
                          animate={{
                            scale: [1, 1.1, 1],
                          }}
                          transition={{
                            duration: 2,
                            delay: index * 0.3,
                            repeat: Infinity,
                            ease: "easeInOut"
                          }}
                          className="w-8 h-8 bg-neutral-100 dark:bg-neutral-700 rounded-full flex items-center justify-center"
                        >
                          <div className="w-4 h-4 bg-blue-500 rounded-sm" />
                        </motion.div>
                      ))}
                    </div>
                    
                    <button className="w-full bg-blue-500 text-white py-3 rounded-lg font-medium">
                      حفظ جهة الاتصال
                    </button>
                  </div>
                </motion.div>

                {/* Floating QR Code */}
                <motion.div
                  animate={{
                    x: [0, 10, 0],
                    rotate: [0, 5, 0],
                  }}
                  transition={{
                    duration: 4,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute -top-4 -right-4 w-16 h-16 bg-white dark:bg-neutral-800 rounded-lg shadow-lg p-2"
                >
                  <QrCode className="w-full h-full text-neutral-400" />
                </motion.div>

                {/* Floating Stats */}
                <motion.div
                  animate={{
                    y: [0, -5, 0],
                  }}
                  transition={{
                    duration: 2.5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute -bottom-4 -left-4 bg-green-500 text-white rounded-lg px-3 py-2 text-sm font-medium shadow-lg"
                >
                  +127 مشاهدة اليوم
                </motion.div>
              </div>

              {/* Background Elements */}
              <div className="absolute inset-0 -z-10">
                <motion.div
                  animate={{
                    scale: [1, 1.05, 1],
                    opacity: [0.5, 0.8, 0.5],
                  }}
                  transition={{
                    duration: 5,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute top-8 right-8 w-32 h-32 bg-blue-200 dark:bg-blue-800 rounded-full blur-2xl"
                />
                <motion.div
                  animate={{
                    scale: [1.05, 1, 1.05],
                    opacity: [0.3, 0.6, 0.3],
                  }}
                  transition={{
                    duration: 7,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                  className="absolute bottom-8 left-8 w-24 h-24 bg-teal-200 dark:bg-teal-800 rounded-full blur-2xl"
                />
              </div>
            </motion.div>
          </div>
        </div>
      </section>

      {/* Stats Section */}
      <motion.section
        initial="hidden"
        whileInView="visible"
        viewport={{ once: true, amount: 0.3 }}
        variants={staggerContainer}
        className="py-16 bg-neutral-50 dark:bg-neutral-800"
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-2 lg:grid-cols-4 gap-8">
            {stats.map((stat, index) => (
              <motion.div
                key={index}
                variants={scaleIn}
                className="text-center"
              >
                <motion.div
                  initial={{ scale: 0 }}
                  whileInView={{ scale: 1 }}
                  transition={{ delay: index * 0.1, duration: 0.5 }}
                  className="text-3xl lg:text-4xl font-bold text-blue-500 mb-2"
                >
                  {stat.number}
                </motion.div>
                <div className="text-neutral-600 dark:text-neutral-400 font-medium">
                  {stat.label}
                </div>
              </motion.div>
            ))}
          </div>
        </div>
      </motion.section>

      {/* Features Section */}
      <section id="features" className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              ميزات تجعلك متميزاً
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto">
              اكتشف كيف يمكن لمزيون أن يحول طريقة تواصلك المهني ويجعلك أكثر احترافية
            </p>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.2 }}
            variants={staggerContainer}
            className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8"
          >
            {features.map((feature, index) => (
              <motion.div
                key={index}
                variants={fadeInUp}
                whileHover={{ 
                  scale: 1.05,
                  transition: { duration: 0.2 }
                }}
                className="group relative p-8 bg-white dark:bg-neutral-800 rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 border border-neutral-200 dark:border-neutral-700"
              >
                <div className={cn(
                  "w-16 h-16 rounded-2xl bg-gradient-to-br flex items-center justify-center mb-6 group-hover:scale-110 transition-transform duration-300",
                  feature.color
                )}>
                  <feature.icon className="w-8 h-8 text-white" />
                </div>
                
                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-3">
                  {feature.title}
                </h3>
                
                <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                  {feature.description}
                </p>

                {/* Hover Effect */}
                <div className="absolute inset-0 bg-gradient-to-br from-blue-500/5 to-teal-500/5 rounded-2xl opacity-0 group-hover:opacity-100 transition-opacity duration-300" />
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* How It Works Section */}
      <section className="py-20 bg-neutral-50 dark:bg-neutral-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              كيف يعمل مزيون؟
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              ثلاث خطوات بسيطة لبطاقة رقمية احترافية
            </p>
          </motion.div>

          <div className="grid grid-cols-1 lg:grid-cols-3 gap-12">
            {[
              {
                step: '01',
                title: 'أنشئ بطاقتك',
                description: 'أضف معلوماتك الشخصية والمهنية بسهولة',
                icon: Users
              },
              {
                step: '02',
                title: 'خصص التصميم',
                description: 'اختر من القوالب الجاهزة أو صمم بطاقتك بنفسك',
                icon: Palette
              },
              {
                step: '03',
                title: 'شارك وتتبع',
                description: 'شارك بطاقتك وتتبع من شاهدها وتفاعل معها',
                icon: Share2
              }
            ].map((step, index) => (
              <motion.div
                key={index}
                initial="hidden"
                whileInView="visible"
                viewport={{ once: true, amount: 0.3 }}
                variants={{
                  hidden: { opacity: 0, y: 50 },
                  visible: { 
                    opacity: 1, 
                    y: 0, 
                    transition: { 
                      delay: index * 0.2,
                      duration: 0.6,
                      ease: "easeOut"
                    }
                  }
                }}
                className="text-center relative"
              >
                {/* Step Number */}
                <div className="relative mb-8">
                  <motion.div
                    animate={{
                      scale: [1, 1.1, 1],
                    }}
                    transition={{
                      duration: 2,
                      delay: index * 0.5,
                      repeat: Infinity,
                      ease: "easeInOut"
                    }}
                    className="w-20 h-20 bg-gradient-to-br from-blue-500 to-teal-500 rounded-full flex items-center justify-center mx-auto mb-4 shadow-lg"
                  >
                    <span className="text-white font-bold text-xl">{step.step}</span>
                  </motion.div>
                  
                  {/* Connecting Line */}
                  {index < 2 && (
                    <div className="hidden lg:block absolute top-10 left-full w-full h-0.5 bg-gradient-to-r from-blue-500 to-teal-500 transform -translate-y-1/2" />
                  )}
                </div>

                <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                  {step.title}
                </h3>
                
                <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                  {step.description}
                </p>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials Section */}
      <section id="testimonials" className="py-20">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              ماذا يقول عملاؤنا؟
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              آراء حقيقية من مستخدمين راضين عن الخدمة
            </p>
          </motion.div>

          <div className="relative max-w-4xl mx-auto">
            <motion.div
              key={activeTestimonial}
              initial={{ opacity: 0, x: 100 }}
              animate={{ opacity: 1, x: 0 }}
              exit={{ opacity: 0, x: -100 }}
              transition={{ duration: 0.5 }}
              className="bg-white dark:bg-neutral-800 rounded-2xl shadow-xl p-8 lg:p-12 text-center"
            >
              <div className="flex justify-center mb-6">
                {[...Array(testimonials[activeTestimonial].rating)].map((_, i) => (
                  <Star key={i} className="w-6 h-6 text-yellow-400 fill-current" />
                ))}
              </div>

              <blockquote className="text-xl lg:text-2xl text-neutral-700 dark:text-neutral-300 mb-8 leading-relaxed">
                "{testimonials[activeTestimonial].content}"
              </blockquote>

              <div className="flex items-center justify-center space-x-4 space-x-reverse">
                <img
                  src={testimonials[activeTestimonial].avatar}
                  alt={testimonials[activeTestimonial].name}
                  className="w-16 h-16 rounded-full object-cover"
                />
                <div>
                  <div className="font-bold text-neutral-900 dark:text-neutral-100">
                    {testimonials[activeTestimonial].name}
                  </div>
                  <div className="text-neutral-600 dark:text-neutral-400">
                    {testimonials[activeTestimonial].position}
                  </div>
                  <div className="text-sm text-neutral-500 dark:text-neutral-500">
                    {testimonials[activeTestimonial].company}
                  </div>
                </div>
              </div>
            </motion.div>

            {/* Testimonial Navigation */}
            <div className="flex justify-center mt-8 space-x-2 space-x-reverse">
              {testimonials.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setActiveTestimonial(index)}
                  className={cn(
                    "w-3 h-3 rounded-full transition-all duration-300",
                    index === activeTestimonial
                      ? "bg-blue-500 w-8"
                      : "bg-neutral-300 dark:bg-neutral-600 hover:bg-neutral-400 dark:hover:bg-neutral-500"
                  )}
                />
              ))}
            </div>
          </div>
        </div>
      </section>

      {/* Pricing Section */}
      <section id="pricing" className="py-20 bg-neutral-50 dark:bg-neutral-800">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
            className="text-center mb-16"
          >
            <h2 className="text-3xl lg:text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
              خطط تناسب احتياجاتك
            </h2>
            <p className="text-xl text-neutral-600 dark:text-neutral-400">
              اختر الخطة المناسبة لك وابدأ رحلتك الرقمية
            </p>
          </motion.div>

          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.2 }}
            variants={staggerContainer}
            className="grid grid-cols-1 lg:grid-cols-3 gap-8"
          >
            {plans.map((plan, index) => (
              <motion.div
                key={index}
                variants={scaleIn}
                whileHover={{ 
                  scale: 1.05,
                  transition: { duration: 0.2 }
                }}
                className={cn(
                  "relative bg-white dark:bg-neutral-900 rounded-2xl shadow-lg p-8 border-2 transition-all duration-300",
                  plan.popular 
                    ? "border-blue-500 shadow-blue-500/20 shadow-2xl" 
                    : plan.color
                )}
              >
                {plan.popular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <span className="bg-gradient-to-r from-blue-500 to-teal-500 text-white px-4 py-2 rounded-full text-sm font-medium">
                      الأكثر شعبية
                    </span>
                  </div>
                )}

                <div className="text-center mb-8">
                  <h3 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
                    {plan.name}
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    {plan.description}
                  </p>
                  <div className="text-4xl font-bold text-blue-500 mb-2">
                    {plan.price}
                  </div>
                </div>

                <ul className="space-y-4 mb-8">
                  {plan.features.map((feature, featureIndex) => (
                    <li key={featureIndex} className="flex items-center space-x-3 space-x-reverse">
                      <Check className="w-5 h-5 text-green-500 flex-shrink-0" />
                      <span className="text-neutral-700 dark:text-neutral-300">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  className={cn(
                    "w-full py-3 rounded-lg font-medium transition-all duration-300",
                    plan.popular
                      ? "bg-gradient-to-r from-blue-500 to-teal-500 text-white hover:shadow-lg transform hover:scale-105"
                      : "border-2 border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 hover:border-blue-500 hover:text-blue-500"
                  )}
                >
                  {plan.price === 'مجاني' ? 'ابدأ مجاناً' : 'اختر هذه الخطة'}
                </button>
              </motion.div>
            ))}
          </motion.div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-gradient-to-r from-blue-500 to-teal-500 relative overflow-hidden">
        {/* Background Animation */}
        <div className="absolute inset-0">
          <motion.div
            animate={{
              scale: [1, 1.2, 1],
              rotate: [0, 180, 360],
            }}
            transition={{
              duration: 20,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute top-0 right-0 w-96 h-96 bg-white/10 rounded-full blur-3xl"
          />
          <motion.div
            animate={{
              scale: [1.2, 1, 1.2],
              rotate: [360, 180, 0],
            }}
            transition={{
              duration: 25,
              repeat: Infinity,
              ease: "linear"
            }}
            className="absolute bottom-0 left-0 w-80 h-80 bg-white/10 rounded-full blur-3xl"
          />
        </div>

        <div className="relative z-10 max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
          <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={fadeInUp}
          >
            <h2 className="text-3xl lg:text-5xl font-bold text-white mb-6">
              جاهز لتطوير هويتك الرقمية؟
            </h2>
            <p className="text-xl text-blue-100 mb-8 leading-relaxed">
              انضم إلى آلاف المحترفين الذين يستخدمون مزيون لتطوير أعمالهم
            </p>
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              <Link 
                to="/login"
                className="inline-flex items-center space-x-3 space-x-reverse bg-white text-blue-500 px-8 py-4 rounded-lg font-bold text-lg shadow-lg hover:shadow-xl transition-all duration-300"
              >
                <span>ابدأ رحلتك الآن</span>
                <ArrowRight className="w-6 h-6" />
              </Link>
            </motion.div>

            <p className="text-blue-100 mt-4 text-sm">
              مجاني للبدء • لا يتطلب بطاقة ائتمان • إعداد في دقائق
            </p>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer id="contact" className="bg-neutral-900 text-white py-16">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Company Info */}
            <div className="lg:col-span-2">
              <div className="flex items-center space-x-3 space-x-reverse mb-6">
                <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-teal-500 rounded-xl flex items-center justify-center">
                  <span className="text-white font-bold text-xl">M</span>
                </div>
                <span className="text-2xl font-bold">مزيون</span>
              </div>
              
              <p className="text-neutral-400 mb-6 leading-relaxed max-w-md">
                منصة البطاقات الرقمية الاحترافية التي تمكن المحترفين من إنشاء هوية رقمية متميزة ومشاركتها بسهولة.
              </p>
              
              <div className="flex space-x-4 space-x-reverse">
                {['facebook', 'twitter', 'linkedin', 'instagram'].map((platform) => (
                  <motion.a
                    key={platform}
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    href="#"
                    className="w-10 h-10 bg-neutral-800 rounded-lg flex items-center justify-center hover:bg-blue-500 transition-colors"
                  >
                    <div className="w-5 h-5 bg-current rounded-sm" />
                  </motion.a>
                ))}
              </div>
            </div>

            {/* Quick Links */}
            <div>
              <h3 className="text-lg font-bold mb-6">روابط سريعة</h3>
              <ul className="space-y-3">
                {['الميزات', 'الأسعار', 'آراء العملاء', 'المدونة', 'الدعم'].map((link) => (
                  <li key={link}>
                    <a href="#" className="text-neutral-400 hover:text-white transition-colors">
                      {link}
                    </a>
                  </li>
                ))}
              </ul>
            </div>

            {/* Contact Info */}
            <div>
              <h3 className="text-lg font-bold mb-6">تواصل معنا</h3>
              <div className="space-y-4">
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Mail className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">support@mazyone.com</span>
                </div>
                <div className="flex items-center space-x-3 space-x-reverse">
                  <Phone className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">+966 11 234 5678</span>
                </div>
                <div className="flex items-center space-x-3 space-x-reverse">
                  <MapPin className="w-5 h-5 text-blue-400" />
                  <span className="text-neutral-400">الرياض، السعودية</span>
                </div>
              </div>
            </div>
          </div>

          <div className="border-t border-neutral-800 mt-12 pt-8 flex flex-col md:flex-row justify-between items-center">
            <p className="text-neutral-400 text-sm">
              © 2024 مزيون. جميع الحقوق محفوظة.
            </p>
            <div className="flex space-x-6 space-x-reverse mt-4 md:mt-0">
              <a href="#" className="text-neutral-400 hover:text-white text-sm transition-colors">
                سياسة الخصوصية
              </a>
              <a href="#" className="text-neutral-400 hover:text-white text-sm transition-colors">
                شروط الاستخدام
              </a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  );
};

export default LandingPage;


============================================================
FILE: src/pages/LandingPages.tsx
============================================================
import React, { useState } from 'react';
import { 
  Plus, 
  Eye, 
  Edit, 
  Trash2, 
  Share2,
  Globe,
  BarChart3,
  Settings,
  Copy,
  ExternalLink,
  FileText,
  Image,
  Video,
  MapPin
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockLandingPages } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const LandingPages = () => {
  const { user } = useStore();
  const [landingPages] = useState(mockLandingPages);
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [selectedPage, setSelectedPage] = useState(null);

  const handleCreatePage = () => {
    setShowCreateModal(true);
  };

  const handleDeletePage = (pageId: string) => {
    if (window.confirm('هل أنت متأكد من حذف هذه الصفحة؟')) {
      toast.success('تم حذف الصفحة بنجاح');
    }
  };

  const handleCopyLink = (slug: string) => {
    const link = `${window.location.origin}/${slug}`;
    navigator.clipboard.writeText(link);
    toast.success('تم نسخ الرابط بنجاح!');
  };

  const getStatusColor = (isPublished: boolean) => {
    return isPublished 
      ? 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400'
      : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400';
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            صفحات الهبوط
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ صفحات هبوط احترافية لبطاقاتك وخدماتك
          </p>
        </div>
        
        <button 
          onClick={handleCreatePage}
          className="btn-primary flex items-center space-x-2 space-x-reverse"
        >
          <Plus className="w-4 h-4" />
          <span>إنشاء صفحة جديدة</span>
        </button>
      </div>

      {/* Landing Pages Grid */}
      {landingPages.length === 0 ? (
        <div className="text-center py-12">
          <div className="w-16 h-16 bg-neutral-100 dark:bg-neutral-800 rounded-full flex items-center justify-center mx-auto mb-4">
            <FileText className="w-8 h-8 text-neutral-400" />
          </div>
          <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
            لا توجد صفحات هبوط حتى الآن
          </h3>
          <p className="text-neutral-600 dark:text-neutral-400 mb-6">
            ابدأ بإنشاء صفحة هبوط احترافية لعرض خدماتك
          </p>
          <button 
            onClick={handleCreatePage}
            className="btn-primary inline-flex items-center space-x-2 space-x-reverse"
          >
            <Plus className="w-4 h-4" />
            <span>إنشاء صفحة جديدة</span>
          </button>
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {landingPages.map((page) => (
            <div key={page.id} className="card group hover:shadow-lg transition-shadow">
              {/* Page Preview */}
              <div className="aspect-video bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-4 relative overflow-hidden">
                <div className="absolute inset-0 bg-gradient-to-br from-primary-500/20 to-secondary-500/20 flex items-center justify-center">
                  <Globe className="w-8 h-8 text-neutral-400" />
                </div>
                <div className="absolute top-2 right-2">
                  <span className={cn("px-2 py-1 text-xs rounded-full", getStatusColor(page.isPublished))}>
                    {page.isPublished ? 'منشورة' : 'مسودة'}
                  </span>
                </div>
              </div>

              {/* Page Info */}
              <div className="space-y-3">
                <div>
                  <h3 className="font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                    {page.title}
                  </h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 truncate">
                    /{page.slug}
                  </p>
                </div>

                {/* Analytics */}
                <div className="flex items-center space-x-4 space-x-reverse text-sm text-neutral-600 dark:text-neutral-400">
                  <div className="flex items-center space-x-1 space-x-reverse">
                    <Eye className="w-4 h-4" />
                    <span>{page.analytics.views}</span>
                  </div>
                  <div className="flex items-center space-x-1 space-x-reverse">
                    <BarChart3 className="w-4 h-4" />
                    <span>{page.analytics.clicks}</span>
                  </div>
                </div>

                {/* Actions */}
                <div className="flex items-center space-x-2 space-x-reverse">
                  <button 
                    onClick={() => window.open(`/${page.slug}`, '_blank')}
                    className="flex-1 bg-primary-500 text-white px-3 py-2 rounded-lg text-sm font-medium hover:bg-primary-600 transition-colors flex items-center justify-center space-x-1 space-x-reverse"
                  >
                    <Eye className="w-4 h-4" />
                    <span>معاينة</span>
                  </button>
                  
                  <button className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors">
                    <Edit className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                  
                  <button 
                    onClick={() => handleCopyLink(page.slug)}
                    className="p-2 bg-neutral-100 dark:bg-neutral-800 rounded-lg hover:bg-neutral-200 dark:hover:bg-neutral-700 transition-colors"
                  >
                    <Copy className="w-4 h-4 text-neutral-600 dark:text-neutral-400" />
                  </button>
                  
                  <button 
                    onClick={() => handleDeletePage(page.id)}
                    className="p-2 bg-red-100 dark:bg-red-900 rounded-lg hover:bg-red-200 dark:hover:bg-red-800 transition-colors"
                  >
                    <Trash2 className="w-4 h-4 text-red-600 dark:text-red-400" />
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Create Page Modal */}
      {showCreateModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              إنشاء صفحة هبوط جديدة
            </h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  عنوان الصفحة
                </label>
                <input
                  type="text"
                  className="input-field"
                  placeholder="أدخل عنوان الصفحة"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الرابط المخصص
                </label>
                <div className="flex items-center space-x-2 space-x-reverse">
                  <span className="text-sm text-neutral-500 dark:text-neutral-400">
                    mazyone.com/
                  </span>
                  <input
                    type="text"
                    className="input-field flex-1"
                    placeholder="my-page"
                  />
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  القالب
                </label>
                <select className="input-field">
                  <option>قالب احترافي</option>
                  <option>قالب إبداعي</option>
                  <option>قالب بسيط</option>
                  <option>قالب شخصي</option>
                </select>
              </div>
            </div>
            
            <div className="flex items-center space-x-3 space-x-reverse mt-6">
              <button
                onClick={() => setShowCreateModal(false)}
                className="flex-1 px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
              >
                إلغاء
              </button>
              <button
                onClick={() => {
                  setShowCreateModal(false);
                  toast.success('تم إنشاء الصفحة بنجاح!');
                }}
                className="flex-1 btn-primary"
              >
                إنشاء الصفحة
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default LandingPages;


============================================================
FILE: src/pages/Login.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Eye, EyeOff, Mail, Lock } from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import AuthIllustration from '../assets/auth-illustration.svg';

const Login: React.FC = () => {
  const navigate = useNavigate();
  const { login } = useStore();

  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    email: 'ahmed@example.com',
    password: 'password',
    remember: false,
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await login(form.email, form.password);
      toast.success('تم تسجيل الدخول بنجاح');
      navigate('/dashboard');
    } catch {
      toast.error('بيانات غير صحيحة');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-white dark:bg-neutral-900 flex flex-col justify-center" dir="rtl">
      {/* الصف الأول: الشعار والترحيب + العنوان والوصف */}
      <div className="hidden lg:flex flex-row w-full items-start justify-center pt-16 pb-4 px-8">
        {/* يمين: الشعار والترحيب */}
        <div className="flex flex-col items-center justify-start w-1/2">
          <div className="w-20 h-20 rounded-2xl flex items-center justify-center mb-4 shadow-lg"
            style={{ background: 'linear-gradient(135deg, #006BE3 0%, #7EDDB9 100%)' }}>
            <span className="text-white font-bold text-3xl">M</span>
          </div>
          <h1 className="text-3xl font-bold mb-2 text-neutral-900 dark:text-neutral-100">
            مرحباً بك في عالم مَزيون
          </h1>
        </div>
        {/* يسار: العنوان والوصف */}
        <div className="flex flex-col items-center justify-start w-1/2">
          <h2 className="font-inter text-6xl font-bold text-black dark:text-white mb-4 mt-0 text-center w-full">
            Mazyone
          </h2>
          <p className="font-inter text-xl text-neutral-600 dark:text-neutral-400 mb-0 text-center w-full">
            The smart digital identity platform that<br />
            empowers professionals to connect, share, and grow.
          </p>
        </div>
      </div>

      {/* الصف الثاني: نموذج تسجيل الدخول + الصورة */}
      <div className="flex flex-col lg:flex-row w-full flex-1 items-stretch justify-center">
        {/* يمين: نموذج تسجيل الدخول */}
        <div className="flex items-start justify-center w-full lg:w-1/2 p-6">
          <div className="w-full max-w-md mt-0 lg:mt-8">
            <form
              onSubmit={handleSubmit}
              className="space-y-6 bg-white dark:bg-neutral-900 p-8 rounded-2xl shadow-xl border"
            >
              <header className="text-center space-y-2 mb-4">
                <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
                  تسجيل الدخول
                </h1>
                <p className="text-neutral-600 dark:text-neutral-400 text-base">
                  أدخل بياناتك للوصول إلى حسابك
                </p>
              </header>
              {/* email */}
              <div>
                <label className="block mb-2 text-sm font-medium">
                  البريد الإلكترونى
                </label>
                <div className="relative">
                  <Mail className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
                  <input
                    type="email"
                    required
                    placeholder="name@example.com"
                    value={form.email}
                    onChange={(e) => setForm({ ...form, email: e.target.value })}
                    className="input-field pr-10"
                  />
                </div>
              </div>

              {/* password */}
              <div>
                <label className="block mb-2 text-sm font-medium">
                  كلمة المرور
                </label>
                <div className="relative">
                  <Lock className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
                  <input
                    type={showPassword ? 'text' : 'password'}
                    required
                    placeholder="••••••••"
                    value={form.password}
                    onChange={(e) =>
                      setForm({ ...form, password: e.target.value })
                    }
                    className="input-field pr-10 pl-10"
                  />
                  <button
                    type="button"
                    onClick={() => setShowPassword(!showPassword)}
                    className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-400"
                  >
                    {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
                  </button>
                </div>
              </div>

              {/* remember & submit */}
              <div className="flex items-center justify-between">
                <label className="flex items-center text-sm space-x-2 space-x-reverse">
                  <input
                    type="checkbox"
                    checked={form.remember}
                    onChange={(e) =>
                      setForm({ ...form, remember: e.target.checked })
                    }
                    className="w-4 h-4 text-primary-500 border-neutral-300 rounded focus:ring-primary-500"
                  />
                  <span>تذكرنى</span>
                </label>

                <a href="#" className="text-primary-500 text-sm hover:underline">
                  نسيت كلمة المرور؟
                </a>
              </div>

              <button
                type="submit"
                disabled={loading}
                className="btn-primary w-full disabled:opacity-50"
              >
                {loading ? 'جارى الدخول...' : 'دخول'}
              </button>

              <p className="text-sm text-center">
                ليس لديك حساب؟{' '}
                <a href="/register" className="text-primary-500 hover:underline">
                  إنشاء حساب جديد
                </a>
              </p>
            </form>
          </div>
        </div>
        {/* يسار: الصورة */}
        <div className="hidden lg:flex items-start justify-center w-1/2 pt-8 pl-8 h-full">
          <img
            src={AuthIllustration}
            alt="Authentication illustration"
            className="h-[calc(100vh-4rem)] max-h-screen w-auto object-contain"
            style={{ alignSelf: 'flex-start', height: 'calc(100vh - 4rem)', maxHeight: '100vh' }}
          />
        </div>
      </div>
    </div>
  );
};

export default Login;


============================================================
FILE: src/pages/Payment.tsx
============================================================
import React, { useState, useEffect } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { 
  CreditCard, 
  Shield, 
  Check, 
  ArrowRight, 
  Lock,
  Calendar,
  User,
  Building,
  Crown,
  Star,
  Gift,
  Users
} from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const Payment = () => {
  const navigate = useNavigate();
  const [searchParams] = useSearchParams();
  const { user } = useStore();
  const [selectedPlan, setSelectedPlan] = useState(searchParams.get('plan') || 'pro');
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [paymentMethod, setPaymentMethod] = useState<'card' | 'bank' | 'wallet'>('card');
  const [isLoading, setIsLoading] = useState(false);
  const [formData, setFormData] = useState({
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    cardName: '',
    billingAddress: '',
    city: '',
    postalCode: '',
    country: 'SA'
  });

  const plans = {
    pro: {
      name: 'مزيون برو',
      description: 'للمحترفين والأفراد',
      monthlyPrice: 99,
      yearlyPrice: 990,
      features: [
        '5 بطاقات رقمية',
        'QR مخصص مع شعار',
        'تحليلات متقدمة',
        'صفحات هبوط',
        'دعم فني',
        'تكامل وسائل التواصل'
      ],
      color: 'blue',
      popular: true
    },
    'pro-plus': {
      name: 'مزيون برو بلس',
      description: 'للمحترفين المتقدمين',
      monthlyPrice: 199,
      yearlyPrice: 1990,
      features: [
        'بطاقات غير محدودة',
        'منشئ السيرة الذاتية',
        'إزالة العلامة المائية',
        'تحليلات شاملة',
        'دعم أولوية',
        'تصدير متقدم'
      ],
      color: 'purple',
      popular: false
    },
    business: {
      name: 'مزيون المؤسسي',
      description: 'للشركات والفرق',
      monthlyPrice: 299,
      yearlyPrice: 2990,
      features: [
        'فرق متعددة',
        'إدارة الصلاحيات',
        'العلامة البيضاء',
        'تكاملات API',
        'دعم مخصص',
        'تقارير مفصلة'
      ],
      color: 'gold',
      popular: false
    }
  };

  const currentPlan = plans[selectedPlan as keyof typeof plans];
  const finalPrice = billingCycle === 'yearly' 
    ? currentPlan.yearlyPrice 
    : currentPlan.monthlyPrice;
  const savings = billingCycle === 'yearly' 
    ? (currentPlan.monthlyPrice * 12) - currentPlan.yearlyPrice 
    : 0;

  const paymentMethods = [
    {
      id: 'card',
      name: 'بطاقة ائتمانية',
      icon: CreditCard,
      description: 'Visa, Mastercard, American Express'
    },
    {
      id: 'bank',
      name: 'تحويل بنكي',
      icon: Building,
      description: 'تحويل مباشر من البنك'
    },
    {
      id: 'wallet',
      name: 'محفظة رقمية',
      icon: Shield,
      description: 'Apple Pay, STC Pay, مدى'
    }
  ];

  useEffect(() => {
    if (!user) {
      navigate('/login');
      return;
    }
  }, [user, navigate]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // محاكاة عملية الدفع
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      toast.success('تم الدفع بنجاح! مرحباً بك في خطة ' + currentPlan.name + ' 🎉');
      navigate('/dashboard?welcome=true');
    } catch (error) {
      toast.error('حدث خطأ أثناء معالجة الدفع');
    } finally {
      setIsLoading(false);
    }
  };

  const formatCardNumber = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    const matches = v.match(/\d{4,16}/g);
    const match = matches && matches[0] || '';
    const parts = [];
    for (let i = 0, len = match.length; i < len; i += 4) {
      parts.push(match.substring(i, i + 4));
    }
    if (parts.length) {
      return parts.join(' ');
    } else {
      return v;
    }
  };

  const formatExpiryDate = (value: string) => {
    const v = value.replace(/\s+/g, '').replace(/[^0-9]/gi, '');
    if (v.length >= 2) {
      return v.substring(0, 2) + '/' + v.substring(2, 4);
    }
    return v;
  };

  if (!user) return null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-teal-50 dark:from-neutral-900 dark:via-neutral-800 dark:to-neutral-900 py-8">
      <div className="container mx-auto px-4">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
            إتمام الاشتراك
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            خطوة واحدة فقط للانضمام إلى مزيون {currentPlan.name}
          </p>
        </div>

        <div className="max-w-6xl mx-auto grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Payment Form */}
          <div className="space-y-6">
            {/* Plan Selection */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                اختيار الخطة
              </h2>
              
              <div className="space-y-3">
                {Object.entries(plans).map(([key, plan]) => (
                  <button
                    key={key}
                    onClick={() => setSelectedPlan(key)}
                    className={cn(
                      "w-full p-4 rounded-lg border-2 transition-colors text-right",
                      selectedPlan === key
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                    )}
                  >
                    <div className="flex items-center justify-between">
                      <div>
                        <div className="flex items-center space-x-2 space-x-reverse">
                          <h3 className="font-bold text-neutral-900 dark:text-neutral-100">
                            {plan.name}
                          </h3>
                          {plan.popular && (
                            <span className="bg-blue-500 text-white px-2 py-1 rounded-full text-xs">
                              الأكثر شعبية
                            </span>
                          )}
                          {key === 'business' && (
                            <Crown className="w-4 h-4 text-yellow-500" />
                          )}
                        </div>
                        <p className="text-sm text-neutral-600 dark:text-neutral-400">
                          {plan.description}
                        </p>
                      </div>
                      <div className="text-right">
                        <span className="text-lg font-bold text-neutral-900 dark:text-neutral-100">
                          {billingCycle === 'yearly' ? plan.yearlyPrice : plan.monthlyPrice} ريال
                        </span>
                        <span className="text-neutral-600 dark:text-neutral-400">
                          /{billingCycle === 'yearly' ? 'سنة' : 'شهر'}
                        </span>
                      </div>
                    </div>
                  </button>
                ))}
              </div>
            </div>

            {/* Billing Cycle */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                دورة الفوترة
              </h2>
              
              <div className="grid grid-cols-2 gap-4">
                <button
                  onClick={() => setBillingCycle('monthly')}
                  className={cn(
                    "p-4 rounded-lg border-2 transition-colors",
                    billingCycle === 'monthly'
                      ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                  )}
                >
                  <h3 className="font-bold text-neutral-900 dark:text-neutral-100">شهري</h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {currentPlan.monthlyPrice} ريال/شهر
                  </p>
                </button>

                <button
                  onClick={() => setBillingCycle('yearly')}
                  className={cn(
                    "p-4 rounded-lg border-2 transition-colors relative",
                    billingCycle === 'yearly'
                      ? "border-green-500 bg-green-50 dark:bg-green-900/20"
                      : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                  )}
                >
                  {savings > 0 && (
                    <div className="absolute -top-2 -right-2 bg-green-500 text-white px-2 py-1 rounded-full text-xs">
                      وفر {savings} ريال
                    </div>
                  )}
                  <h3 className="font-bold text-neutral-900 dark:text-neutral-100">سنوي</h3>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {currentPlan.yearlyPrice} ريال/سنة
                  </p>
                  <p className="text-xs text-green-600 dark:text-green-400 mt-1">
                    شهرين مجاناً!
                  </p>
                </button>
              </div>
            </div>

            {/* Payment Method */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
                طريقة الدفع
              </h2>
              
              <div className="space-y-3 mb-6">
                {paymentMethods.map((method) => (
                  <button
                    key={method.id}
                    onClick={() => setPaymentMethod(method.id as any)}
                    className={cn(
                      "w-full p-4 rounded-lg border-2 transition-colors text-right",
                      paymentMethod === method.id
                        ? "border-blue-500 bg-blue-50 dark:bg-blue-900/20"
                        : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300"
                    )}
                  >
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <method.icon className="w-5 h-5 text-blue-500" />
                      <div>
                        <h3 className="font-medium text-neutral-900 dark:text-neutral-100">
                          {method.name}
                        </h3>
                        <p className="text-sm text-neutral-600 dark:text-neutral-400">
                          {method.description}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>

              {/* Payment Form */}
              {paymentMethod === 'card' && (
                <form onSubmit={handleSubmit} className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رقم البطاقة
                    </label>
                    <div className="relative">
                      <CreditCard className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        type="text"
                        value={formData.cardNumber}
                        onChange={(e) => setFormData({ 
                          ...formData, 
                          cardNumber: formatCardNumber(e.target.value) 
                        })}
                        className="input-field pr-10"
                        placeholder="1234 5678 9012 3456"
                        maxLength={19}
                        required
                      />
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        تاريخ الانتهاء
                      </label>
                      <div className="relative">
                        <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          type="text"
                          value={formData.expiryDate}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            expiryDate: formatExpiryDate(e.target.value) 
                          })}
                          className="input-field pr-10"
                          placeholder="MM/YY"
                          maxLength={5}
                          required
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        CVV
                      </label>
                      <div className="relative">
                        <Lock className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                        <input
                          type="text"
                          value={formData.cvv}
                          onChange={(e) => setFormData({ 
                            ...formData, 
                            cvv: e.target.value.replace(/\D/g, '').slice(0, 4) 
                          })}
                          className="input-field pr-10"
                          placeholder="123"
                          maxLength={4}
                          required
                        />
                      </div>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اسم حامل البطاقة
                    </label>
                    <div className="relative">
                      <User className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
                      <input
                        type="text"
                        value={formData.cardName}
                        onChange={(e) => setFormData({ ...formData, cardName: e.target.value })}
                        className="input-field pr-10"
                        placeholder="أحمد محمد السعيد"
                        required
                      />
                    </div>
                  </div>

                  <button
                    type="submit"
                    disabled={isLoading}
                    className={cn(
                      "w-full bg-gradient-to-r from-blue-500 to-teal-500 text-white py-4 px-6 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 space-x-reverse",
                      "hover:from-blue-600 hover:to-teal-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2",
                      "disabled:opacity-50 disabled:cursor-not-allowed transform hover:scale-105 active:scale-95"
                    )}
                  >
                    {isLoading ? (
                      <>
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        <span>جاري المعالجة...</span>
                      </>
                    ) : (
                      <>
                        <Shield className="w-5 h-5" />
                        <span>دفع آمن - {finalPrice} ريال</span>
                        <ArrowRight className="w-5 h-5" />
                      </>
                    )}
                  </button>
                </form>
              )}

              {paymentMethod === 'bank' && (
                <div className="text-center py-8">
                  <Building className="w-16 h-16 text-neutral-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
                    التحويل البنكي
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    سيتم توجيهك لإتمام التحويل البنكي
                  </p>
                  <button
                    onClick={() => handleSubmit({ preventDefault: () => {} } as any)}
                    disabled={isLoading}
                    className="btn-primary"
                  >
                    متابعة التحويل
                  </button>
                </div>
              )}

              {paymentMethod === 'wallet' && (
                <div className="text-center py-8">
                  <Shield className="w-16 h-16 text-neutral-400 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-2">
                    المحفظة الرقمية
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 mb-4">
                    اختر محفظتك الرقمية المفضلة
                  </p>
                  <div className="grid grid-cols-2 gap-4">
                    <button className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg hover:border-blue-300 transition-colors">
                      <img src="/apple-pay.png" alt="Apple Pay" className="h-8 mx-auto" />
                    </button>
                    <button className="p-4 border border-neutral-200 dark:border-neutral-700 rounded-lg hover:border-blue-300 transition-colors">
                      <img src="/stc-pay.png" alt="STC Pay" className="h-8 mx-auto" />
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Order Summary */}
          <div className="space-y-6">
            {/* Plan Summary */}
            <div className="bg-white dark:bg-neutral-900 rounded-2xl shadow-xl p-6 border border-neutral-200 dark:border-neutral-700 sticky top-8">
              <h2 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-6">
                ملخص الطلب
              </h2>

              <div className="space-y-4 mb-6">
                <div className="flex items-center justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">الخطة</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {currentPlan.name}
                  </span>
                </div>
                
                <div className="flex items-center justify-between">
                  <span className="text-neutral-600 dark:text-neutral-400">دورة الفوترة</span>
                  <span className="font-medium text-neutral-900 dark:text-neutral-100">
                    {billingCycle === 'yearly' ? 'سنوي' : 'شهري'}
                  </span>
                </div>

                {billingCycle === 'yearly' && savings > 0 && (
                  <div className="flex items-center justify-between text-green-600 dark:text-green-400">
                    <span>الخصم السنوي</span>
                    <span className="font-medium">-{savings} ريال</span>
                  </div>
                )}

                <div className="border-t border-neutral-200 dark:border-neutral-700 pt-4">
                  <div className="flex items-center justify-between text-lg">
                    <span className="font-bold text-neutral-900 dark:text-neutral-100">الإجمالي</span>
                    <span className="font-bold text-neutral-900 dark:text-neutral-100">
                      {finalPrice} ريال
                    </span>
                  </div>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                    شامل ضريبة القيمة المضافة
                  </p>
                </div>
              </div>

              {/* Plan Features */}
              <div className="space-y-3 mb-6">
                <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
                  ما ستحصل عليه:
                </h3>
                {currentPlan.features.map((feature, index) => (
                  <div key={index} className="flex items-center space-x-2 space-x-reverse">
                    <Check className="w-4 h-4 text-green-500 flex-shrink-0" />
                    <span className="text-sm text-neutral-600 dark:text-neutral-400">{feature}</span>
                  </div>
                ))}
              </div>

              {/* Security Badge */}
              <div className="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-4">
                <div className="flex items-center space-x-2 space-x-reverse mb-2">
                  <Shield className="w-5 h-5 text-green-600 dark:text-green-400" />
                  <span className="font-medium text-green-800 dark:text-green-200">
                    دفع آمن ومحمي
                  </span>
                </div>
                <p className="text-sm text-green-700 dark:text-green-300">
                  معاملاتك محمية بتشفير SSL 256-bit ومعايير الأمان الدولية
                </p>
              </div>

              {/* Money Back Guarantee */}
              <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mt-4">
                <div className="flex items-center space-x-2 space-x-reverse mb-2">
                  <Gift className="w-5 h-5 text-blue-600 dark:text-blue-400" />
                  <span className="font-medium text-blue-800 dark:text-blue-200">
                    ضمان استرداد الأموال
                  </span>
                </div>
                <p className="text-sm text-blue-700 dark:text-blue-300">
                  30 يوم ضمان كامل لاسترداد الأموال إذا لم تكن راضياً
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* Trust Indicators */}
        <div className="max-w-4xl mx-auto mt-12 text-center">
          <div className="grid grid-cols-2 md:grid-cols-4 gap-8">
            <div className="flex flex-col items-center">
              <Shield className="w-8 h-8 text-green-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                دفع آمن 100%
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Star className="w-8 h-8 text-yellow-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                تقييم 4.9/5
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Users className="w-8 h-8 text-blue-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                +10,000 عميل
              </span>
            </div>
            <div className="flex flex-col items-center">
              <Gift className="w-8 h-8 text-purple-500 mb-2" />
              <span className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                ضمان 30 يوم
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Payment;


============================================================
FILE: src/pages/QRGenerator.tsx
============================================================
// src/pages/QRGenerator.tsx (النسخة النهائية العاملة)
import React, { useState, useRef, useEffect } from 'react';
import { 
  Download, 
  Share2, 
  Copy, 
  Upload,
  Save,
  Trash2,
  Plus,
  Settings,
  Palette,
  Shapes,
  Sticker,
  ImageIcon,
  RefreshCw,
  Eye
} from 'lucide-react';
import { useStore } from '../store/useStore';
import QRShapes from '../components/qr/QRShapes';
import QRStickers from '../components/qr/QRStickers';
import { AdvancedQRGenerator, type QROptions } from '../lib/qr-generator';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const QRGenerator = () => {
  const { user } = useStore();
  const qrGenerator = useRef(new AdvancedQRGenerator());
  
  // QR Data State
  const [qrData, setQrData] = useState({
    type: 'url',
    content: '',
    title: '',
  });

  // Customization State
  const [customization, setCustomization] = useState<QROptions>({
    size: 300,
    foregroundColor: '#1D4ED8',
    backgroundColor: '#FFFFFF',
    shape: 'square',
    pattern: 'square',
    logoSize: 50,
    eyeColor: '#1D4ED8',
    eyeStrokeColor: '#1D4ED8',
    eyeballColor: '#1D4ED8'
  });

  // UI State
  const [activeTab, setActiveTab] = useState('content');
  const [qrImageUrl, setQrImageUrl] = useState<string>('');
  const [isGenerating, setIsGenerating] = useState(false);
  
  const fileInputRef = useRef<HTMLInputElement>(null);

  const qrTypes = [
    { id: 'url', name: 'رابط موقع', placeholder: 'https://example.com' },
    { id: 'text', name: 'نص', placeholder: 'أدخل النص هنا' },
    { id: 'email', name: 'بريد إلكتروني', placeholder: 'example@domain.com' },
    { id: 'phone', name: 'رقم هاتف', placeholder: '+966501234567' },
    { id: 'wifi', name: 'شبكة WiFi', placeholder: 'اسم الشبكة:كلمة المرور:WPA' },
  ];

  const tabs = [
    { id: 'content', name: 'المحتوى', icon: Plus },
    { id: 'shapes', name: 'الأشكال', icon: Shapes },
    { id: 'stickers', name: 'الستيكرز', icon: Sticker },
    { id: 'colors', name: 'الألوان', icon: Palette },
    { id: 'patterns', name: 'الأنماط', icon: Settings },
    { id: 'logo', name: 'اللوجو', icon: ImageIcon }
  ];

  // Generate QR content based on type
  const generateQRContent = (): string => {
    if (!qrData.content.trim()) return '';
    
    switch (qrData.type) {
      case 'url':
        return qrData.content;
      case 'email':
        return `mailto:${qrData.content}`;
      case 'phone':
        return `tel:${qrData.content}`;
      case 'wifi':
        const [ssid, password, security] = qrData.content.split(':');
        return `WIFI:T:${security || 'WPA'};S:${ssid};P:${password};;`;
      default:
        return qrData.content;
    }
  };

  // Generate QR Code whenever data or customization changes
  useEffect(() => {
    const generateQR = async () => {
      const content = generateQRContent();
      if (!content) {
        setQrImageUrl('');
        return;
      }

      setIsGenerating(true);
      try {
        const qrUrl = await qrGenerator.current.generateQR(content, customization);
        setQrImageUrl(qrUrl);
      } catch (error) {
        console.error('Error generating QR code:', error);
        toast.error('حدث خطأ في توليد رمز QR');
      } finally {
        setIsGenerating(false);
      }
    };

    generateQR();
  }, [qrData, customization]);

  // Handle shape selection
  const handleShapeSelect = (shape: string) => {
    setCustomization(prev => ({ ...prev, shape }));
    toast.success(`تم اختيار شكل: ${shape}`);
  };

  // Handle sticker selection
  const handleStickerSelect = (sticker: string) => {
    setCustomization(prev => ({ ...prev, sticker }));
    toast.success('تم تطبيق الستيكر!');
  };

  // Handle pattern change
  const handlePatternChange = (pattern: string) => {
    setCustomization(prev => ({ ...prev, pattern: pattern as any }));
    toast.success(`تم تغيير النمط إلى: ${pattern}`);
  };

  // Handle logo upload
  const handleLogoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (file.size > 2 * 1024 * 1024) {
      toast.error('حجم الملف يجب أن يكون أقل من 2MB');
      return;
    }

    const reader = new FileReader();
    reader.onload = (e) => {
      const result = e.target?.result as string;
      setCustomization(prev => ({ ...prev, logo: result }));
      toast.success('تم رفع اللوجو بنجاح!');
    };
    reader.readAsDataURL(file);
  };

  // Download function
  const handleDownload = () => {
    if (!qrImageUrl) {
      toast.error('لا يوجد رمز QR للتحميل');
      return;
    }

    const link = document.createElement('a');
    link.download = `qr-${qrData.title || 'code'}.png`;
    link.href = qrImageUrl;
    link.click();
    toast.success('تم تحميل رمز QR بنجاح!');
  };

  // Reset function
  const handleReset = () => {
    setQrData({ type: 'url', content: '', title: '' });
    setCustomization({
      size: 300,
      foregroundColor: '#1D4ED8',
      backgroundColor: '#FFFFFF',
      shape: 'square',
      pattern: 'square',
      logoSize: 50,
      eyeColor: '#1D4ED8',
      eyeStrokeColor: '#1D4ED8',
      eyeballColor: '#1D4ED8'
    });
    toast.success('تم إعادة تعيين الإعدادات');
  };

  const qrContentForDisplay = generateQRContent();

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
            مولد رموز QR المتقدم
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            أنشئ رموز QR مخصصة بأشكال وألوان احترافية
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button
            onClick={handleReset}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <RefreshCw className="w-4 h-4" />
            <span>إعادة تعيين</span>
          </button>
          <button
            onClick={handleDownload}
            className="btn-primary flex items-center space-x-2 space-x-reverse"
            disabled={!qrImageUrl}
          >
            <Download className="w-4 h-4" />
            <span>تحميل</span>
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Controls Section */}
        <div className="lg:col-span-2 space-y-6">
          {/* Tab Navigation */}
          <div className="card">
            <div className="flex flex-wrap gap-2 mb-6">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={cn(
                    "flex items-center space-x-2 space-x-reverse px-4 py-2 rounded-lg font-medium transition-colors",
                    activeTab === tab.id
                      ? "bg-primary-500 text-white"
                      : "bg-neutral-100 dark:bg-neutral-800 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-200 dark:hover:bg-neutral-700"
                  )}
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </button>
              ))}
            </div>

            {/* Tab Content */}
            <div className="min-h-96">
              {/* Content Tab */}
              {activeTab === 'content' && (
                <div className="space-y-6">
                  <div>
                    <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                      نوع المحتوى
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
                      {qrTypes.map((type) => (
                        <button
                          key={type.id}
                          onClick={() => setQrData({ ...qrData, type: type.id, content: '' })}
                          className={cn(
                            "p-3 rounded-lg border text-sm font-medium transition-colors",
                            qrData.type === type.id
                              ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300"
                              : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 text-neutral-700 dark:text-neutral-300"
                          )}
                        >
                          {type.name}
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        عنوان الرمز (اختياري)
                      </label>
                      <input
                        type="text"
                        value={qrData.title}
                        onChange={(e) => setQrData({ ...qrData, title: e.target.value })}
                        className="input-field"
                        placeholder="أدخل عنواناً للرمز"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        المحتوى
                      </label>
                      <textarea
                        value={qrData.content}
                        onChange={(e) => setQrData({ ...qrData, content: e.target.value })}
                        className="input-field min-h-24"
                        placeholder={qrTypes.find(t => t.id === qrData.type)?.placeholder}
                        rows={3}
                      />
                    </div>
                  </div>
                </div>
              )}

              {/* Shapes Tab */}
              {activeTab === 'shapes' && (
                <div>
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                    اختر شكل الرمز
                  </h3>
                  <QRShapes
                    selectedShape={customization.shape}
                    onShapeSelect={handleShapeSelect}
                  />
                </div>
              )}

              {/* Stickers Tab */}
              {activeTab === 'stickers' && (
                <div>
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                    اختر إطار الستيكر
                  </h3>
                  <QRStickers
                    selectedSticker={customization.sticker || ''}
                    onStickerSelect={handleStickerSelect}
                  />
                </div>
              )}

              {/* Colors Tab */}
              {activeTab === 'colors' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    تخصيص الألوان
                  </h3>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {[
                      { key: 'foregroundColor', label: 'لون المقدمة' },
                      { key: 'backgroundColor', label: 'لون الخلفية' },
                      { key: 'eyeColor', label: 'لون العين' },
                      { key: 'eyeStrokeColor', label: 'لون حدود العين' },
                      { key: 'eyeballColor', label: 'لون بؤبؤ العين' }
                    ].map((colorOption) => (
                      <div key={colorOption.key}>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          {colorOption.label}
                        </label>
                        <div className="flex items-center space-x-3 space-x-reverse">
                          <input
                            type="color"
                            value={customization[colorOption.key as keyof QROptions] as string}
                            onChange={(e) => setCustomization(prev => ({ 
                              ...prev, 
                              [colorOption.key]: e.target.value 
                            }))}
                            className="w-12 h-10 rounded-lg border border-neutral-300 dark:border-neutral-600"
                          />
                          <input
                            type="text"
                            value={customization[colorOption.key as keyof QROptions] as string}
                            onChange={(e) => setCustomization(prev => ({ 
                              ...prev, 
                              [colorOption.key]: e.target.value 
                            }))}
                            className="input-field flex-1"
                          />
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Patterns Tab */}
              {activeTab === 'patterns' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    نمط الرمز
                  </h3>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-3">
                      شكل النقاط
                    </label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
                      {[
                        { id: 'square', name: 'مربع' },
                        { id: 'dots', name: 'نقاط' },
                        { id: 'rounded', name: 'مستدير' },
                        { id: 'diamond', name: 'معين' },
                        { id: 'star', name: 'نجمة' }
                      ].map((pattern) => (
                        <button
                          key={pattern.id}
                          onClick={() => handlePatternChange(pattern.id)}
                          className={cn(
                            "p-3 rounded-lg border text-sm font-medium transition-colors",
                            customization.pattern === pattern.id
                              ? "border-primary-500 bg-primary-50 dark:bg-primary-900/20 text-primary-700 dark:text-primary-300"
                              : "border-neutral-200 dark:border-neutral-700 hover:border-neutral-300 text-neutral-700 dark:text-neutral-300"
                          )}
                        >
                          {pattern.name}
                        </button>
                      ))}
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      حجم الرمز: {customization.size}px
                    </label>
                    <input
                      type="range"
                      min="200"
                      max="500"
                      step="50"
                      value={customization.size}
                      onChange={(e) => setCustomization(prev => ({ 
                        ...prev, 
                        size: parseInt(e.target.value) 
                      }))}
                      className="w-full h-2 bg-neutral-200 rounded-lg appearance-none cursor-pointer dark:bg-neutral-700"
                    />
                    <div className="flex justify-between text-xs text-neutral-500 dark:text-neutral-400 mt-1">
                      <span>200px</span>
                      <span>500px</span>
                    </div>
                  </div>
                </div>
              )}

              {/* Logo Tab */}
              {activeTab === 'logo' && (
                <div className="space-y-6">
                  <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
                    إضافة لوجو
                  </h3>
                  
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      رفع اللوجو
                    </label>
                    <div className="flex items-center space-x-3 space-x-reverse">
                      <input
                        type="file"
                        accept="image/*"
                        onChange={handleLogoUpload}
                        className="hidden"
                        ref={fileInputRef}
                      />
                      <button
                        onClick={() => fileInputRef.current?.click()}
                        className="btn-secondary flex items-center space-x-2 space-x-reverse"
                      >
                        <Upload className="w-4 h-4" />
                        <span>اختر لوجو</span>
                      </button>
                      {customization.logo && (
                        <button
                          onClick={() => setCustomization(prev => ({ ...prev, logo: undefined }))}
                          className="btn-outline flex items-center space-x-2 space-x-reverse"
                        >
                          <Trash2 className="w-4 h-4" />
                          <span>إزالة</span>
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                      PNG أو JPG، الحد الأقصى 2MB
                    </p>
                  </div>

                  {customization.logo && (
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        حجم اللوجو: {customization.logoSize}px
                      </label>
                      <input
                        type="range"
                        min="20"
                        max="100"
                        value={customization.logoSize}
                        onChange={(e) => setCustomization(prev => ({ 
                          ...prev, 
                          logoSize: parseInt(e.target.value) 
                        }))}
                        className="w-full"
                      />
                    </div>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>

        {/* Preview Section */}
        <div className="space-y-6">
          {/* QR Preview */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              معاينة الرمز
            </h2>
            
            <div className="flex justify-center p-8 bg-neutral-50 dark:bg-neutral-800 rounded-lg min-h-80">
              {isGenerating ? (
                <div className="text-center text-neutral-500 dark:text-neutral-400 flex flex-col items-center justify-center">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500 mb-4"></div>
                  <p>جاري إنشاء الرمز...</p>
                </div>
              ) : qrImageUrl ? (
                <img 
                  src={qrImageUrl} 
                  alt="Generated QR Code" 
                  className="max-w-full max-h-full object-contain"
                  style={{ maxWidth: customization.size, maxHeight: customization.size }}
                />
              ) : (
                <div className="text-center text-neutral-500 dark:text-neutral-400 flex flex-col items-center justify-center">
                  <div className="w-32 h-32 border-2 border-dashed border-neutral-300 dark:border-neutral-600 rounded-lg flex items-center justify-center mb-4">
                    <Eye className="w-8 h-8" />
                  </div>
                  <p>أدخل محتوى لعرض الرمز</p>
                </div>
              )}
            </div>

            {qrContentForDisplay && (
              <div className="mt-4 p-3 bg-neutral-100 dark:bg-neutral-800 rounded-lg">
                <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-1">المحتوى:</p>
                <p className="text-sm font-mono text-neutral-900 dark:text-neutral-100 break-all">
                  {qrContentForDisplay}
                </p>
              </div>
            )}
          </div>

          {/* Quick Actions */}
          <div className="card">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              إجراءات سريعة
            </h3>
            
            <div className="space-y-3">
              <button
                onClick={handleDownload}
                disabled={!qrImageUrl}
                className="w-full btn-primary flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Download className="w-4 h-4" />
                <span>تحميل PNG</span>
              </button>
              
              <button
                onClick={() => {
                  if (qrContentForDisplay) {
                    navigator.clipboard.writeText(qrContentForDisplay);
                    toast.success('تم نسخ المحتوى!');
                  }
                }}
                disabled={!qrContentForDisplay}
                className="w-full btn-secondary flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Copy className="w-4 h-4" />
                <span>نسخ المحتوى</span>
              </button>
              
              <button
                onClick={() => {
                  if (navigator.share && qrContentForDisplay) {
                    navigator.share({
                      title: qrData.title || 'رمز QR',
                      text: qrContentForDisplay
                    });
                  } else {
                    toast.error('المشاركة غير مدعومة في هذا المتصفح');
                  }
                }}
                disabled={!qrContentForDisplay}
                className="w-full btn-outline flex items-center justify-center space-x-2 space-x-reverse disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Share2 className="w-4 h-4" />
                <span>مشاركة</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default QRGenerator;


============================================================
FILE: src/pages/Referrals.tsx
============================================================
import React, { useState } from 'react';
import { 
  Users, 
  Gift, 
  Copy, 
  Share2,
  Trophy,
  TrendingUp,
  QrCode,
  Download,
  Star,
  Check
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { mockReferrals } from '../utils/mockData';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Referrals = () => {
  const { user } = useStore();
  const [referrals] = useState(mockReferrals);
  const [showQRModal, setShowQRModal] = useState(false);

  const referralLink = `https://mazyone.com/ref/${user?.id || 'AHMED2024'}`;
  const referralCode = 'AHMED2024';

  const handleCopyLink = () => {
    navigator.clipboard.writeText(referralLink);
    toast.success('تم نسخ رابط الإحالة بنجاح!');
  };

  const handleCopyCode = () => {
    navigator.clipboard.writeText(referralCode);
    toast.success('تم نسخ كود الإحالة بنجاح!');
  };

  const handleShare = async () => {
    const shareData = {
      title: 'انضم إلى مزيون',
      text: 'أنشئ بطاقتك الرقمية الاحترافية مجاناً',
      url: referralLink
    };

    if (navigator.share) {
      try {
        await navigator.share(shareData);
      } catch (error) {
        console.log('Error sharing:', error);
      }
    } else {
      handleCopyLink();
    }
  };

  const stats = [
    {
      name: 'إجمالي الدعوات',
      value: 15,
      icon: Users,
      color: 'bg-blue-500'
    },
    {
      name: 'التسجيلات الناجحة',
      value: 8,
      icon: Check,
      color: 'bg-green-500'
    },
    {
      name: 'المكافآت المكتسبة',
      value: 4,
      icon: Gift,
      color: 'bg-purple-500'
    },
    {
      name: 'إجمالي الأرباح',
      value: '200 ريال',
      icon: TrendingUp,
      color: 'bg-orange-500'
    }
  ];

  const leaderboard = [
    { name: 'أحمد محمد', referrals: 25, position: 1 },
    { name: 'سارة أحمد', referrals: 22, position: 2 },
    { name: 'محمد علي', referrals: 18, position: 3 },
    { name: 'فاطمة خالد', referrals: 15, position: 4 },
    { name: 'أنت', referrals: 8, position: 8 }
  ];

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
            نظام الإحالة
          </h1>
          <p className="text-neutral-600 dark:text-neutral-400">
            ادع أصدقاءك واكسب مكافآت مع كل تسجيل ناجح
          </p>
        </div>
        
        <div className="flex items-center space-x-3 space-x-reverse">
          <button 
            onClick={() => setShowQRModal(true)}
            className="btn-secondary flex items-center space-x-2 space-x-reverse"
          >
            <QrCode className="w-4 h-4" />
            <span>رمز QR</span>
          </button>
          <button 
            onClick={handleShare}
            className="btn-primary flex items-center space-x-2 space-x-reverse"
          >
            <Share2 className="w-4 h-4" />
            <span>مشاركة الرابط</span>
          </button>
        </div>
      </div>

      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <div key={stat.name} className="card">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                  {stat.name}
                </p>
                <p className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mt-1">
                  {stat.value}
                </p>
              </div>
              <div className={cn("p-3 rounded-lg", stat.color)}>
                <stat.icon className="w-6 h-6 text-white" />
              </div>
            </div>
          </div>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Referral Link */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            رابط الإحالة الخاص بك
          </h2>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                الرابط
              </label>
              <div className="flex items-center space-x-2 space-x-reverse">
                <input
                  type="text"
                  value={referralLink}
                  readOnly
                  className="input-field flex-1 bg-neutral-50 dark:bg-neutral-800"
                />
                <button
                  onClick={handleCopyLink}
                  className="p-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                كود الإحالة
              </label>
              <div className="flex items-center space-x-2 space-x-reverse">
                <input
                  type="text"
                  value={referralCode}
                  readOnly
                  className="input-field flex-1 bg-neutral-50 dark:bg-neutral-800"
                />
                <button
                  onClick={handleCopyCode}
                  className="p-2 bg-secondary-500 text-white rounded-lg hover:bg-secondary-600 transition-colors"
                >
                  <Copy className="w-4 h-4" />
                </button>
              </div>
            </div>

            <div className="bg-accent-50 dark:bg-accent-900/20 rounded-lg p-4">
              <h3 className="font-medium text-accent-800 dark:text-accent-200 mb-2">
                🎁 المكافآت المتاحة
              </h3>
              <ul className="text-sm text-accent-700 dark:text-accent-300 space-y-1">
                <li>• 50 ريال لكل 5 تسجيلات ناجحة</li>
                <li>• خصم 20% على الاشتراك السنوي</li>
                <li>• ميزات إضافية مجانية</li>
              </ul>
            </div>
          </div>
        </div>

        {/* Leaderboard */}
        <div className="card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            لوحة المتصدرين
          </h2>
          
          <div className="space-y-3">
            {leaderboard.map((user, index) => (
              <div 
                key={index} 
                className={cn(
                  "flex items-center space-x-3 space-x-reverse p-3 rounded-lg",
                  user.name === 'أنت' 
                    ? "bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800"
                    : "bg-neutral-50 dark:bg-neutral-800"
                )}
              >
                <div className="flex items-center justify-center w-8 h-8 rounded-full bg-primary-500 text-white text-sm font-bold">
                  {user.position <= 3 ? (
                    <Trophy className="w-4 h-4" />
                  ) : (
                    user.position
                  )}
                </div>
                
                <div className="flex-1">
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    {user.name}
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    {user.referrals} إحالة
                  </p>
                </div>
                
                {user.position <= 3 && (
                  <Star className="w-5 h-5 text-accent-500" />
                )}
              </div>
            ))}
          </div>
        </div>

        {/* Referral History */}
        <div className="lg:col-span-2 card">
          <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
            سجل الإحالات
          </h2>
          
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead className="bg-neutral-50 dark:bg-neutral-800">
                <tr>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    البريد الإلكتروني
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    تاريخ الدعوة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    الحالة
                  </th>
                  <th className="px-4 py-3 text-right text-xs font-medium text-neutral-500 dark:text-neutral-400 uppercase tracking-wider">
                    المكافأة
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white dark:bg-neutral-900 divide-y divide-neutral-200 dark:divide-neutral-700">
                {referrals.map((referral) => (
                  <tr key={referral.id}>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {referral.refereeEmail}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {new Date(referral.createdAt).toLocaleDateString('ar-SA')}
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap">
                      <span className={cn(
                        "px-2 py-1 text-xs rounded-full",
                        referral.status === 'completed' 
                          ? "bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-400"
                          : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-400"
                      )}>
                        {referral.status === 'completed' ? 'مكتملة' : 'في الانتظار'}
                      </span>
                    </td>
                    <td className="px-4 py-4 whitespace-nowrap text-sm text-neutral-900 dark:text-neutral-100">
                      {referral.reward ? referral.reward.description : '-'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      </div>

      {/* QR Code Modal */}
      {showQRModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white dark:bg-neutral-900 rounded-lg p-6 max-w-sm w-full">
            <div className="text-center">
              <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
                رمز QR للإحالة
              </h3>
              
              <div className="w-48 h-48 bg-neutral-100 dark:bg-neutral-800 rounded-lg mx-auto mb-4 flex items-center justify-center">
                <QrCode className="w-24 h-24 text-neutral-400" />
              </div>
              
              <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                امسح هذا الرمز للانضمام عبر رابط الإحالة الخاص بك
              </p>
              
              <div className="flex space-x-3 space-x-reverse">
                <button
                  onClick={() => setShowQRModal(false)}
                  className="flex-1 px-4 py-2 border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 rounded-lg hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                >
                  إغلاق
                </button>
                <button className="flex-1 btn-primary">
                  تحميل
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Referrals;


============================================================
FILE: src/pages/Register.tsx
============================================================
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Mail, Lock, User, Eye, EyeOff } from 'lucide-react';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import AuthIllustration from '../assets/auth-illustration.svg';

const Register: React.FC = () => {
  const { registerUser } = useStore();
  const navigate = useNavigate();

  const [showPassword, setShowPassword] = useState(false);
  const [loading, setLoading] = useState(false);
  const [form, setForm] = useState({
    name: '',
    email: '',
    password: '',
  });

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setLoading(true);
    try {
      await registerUser(form);
      toast.success('تم إنشاء الحساب بنجاح');
      navigate('/dashboard');
    } catch {
      toast.error('حدث خطأ ما');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen grid lg:grid-cols-2">
      {/* form */}
      <div className="flex items-center justify-center p-10">
        <form
          onSubmit={handleSubmit}
          className="w-full max-w-md space-y-6 bg-white dark:bg-neutral-900 p-8 rounded-2xl shadow-xl border"
        >
          <header className="text-center space-y-2">
            <h1 className="text-3xl font-bold dark:text-neutral-100">إنشاء حساب</h1>
            <p className="text-neutral-600 dark:text-neutral-400">
              املأ البيانات التالية لإنشاء حسابك
            </p>
          </header>

          {/* name */}
          <div>
            <label className="block mb-2 text-sm font-medium">الاسم الكامل</label>
            <div className="relative">
              <User className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type="text"
                required
                placeholder="أحمد محمد"
                value={form.name}
                onChange={(e) => setForm({ ...form, name: e.target.value })}
                className="input-field pr-10"
              />
            </div>
          </div>

          {/* email */}
          <div>
            <label className="block mb-2 text-sm font-medium">البريد الإلكترونى</label>
            <div className="relative">
              <Mail className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type="email"
                required
                placeholder="name@example.com"
                value={form.email}
                onChange={(e) => setForm({ ...form, email: e.target.value })}
                className="input-field pr-10"
              />
            </div>
          </div>

          {/* password */}
          <div>
            <label className="block mb-2 text-sm font-medium">كلمة المرور</label>
            <div className="relative">
              <Lock className="absolute right-3 top-1/2 -translate-y-1/2 w-5 h-5 text-neutral-400" />
              <input
                type={showPassword ? 'text' : 'password'}
                required
                placeholder="••••••••"
                value={form.password}
                onChange={(e) => setForm({ ...form, password: e.target.value })}
                className="input-field pr-10 pl-10"
              />
              <button
                type="button"
                onClick={() => setShowPassword(!showPassword)}
                className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-400"
              >
                {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
              </button>
            </div>
          </div>

          <button type="submit" className="btn-primary w-full" disabled={loading}>
            {loading ? 'جارى الإنشاء...' : 'تسجيل'}
          </button>

          <p className="text-sm text-center">
            لديك حساب بالفعل؟{' '}
            <a href="/login" className="text-primary-500 hover:underline">
              تسجيل الدخول
            </a>
          </p>
        </form>
      </div>

{/* illustration side */}
<div className="hidden lg:block bg-neutral-50 dark:bg-neutral-800 relative">
  {/* النص أعلى الصورة */}
  <div className="absolute top-0 righ-0 w-full p-10 select-none">
    <h2 className="text-4xl font-extrabold text-primary-500 tracking-tight">
      Mazyon<span className="text-primary-500"></span>
    </h2>
    <p className="mt-2 text-lg max-w-xs text-neutral-600 dark:text-neutral-400">
      build your smart digital identity with&nbsp;Mazyon
    </p>
  </div>

  {/* الصورة نفسها */}
  <img
    src={AuthIllustration}
    alt="Authentication illustration"
    className="w-full h-full object-cover"
  />
</div>
    </div>
  );
};

export default Register;


============================================================
FILE: src/pages/Scan.tsx
============================================================
import React, { useState, useRef, useEffect } from 'react';
import { 
  Camera, 
  Upload, 
  QrCode, 
  Smartphone,
  X,
  CheckCircle,
  AlertCircle,
  Download,
  Share2
} from 'lucide-react';
import { Html5QrcodeScanner } from 'html5-qrcode';
import { useStore } from '../store/useStore';
import toast from 'react-hot-toast';
import { cn } from '../utils/cn';

const Scan = () => {
  const { addContact } = useStore();
  const [scanMode, setScanMode] = useState<'camera' | 'upload' | null>(null);
  const [scanResult, setScanResult] = useState<string | null>(null);
  const [isScanning, setIsScanning] = useState(false);
  const [scannedData, setScannedData] = useState<any>(null);
  const scannerRef = useRef<Html5QrcodeScanner | null>(null);

  useEffect(() => {
    return () => {
      if (scannerRef.current) {
        scannerRef.current.clear();
      }
    };
  }, []);

  const startCameraScanning = () => {
    setScanMode('camera');
    setIsScanning(true);

    const scanner = new Html5QrcodeScanner(
      'qr-reader',
      {
        fps: 10,
        qrbox: { width: 250, height: 250 },
        aspectRatio: 1.0
      },
      false
    );

    scanner.render(
      (decodedText) => {
        handleScanSuccess(decodedText);
        scanner.clear();
        setIsScanning(false);
      },
      (error) => {
        console.log('Scan error:', error);
      }
    );

    scannerRef.current = scanner;
  };

  const handleScanSuccess = (decodedText: string) => {
    setScanResult(decodedText);
    
    // محاولة تحليل البيانات
    try {
      if (decodedText.startsWith('BEGIN:VCARD')) {
        // تحليل vCard
        const vCardData = parseVCard(decodedText);
        setScannedData(vCardData);
        toast.success('تم مسح بطاقة الاتصال بنجاح!');
      } else if (decodedText.startsWith('http')) {
        // رابط ويب
        setScannedData({ type: 'url', url: decodedText });
        toast.success('تم مسح الرابط بنجاح!');
      } else {
        // نص عادي
        setScannedData({ type: 'text', content: decodedText });
        toast.success('تم المسح بنجاح!');
      }
    } catch (error) {
      toast.error('حدث خطأ في تحليل البيانات');
    }
  };

  const parseVCard = (vCardText: string) => {
    const lines = vCardText.split('\n');
    const data: any = { type: 'vcard' };

    lines.forEach(line => {
      if (line.startsWith('FN:')) {
        data.name = line.substring(3);
      } else if (line.startsWith('TEL:')) {
        data.phone = line.substring(4);
      } else if (line.startsWith('EMAIL:')) {
        data.email = line.substring(6);
      } else if (line.startsWith('ORG:')) {
        data.company = line.substring(4);
      } else if (line.startsWith('URL:')) {
        data.website = line.substring(4);
      }
    });

    return data;
  };

  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    setScanMode('upload');
    
    // هنا يمكن إضافة مكتبة لقراءة QR من الصورة
toast('ميزة رفع الصور قيد التطوير', {
  icon: 'ℹ️',
  style: {
    background: '#3B82F6',
    color: '#FFFFFF',
  },
});  };

  const saveContact = () => {
    if (scannedData && scannedData.type === 'vcard') {
      addContact({
          name: scannedData.name || 'جهة اتصال جديدة',
          email: scannedData.email,
          phone: scannedData.phone,
          company: scannedData.company,
          source: 'qr',
          tags: ['مسح ضوئي'],
          updatedAt: '',
          interactionCount: 0
      });
      
      toast.success('تم حفظ جهة الاتصال بنجاح!');
      resetScan();
    }
  };

  const resetScan = () => {
    setScanMode(null);
    setScanResult(null);
    setScannedData(null);
    setIsScanning(false);
    
    if (scannerRef.current) {
      scannerRef.current.clear();
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
          مسح رموز QR والبطاقات
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          امسح رمز QR أو ارفع صورة لاستخراج المعلومات
        </p>
      </div>

      {!scanMode && !scanResult && (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {/* Camera Scan */}
          <div className="card text-center">
            <div className="w-16 h-16 bg-primary-100 dark:bg-primary-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Camera className="w-8 h-8 text-primary-500" />
            </div>
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-2">
              مسح بالكاميرا
            </h3>
            <p className="text-neutral-600 dark:text-neutral-400 mb-4">
              استخدم كاميرا الجهاز لمسح رمز QR مباشرة
            </p>
            <button
              onClick={startCameraScanning}
              className="btn-primary w-full"
            >
              بدء المسح
            </button>
          </div>

          {/* Upload Image */}
          <div className="card text-center">
            <div className="w-16 h-16 bg-secondary-100 dark:bg-secondary-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
              <Upload className="w-8 h-8 text-secondary-500" />
            </div>
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-2">
              رفع صورة
            </h3>
            <p className="text-neutral-600 dark:text-neutral-400 mb-4">
              ارفع صورة تحتوي على رمز QR لاستخراج المعلومات
            </p>
            <label className="btn-secondary w-full cursor-pointer">
              <input
                type="file"
                accept="image/*"
                onChange={handleFileUpload}
                className="hidden"
              />
              اختر صورة
            </label>
          </div>
        </div>
      )}

      {/* Camera Scanner */}
      {scanMode === 'camera' && (
        <div className="card">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              مسح رمز QR
            </h3>
            <button
              onClick={resetScan}
              className="p-2 rounded-lg hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
              <X className="w-5 h-5" />
            </button>
          </div>
          
          <div id="qr-reader" className="w-full"></div>
          
          <div className="mt-4 text-center">
            <p className="text-sm text-neutral-600 dark:text-neutral-400">
              وجه الكاميرا نحو رمز QR للمسح التلقائي
            </p>
          </div>
        </div>
      )}

      {/* Scan Results */}
      {scanResult && scannedData && (
        <div className="card">
          <div className="flex items-center space-x-3 space-x-reverse mb-4">
            <CheckCircle className="w-6 h-6 text-green-500" />
            <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100">
              تم المسح بنجاح
            </h3>
          </div>

          {scannedData.type === 'vcard' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  معلومات جهة الاتصال
                </h4>
                <div className="space-y-2">
                  {scannedData.name && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الاسم:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.name}</span>
                    </div>
                  )}
                  {scannedData.phone && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الهاتف:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.phone}</span>
                    </div>
                  )}
                  {scannedData.email && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">البريد:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.email}</span>
                    </div>
                  )}
                  {scannedData.company && (
                    <div className="flex justify-between">
                      <span className="text-neutral-600 dark:text-neutral-400">الشركة:</span>
                      <span className="text-neutral-900 dark:text-neutral-100">{scannedData.company}</span>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex space-x-3 space-x-reverse">
                <button
                  onClick={saveContact}
                  className="btn-primary flex items-center space-x-2 space-x-reverse"
                >
                  <Download className="w-4 h-4" />
                  <span>حفظ جهة الاتصال</span>
                </button>
                <button
                  onClick={resetScan}
                  className="btn-secondary"
                >
                  مسح جديد
                </button>
              </div>
            </div>
          )}

          {scannedData.type === 'url' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  رابط ويب
                </h4>
                <p className="text-neutral-700 dark:text-neutral-300 break-all">
                  {scannedData.url}
                </p>
              </div>

              <div className="flex space-x-3 space-x-reverse">
                <a
                  href={scannedData.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="btn-primary flex items-center space-x-2 space-x-reverse"
                >
                  <Share2 className="w-4 h-4" />
                  <span>فتح الرابط</span>
                </a>
                <button
                  onClick={resetScan}
                  className="btn-secondary"
                >
                  مسح جديد
                </button>
              </div>
            </div>
          )}

          {scannedData.type === 'text' && (
            <div className="space-y-4">
              <div className="bg-neutral-50 dark:bg-neutral-800 rounded-lg p-4">
                <h4 className="font-medium text-neutral-900 dark:text-neutral-100 mb-3">
                  النص المستخرج
                </h4>
                <p className="text-neutral-700 dark:text-neutral-300">
                  {scannedData.content}
                </p>
              </div>

              <button
                onClick={resetScan}
                className="btn-primary"
              >
                مسح جديد
              </button>
            </div>
          )}
        </div>
      )}

      {/* Instructions */}
      <div className="card">
        <h3 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
          تعليمات الاستخدام
        </h3>
        <div className="space-y-3 text-sm text-neutral-600 dark:text-neutral-400">
          <div className="flex items-start space-x-3 space-x-reverse">
            <QrCode className="w-5 h-5 text-primary-500 mt-0.5" />
            <div>
              <p className="font-medium text-neutral-900 dark:text-neutral-100">رموز QR المدعومة:</p>
              <p>بطاقات الاتصال (vCard)، روابط المواقع، النصوص العادية</p>
            </div>
          </div>
          <div className="flex items-start space-x-3 space-x-reverse">
            <Smartphone className="w-5 h-5 text-secondary-500 mt-0.5" />
            <div>
              <p className="font-medium text-neutral-900 dark:text-neutral-100">نصائح للمسح:</p>
              <p>تأكد من وضوح الرمز وإضاءة كافية، وحافظ على ثبات الجهاز</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Scan;


============================================================
FILE: src/pages/Settings.tsx
============================================================
import React, { useState } from 'react';
import { 
  User, 
  Lock, 
  Globe, 
  Bell, 
  Shield, 
  Palette,
  Download,
  Trash2,
  Eye,
  EyeOff,
  Camera,
  Save,
  Link
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Settings = () => {
  const { user, darkMode, toggleDarkMode, logout } = useStore();
  const [activeTab, setActiveTab] = useState('profile');
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    name: user?.name || '',
    email: user?.email || '',
    phone: user?.phone || '',
    company: user?.company || '',
    bio: user?.bio || '',
    currentPassword: '',
    newPassword: '',
    confirmPassword: ''
  });

  const tabs = [
    { id: 'profile', name: 'الملف الشخصي', icon: User },
    { id: 'security', name: 'الأمان', icon: Shield },
    { id: 'preferences', name: 'التفضيلات', icon: Palette },
    { id: 'notifications', name: 'الإشعارات', icon: Bell },
    { id: 'privacy', name: 'الخصوصية', icon: Lock },
    { id: 'account', name: 'إدارة الحساب', icon: Trash2 }
  ];

  const handleSave = () => {
    toast.success('تم حفظ التغييرات بنجاح!');
  };

  const handlePasswordChange = () => {
    if (formData.newPassword !== formData.confirmPassword) {
      toast.error('كلمات المرور غير متطابقة');
      return;
    }
    toast.success('تم تغيير كلمة المرور بنجاح!');
    setFormData({
      ...formData,
      currentPassword: '',
      newPassword: '',
      confirmPassword: ''
    });
  };

  const handleDeleteAccount = () => {
    if (window.confirm('هل أنت متأكد من حذف حسابك نهائياً؟ هذا الإجراء لا يمكن التراجع عنه.')) {
      if (window.confirm('تأكيد أخير: سيتم حذف جميع بياناتك وبطاقاتك نهائياً.')) {
        toast.success('تم حذف الحساب. سيتم تسجيل خروجك الآن.');
        setTimeout(() => logout(), 2000);
      }
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div>
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100">
          الإعدادات
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          إدارة حسابك وتخصيص تجربتك
        </p>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
        {/* Sidebar */}
        <div className="lg:col-span-1">
          <div className="card">
            <nav className="space-y-2">
              {tabs.map((tab) => (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={cn(
                    "w-full flex items-center space-x-3 space-x-reverse px-3 py-2 rounded-lg text-sm font-medium transition-colors",
                    activeTab === tab.id
                      ? "bg-primary-500 text-white"
                      : "text-neutral-700 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                  )}
                >
                  <tab.icon className="w-4 h-4" />
                  <span>{tab.name}</span>
                </button>
              ))}
            </nav>
          </div>
        </div>

        {/* Main Content */}
        <div className="lg:col-span-3">
          <div className="card">
            {activeTab === 'profile' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  المعلومات الشخصية
                </h2>
                
                <div className="space-y-6">
                  {/* Profile Picture */}
                  <div className="flex items-center space-x-4 space-x-reverse">
                    <div className="w-20 h-20 bg-primary-500 rounded-full flex items-center justify-center">
                      {user?.avatar ? (
                        <img 
                          src={user.avatar} 
                          alt={user.name}
                          className="w-20 h-20 rounded-full object-cover"
                        />
                      ) : (
                        <User className="w-8 h-8 text-white" />
                      )}
                    </div>
                    <div>
                      <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                        <Camera className="w-4 h-4" />
                        <span>تغيير الصورة</span>
                      </button>
                      <p className="text-sm text-neutral-500 dark:text-neutral-400 mt-1">
                        PNG أو JPG، الحد الأقصى 2MB
                      </p>
                    </div>
                  </div>

                  {/* Form Fields */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        الاسم الكامل
                      </label>
                      <input
                        type="text"
                        value={formData.name}
                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        البريد الإلكتروني
                      </label>
                      <input
                        type="email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        رقم الهاتف
                      </label>
                      <input
                        type="tel"
                        value={formData.phone}
                        onChange={(e) => setFormData({ ...formData, phone: e.target.value })}
                        className="input-field"
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                        الشركة
                      </label>
                      <input
                        type="text"
                        value={formData.company}
                        onChange={(e) => setFormData({ ...formData, company: e.target.value })}
                        className="input-field"
                      />
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      نبذة تعريفية
                    </label>
                    <textarea
                      rows={3}
                      value={formData.bio}
                      onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                      className="input-field"
                      placeholder="اكتب نبذة مختصرة عنك..."
                    />
                  </div>

                  <button onClick={handleSave} className="btn-primary">
                    حفظ التغييرات
                  </button>
                </div>
              </div>
            )}

            {activeTab === 'security' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  الأمان
                </h2>
                
                <div className="space-y-6">
                  {/* Change Password */}
                  <div>
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      تغيير كلمة المرور
                    </h3>
                    
                    <div className="space-y-4">
                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          كلمة المرور الحالية
                        </label>
                        <div className="relative">
                          <input
                            type={showPassword ? 'text' : 'password'}
                            value={formData.currentPassword}
                            onChange={(e) => setFormData({ ...formData, currentPassword: e.target.value })}
                            className="input-field pr-10"
                          />
                          <button
                            type="button"
                            onClick={() => setShowPassword(!showPassword)}
                            className="absolute left-3 top-1/2 transform -translate-y-1/2"
                          >
                            {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                          </button>
                        </div>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          كلمة المرور الجديدة
                        </label>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          value={formData.newPassword}
                          onChange={(e) => setFormData({ ...formData, newPassword: e.target.value })}
                          className="input-field"
                        />
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                          تأكيد كلمة المرور الجديدة
                        </label>
                        <input
                          type={showPassword ? 'text' : 'password'}
                          value={formData.confirmPassword}
                          onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                          className="input-field"
                        />
                      </div>

                      <button onClick={handlePasswordChange} className="btn-primary">
                        تغيير كلمة المرور
                      </button>
                    </div>
                  </div>

                  {/* Two Factor Authentication */}
                  <div className="border-t border-neutral-200 dark:border-neutral-700 pt-6">
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      المصادقة الثنائية
                    </h3>
                    
                    <div className="flex items-center justify-between">
                      <div>
                        <p className="text-sm text-neutral-700 dark:text-neutral-300">
                          تأمين إضافي لحسابك
                        </p>
                        <p className="text-xs text-neutral-500 dark:text-neutral-400">
                          ستحتاج لرمز من هاتفك عند تسجيل الدخول
                        </p>
                      </div>
                      <button className="btn-secondary">
                        تفعيل
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'preferences' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  التفضيلات
                </h2>
                
                <div className="space-y-6">
                  {/* Dark Mode */}
                  <div className="flex items-center justify-between">
                    <div>
                      <h3 className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                        الوضع الليلي
                      </h3>
                      <p className="text-xs text-neutral-500 dark:text-neutral-400">
                        تبديل بين الوضع الفاتح والداكن
                      </p>
                    </div>
                    <button
                      onClick={toggleDarkMode}
                      className={cn(
                        "relative inline-flex h-6 w-11 items-center rounded-full transition-colors",
                        darkMode ? "bg-primary-500" : "bg-neutral-300"
                      )}
                    >
                      <span
                        className={cn(
                          "inline-block h-4 w-4 transform rounded-full bg-white transition-transform",
                          darkMode ? "translate-x-6" : "translate-x-1"
                        )}
                      />
                    </button>
                  </div>

                  {/* Language */}
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      اللغة
                    </label>
                    <select className="input-field w-full sm:w-auto">
                      <option value="ar">العربية</option>
                      <option value="en">English</option>
                    </select>
                  </div>

                  {/* Timezone */}
                  <div>
                    <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                      المنطقة الزمنية
                    </label>
                    <select className="input-field w-full sm:w-auto">
                      <option value="Asia/Riyadh">الرياض (GMT+3)</option>
                      <option value="Asia/Dubai">دبي (GMT+4)</option>
                      <option value="Africa/Cairo">القاهرة (GMT+2)</option>
                    </select>
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'account' && (
              <div>
                <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
                  إدارة الحساب
                </h2>
                <div className="card">
  <h3>إدارة الاشتراك</h3>
  <Link to="/subscription" className="btn-primary">
    عرض الباقات وترقية الحساب
  </Link>
</div>
                <div className="space-y-6">
                  {/* Export Data */}
                  <div>
                    <h3 className="text-md font-medium text-neutral-900 dark:text-neutral-100 mb-4">
                      تصدير البيانات
                    </h3>
                    <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                      احصل على نسخة من جميع بياناتك
                    </p>
                    <button className="btn-secondary flex items-center space-x-2 space-x-reverse">
                      <Download className="w-4 h-4" />
                      <span>تصدير البيانات</span>
                    </button>
                  </div>

                  {/* Delete Account */}
                  <div className="border-t border-neutral-200 dark:border-neutral-700 pt-6">
                    <h3 className="text-md font-medium text-red-600 dark:text-red-400 mb-4">
                      حذف الحساب
                    </h3>
                    <p className="text-sm text-neutral-600 dark:text-neutral-400 mb-4">
                      حذف حسابك نهائياً مع جميع البيانات والبطاقات. هذا الإجراء لا يمكن التراجع عنه.
                    </p>
                    <button 
                      onClick={handleDeleteAccount}
                      className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors flex items-center space-x-2 space-x-reverse"
                    >
                      <Trash2 className="w-4 h-4" />
                      <span>حذف الحساب نهائياً</span>
                    </button>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default Settings;


============================================================
FILE: src/pages/Subscription.tsx
============================================================
import React, { useState } from 'react';
import { 
  Check, 
  X, 
  Crown, 
  Zap, 
  Shield, 
  Users, 
  Star,
  ArrowRight,
  CreditCard,
  Gift,
  TrendingUp,
  Globe,
  Smartphone,
  BarChart3,
  Settings,
  Headphones,
  Award,
  Sparkles
} from 'lucide-react';
import { useStore } from '../store/useStore';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Subscription = () => {
  const { user } = useStore();
  const [billingCycle, setBillingCycle] = useState<'monthly' | 'yearly'>('monthly');
  const [selectedPlan, setSelectedPlan] = useState<string | null>(null);

  const plans = [
    {
      id: 'core',
      name: 'مزيون الأصيل',
      nameEn: 'Mazyone Core',
      description: 'مثالي للمبتدئين والاستخدام الشخصي',
      price: { monthly: 0, yearly: 0 },
      color: 'from-gray-500 to-gray-600',
      icon: Smartphone,
      popular: false,
      features: [
        { name: 'بطاقة رقمية واحدة', included: true },
        { name: 'رمز QR أساسي', included: true },
        { name: 'مشاركة عبر الرابط', included: true },
        { name: 'تحليلات أساسية', included: true },
        { name: 'دعم عبر البريد الإلكتروني', included: true },
        { name: 'قوالب محدودة (3)', included: true },
        { name: 'تخصيص الألوان', included: false },
        { name: 'إزالة العلامة المائية', included: false },
        { name: 'صفحات الهبوط', included: false },
        { name: 'منشئ السيرة الذاتية', included: false },
        { name: 'تحليلات متقدمة', included: false },
        { name: 'دعم أولوية', included: false }
      ]
    },
    {
      id: 'pro',
      name: 'مزيون برو',
      nameEn: 'Mazyone Pro',
      description: 'للمحترفين والأعمال الصغيرة',
      price: { monthly: 29, yearly: 290 },
      color: 'from-blue-500 to-blue-600',
      icon: Zap,
      popular: true,
      features: [
        { name: '5 بطاقات رقمية', included: true },
        { name: 'رموز QR مخصصة مع شعار', included: true },
        { name: 'تخصيص كامل للألوان والخطوط', included: true },
        { name: 'تحليلات متقدمة', included: true },
        { name: 'صفحات هبوط (3)', included: true },
        { name: 'منشئ السيرة الذاتية', included: true },
        { name: 'إزالة العلامة المائية', included: true },
        { name: 'دعم عبر الدردشة', included: true },
        { name: 'جميع القوالب', included: true },
        { name: 'تصدير البيانات', included: true },
        { name: 'تكاملات أساسية', included: true },
        { name: 'العلامة البيضاء', included: false }
      ]
    },
    {
      id: 'pro-plus',
      name: 'مزيون برو بلس',
      nameEn: 'Mazyone Pro Plus',
      description: 'للشركات المتوسطة والمحترفين المتقدمين',
      price: { monthly: 59, yearly: 590 },
      color: 'from-purple-500 to-purple-600',
      icon: Crown,
      popular: false,
      features: [
        { name: 'بطاقات غير محدودة', included: true },
        { name: 'جميع ميزات برو', included: true },
        { name: 'صفحات هبوط غير محدودة', included: true },
        { name: 'تحليلات احترافية مع تقارير', included: true },
        { name: 'API مخصص', included: true },
        { name: 'تكاملات متقدمة', included: true },
        { name: 'دعم أولوية 24/7', included: true },
        { name: 'تدريب شخصي', included: true },
        { name: 'نطاق فرعي مخصص', included: true },
        { name: 'نسخ احتياطية تلقائية', included: true },
        { name: 'إدارة الفرق (5 أعضاء)', included: true },
        { name: 'العلامة البيضاء الأساسية', included: true }
      ]
    },
    {
      id: 'business',
      name: 'مزيون المؤسسي',
      nameEn: 'Mazyone Business',
      description: 'للشركات الكبيرة والمؤسسات',
      price: { monthly: 149, yearly: 1490 },
      color: 'from-orange-500 to-red-500',
      icon: Users,
      popular: false,
      features: [
        { name: 'جميع ميزات برو بلس', included: true },
        { name: 'فرق غير محدودة', included: true },
        { name: 'إدارة صلاحيات متقدمة', included: true },
        { name: 'العلامة البيضاء الكاملة', included: true },
        { name: 'نطاق مخصص', included: true },
        { name: 'SSO وتكامل LDAP', included: true },
        { name: 'مدير حساب مخصص', included: true },
        { name: 'SLA مضمون', included: true },
        { name: 'تدريب للفريق', included: true },
        { name: 'تقارير مخصصة', included: true },
        { name: 'أمان متقدم', included: true },
        { name: 'دعم هاتفي مباشر', included: true }
      ]
    }
  ];

  const handlePlanSelect = (planId: string) => {
    setSelectedPlan(planId);
    const plan = plans.find(p => p.id === planId);
    if (plan) {
      toast.success(`تم اختيار باقة ${plan.name}`);
    }
  };

  const handleUpgrade = (planId: string) => {
    const plan = plans.find(p => p.id === planId);
    if (plan) {
      toast.success(`جاري التوجيه لصفحة الدفع لباقة ${plan.name}...`);
      // هنا سيتم التوجيه لصفحة الدفع
    }
  };

  const getCurrentPlan = () => {
    return plans.find(plan => plan.id === user?.subscription) || plans[0];
  };

  const currentPlan = getCurrentPlan();
  const yearlyDiscount = 20; // خصم 20% على الباقة السنوية

  return (
    <div className="space-y-8">
      {/* Header */}
      <div className="text-center">
        <div className="flex items-center justify-center mb-4">
          <div className="w-16 h-16 bg-gradient-to-r from-blue-500 to-purple-500 rounded-2xl flex items-center justify-center">
            <Crown className="w-8 h-8 text-white" />
          </div>
        </div>
        <h1 className="text-4xl font-bold text-neutral-900 dark:text-neutral-100 mb-4">
          اختر الباقة المناسبة لك
        </h1>
        <p className="text-xl text-neutral-600 dark:text-neutral-400 max-w-3xl mx-auto leading-relaxed">
          ارتقِ بتجربتك الرقمية مع باقاتنا المتنوعة. من البداية البسيطة إلى الحلول المؤسسية المتقدمة
        </p>
      </div>

      {/* Current Plan Status */}
      <div className="card bg-gradient-to-r from-blue-50 to-purple-50 dark:from-blue-900/20 dark:to-purple-900/20 border-blue-200 dark:border-blue-800">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-4 space-x-reverse">
            <div className="w-12 h-12 bg-blue-500 rounded-xl flex items-center justify-center">
              <currentPlan.icon className="w-6 h-6 text-white" />
            </div>
            <div>
              <h3 className="text-lg font-semibold text-blue-900 dark:text-blue-100">
                باقتك الحالية: {currentPlan.name}
              </h3>
              <p className="text-blue-700 dark:text-blue-300">
                {currentPlan.description}
              </p>
            </div>
          </div>
          <div className="text-left">
            <p className="text-2xl font-bold text-blue-900 dark:text-blue-100">
              {currentPlan.price.monthly === 0 ? 'مجاني' : `${currentPlan.price.monthly} ريال/شهر`}
            </p>
            {currentPlan.price.monthly > 0 && (
              <p className="text-sm text-blue-600 dark:text-blue-400">
                التجديد التالي: 15 أغسطس 2024
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Billing Toggle */}
      <div className="flex items-center justify-center">
        <div className="bg-neutral-100 dark:bg-neutral-800 p-1 rounded-xl">
          <div className="flex items-center space-x-1 space-x-reverse">
            <button
              onClick={() => setBillingCycle('monthly')}
              className={cn(
                "px-6 py-2 rounded-lg text-sm font-medium transition-all",
                billingCycle === 'monthly'
                  ? "bg-white dark:bg-neutral-700 text-neutral-900 dark:text-neutral-100 shadow-sm"
                  : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100"
              )}
            >
              شهري
            </button>
            <button
              onClick={() => setBillingCycle('yearly')}
              className={cn(
                "px-6 py-2 rounded-lg text-sm font-medium transition-all relative",
                billingCycle === 'yearly'
                  ? "bg-white dark:bg-neutral-700 text-neutral-900 dark:text-neutral-100 shadow-sm"
                  : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100"
              )}
            >
              سنوي
              <span className="absolute -top-2 -right-2 bg-green-500 text-white text-xs px-2 py-0.5 rounded-full">
                وفر {yearlyDiscount}%
              </span>
            </button>
          </div>
        </div>
      </div>

      {/* Plans Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {plans.map((plan) => {
          const isCurrentPlan = plan.id === user?.subscription;
          const price = billingCycle === 'yearly' 
            ? Math.round(plan.price.yearly / 12) 
            : plan.price.monthly;
          const yearlyPrice = plan.price.yearly;
          const monthlySavings = billingCycle === 'yearly' && plan.price.monthly > 0
            ? plan.price.monthly - price
            : 0;

          return (
            <div
              key={plan.id}
              className={cn(
                "relative rounded-2xl border-2 transition-all duration-300 hover:shadow-xl",
                plan.popular 
                  ? "border-blue-500 shadow-lg scale-105" 
                  : "border-neutral-200 dark:border-neutral-700 hover:border-blue-300 dark:hover:border-blue-600",
                isCurrentPlan && "ring-2 ring-blue-500 ring-opacity-50"
              )}
            >
              {/* Popular Badge */}
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <div className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-4 py-1 rounded-full text-sm font-medium flex items-center space-x-1 space-x-reverse">
                    <Star className="w-4 h-4" />
                    <span>الأكثر شعبية</span>
                  </div>
                </div>
              )}

              {/* Current Plan Badge */}
              {isCurrentPlan && (
                <div className="absolute -top-4 right-4">
                  <div className="bg-green-500 text-white px-3 py-1 rounded-full text-xs font-medium">
                    باقتك الحالية
                  </div>
                </div>
              )}

              <div className="p-6">
                {/* Plan Header */}
                <div className="text-center mb-6">
                  <div className={cn(
                    "w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 bg-gradient-to-r",
                    plan.color
                  )}>
                    <plan.icon className="w-8 h-8 text-white" />
                  </div>
                  <h3 className="text-xl font-bold text-neutral-900 dark:text-neutral-100 mb-1">
                    {plan.name}
                  </h3>
                  <p className="text-neutral-600 dark:text-neutral-400 text-sm">
                    {plan.description}
                  </p>
                </div>

                {/* Pricing */}
                <div className="text-center mb-6">
                  {price === 0 ? (
                    <div className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
                      مجاني
                    </div>
                  ) : (
                    <>
                      <div className="flex items-center justify-center space-x-1 space-x-reverse">
                        <span className="text-3xl font-bold text-neutral-900 dark:text-neutral-100">
                          {price}
                        </span>
                        <div className="text-right">
                          <div className="text-sm text-neutral-600 dark:text-neutral-400">ريال</div>
                          <div className="text-xs text-neutral-500 dark:text-neutral-500">
                            /{billingCycle === 'yearly' ? 'شهر' : 'شهر'}
                          </div>
                        </div>
                      </div>
                      
                      {billingCycle === 'yearly' && (
                        <div className="mt-2">
                          <p className="text-sm text-green-600 dark:text-green-400 font-medium">
                            وفر {monthlySavings} ريال شهرياً
                          </p>
                          <p className="text-xs text-neutral-500 dark:text-neutral-500">
                            ({yearlyPrice} ريال سنوياً)
                          </p>
                        </div>
                      )}
                    </>
                  )}
                </div>

                {/* Features */}
                <div className="space-y-3 mb-6">
                  {plan.features.slice(0, 6).map((feature, index) => (
                    <div key={index} className="flex items-center space-x-3 space-x-reverse">
                      {feature.included ? (
                        <Check className="w-5 h-5 text-green-500 flex-shrink-0" />
                      ) : (
                        <X className="w-5 h-5 text-neutral-400 flex-shrink-0" />
                      )}
                      <span className={cn(
                        "text-sm",
                        feature.included 
                          ? "text-neutral-700 dark:text-neutral-300" 
                          : "text-neutral-400 dark:text-neutral-600"
                      )}>
                        {feature.name}
                      </span>
                    </div>
                  ))}
                  
                  {plan.features.length > 6 && (
                    <div className="text-center pt-2">
                      <button className="text-blue-500 hover:text-blue-600 text-sm font-medium">
                        عرض جميع الميزات ({plan.features.length})
                      </button>
                    </div>
                  )}
                </div>

                {/* Action Button */}
                <div className="space-y-3">
                  {isCurrentPlan ? (
                    <button className="w-full bg-green-100 dark:bg-green-900/20 text-green-700 dark:text-green-400 py-3 rounded-lg font-medium border border-green-200 dark:border-green-800">
                      باقتك الحالية
                    </button>
                  ) : (
                    <button
                      onClick={() => handleUpgrade(plan.id)}
                      className={cn(
                        "w-full py-3 rounded-lg font-medium transition-all duration-200 flex items-center justify-center space-x-2 space-x-reverse",
                        plan.popular
                          ? "bg-gradient-to-r from-blue-500 to-purple-500 text-white hover:from-blue-600 hover:to-purple-600 shadow-lg hover:shadow-xl"
                          : "bg-neutral-900 dark:bg-neutral-100 text-white dark:text-neutral-900 hover:bg-neutral-800 dark:hover:bg-neutral-200"
                      )}
                    >
                      <span>{price === 0 ? 'ابدأ مجاناً' : 'ترقية الآن'}</span>
                      <ArrowRight className="w-4 h-4" />
                    </button>
                  )}
                  
                  {!isCurrentPlan && price > 0 && (
                    <button
                      onClick={() => handlePlanSelect(plan.id)}
                      className="w-full border border-neutral-300 dark:border-neutral-600 text-neutral-700 dark:text-neutral-300 py-2 rounded-lg font-medium hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                    >
                      تجربة مجانية 14 يوم
                    </button>
                  )}
                </div>
              </div>
            </div>
          );
        })}
      </div>

      {/* Features Comparison */}
      <div className="card">
        <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 text-center">
          مقارنة شاملة للباقات
        </h2>
        
        <div className="overflow-x-auto">
          <table className="w-full">
            <thead>
              <tr className="border-b border-neutral-200 dark:border-neutral-700">
                <th className="text-right py-4 px-4 font-medium text-neutral-900 dark:text-neutral-100">
                  الميزة
                </th>
                {plans.map((plan) => (
                  <th key={plan.id} className="text-center py-4 px-4">
                    <div className="flex flex-col items-center">
                      <plan.icon className="w-6 h-6 text-neutral-600 dark:text-neutral-400 mb-2" />
                      <span className="font-medium text-neutral-900 dark:text-neutral-100 text-sm">
                        {plan.name}
                      </span>
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {[
                'عدد البطاقات',
                'رموز QR مخصصة',
                'تخصيص التصميم',
                'صفحات الهبوط',
                'منشئ السيرة الذاتية',
                'التحليلات',
                'الدعم الفني',
                'العلامة البيضاء',
                'إدارة الفرق',
                'API مخصص'
              ].map((feature, index) => (
                <tr key={index} className="border-b border-neutral-100 dark:border-neutral-800">
                  <td className="py-4 px-4 font-medium text-neutral-700 dark:text-neutral-300">
                    {feature}
                  </td>
                  {plans.map((plan) => (
                    <td key={plan.id} className="py-4 px-4 text-center">
                      {index === 0 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? '1' : 
                           plan.id === 'pro' ? '5' : 
                           plan.id === 'pro-plus' ? '∞' : '∞'}
                        </span>
                      )}
                      {index === 1 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 2 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 3 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          plan.id === 'pro' ?
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">3</span> :
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">∞</span>
                      )}
                      {index === 4 && (
                        plan.id === 'core' ? 
                          <X className="w-5 h-5 text-neutral-400 mx-auto" /> :
                          <Check className="w-5 h-5 text-green-500 mx-auto" />
                      )}
                      {index === 5 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? 'أساسية' : 
                           plan.id === 'pro' ? 'متقدمة' : 
                           plan.id === 'pro-plus' ? 'احترافية' : 'مؤسسية'}
                        </span>
                      )}
                      {index === 6 && (
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">
                          {plan.id === 'core' ? 'إيميل' : 
                           plan.id === 'pro' ? 'دردشة' : 
                           plan.id === 'pro-plus' ? '24/7' : 'مخصص'}
                        </span>
                      )}
                      {index === 7 && (
                        ['pro-plus', 'business'].includes(plan.id) ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                      {index === 8 && (
                        plan.id === 'business' ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          plan.id === 'pro-plus' ?
                            <span className="text-sm font-medium text-neutral-600 dark:text-neutral-400">5</span> :
                            <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                      {index === 9 && (
                        ['pro-plus', 'business'].includes(plan.id) ? 
                          <Check className="w-5 h-5 text-green-500 mx-auto" /> :
                          <X className="w-5 h-5 text-neutral-400 mx-auto" />
                      )}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* FAQ Section */}
      <div className="card">
        <h2 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-6 text-center">
          الأسئلة الشائعة حول الباقات
        </h2>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {[
            {
              question: 'هل يمكنني تغيير باقتي لاحقاً؟',
              answer: 'نعم، يمكنك ترقية أو تخفيض باقتك في أي وقت. التغييرات تسري فوراً مع احتساب تناسبي للتكلفة.'
            },
            {
              question: 'ما هي مدة التجربة المجانية؟',
              answer: 'نوفر تجربة مجانية لمدة 14 يوماً لجميع الباقات المدفوعة مع إمكانية الوصول لجميع الميزات.'
            },
            {
              question: 'هل هناك رسوم إضافية خفية؟',
              answer: 'لا، جميع الأسعار شاملة ولا توجد رسوم إضافية. ما تراه هو ما تدفعه بالضبط.'
            },
            {
              question: 'كيف يعمل الخصم السنوي؟',
              answer: 'عند اختيار الدفع السنوي، تحصل على خصم 20% مقارنة بالدفع الشهري مع توفير كبير.'
            },
            {
              question: 'هل يمكنني إلغاء اشتراكي؟',
              answer: 'نعم، يمكنك إلغاء اشتراكك في أي وقت. ستحتفظ بالوصول حتى نهاية فترة الفوترة الحالية.'
            },
            {
              question: 'ما هي وسائل الدفع المقبولة؟',
              answer: 'نقبل جميع البطاقات الائتمانية الرئيسية، Apple Pay، Google Pay، والتحويل البنكي.'
            }
          ].map((faq, index) => (
            <div key={index} className="space-y-2">
              <h3 className="font-semibold text-neutral-900 dark:text-neutral-100">
                {faq.question}
              </h3>
              <p className="text-neutral-600 dark:text-neutral-400 text-sm leading-relaxed">
                {faq.answer}
              </p>
            </div>
          ))}
        </div>
      </div>

      {/* CTA Section */}
      <div className="card bg-gradient-to-r from-blue-500 to-purple-600 text-white text-center">
        <div className="max-w-2xl mx-auto">
          <Sparkles className="w-12 h-12 mx-auto mb-4" />
          <h2 className="text-3xl font-bold mb-4">
            جاهز لترقية تجربتك؟
          </h2>
          <p className="text-blue-100 mb-6 leading-relaxed">
            انضم إلى آلاف المحترفين الذين يستخدمون مزيون لبناء هويتهم الرقمية وتوسيع شبكة اتصالاتهم
          </p>
          <div className="flex flex-col sm:flex-row items-center justify-center space-y-3 sm:space-y-0 sm:space-x-4 sm:space-x-reverse">
            <button className="bg-white text-blue-600 px-8 py-3 rounded-lg font-medium hover:bg-blue-50 transition-colors flex items-center space-x-2 space-x-reverse">
              <span>ابدأ التجربة المجانية</span>
              <ArrowRight className="w-4 h-4" />
            </button>
            <button className="border border-white/30 text-white px-8 py-3 rounded-lg font-medium hover:bg-white/10 transition-colors flex items-center space-x-2 space-x-reverse">
              <Headphones className="w-4 h-4" />
              <span>تحدث مع المبيعات</span>
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Subscription;


============================================================
FILE: src/pages/Support.tsx
============================================================
import React, { useState } from 'react';
import { 
  Search, 
  MessageCircle, 
  Mail, 
  Phone,
  ChevronDown,
  ChevronUp,
  Send,
  FileText,
  Video,
  HelpCircle,
  X
} from 'lucide-react';
import { cn } from '../utils/cn';
import toast from 'react-hot-toast';

const Support = () => {
  const [searchTerm, setSearchTerm] = useState('');
  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);
  const [contactForm, setContactForm] = useState({
    name: '',
    email: '',
    subject: '',
    message: ''
  });

  const faqs = [
    {
      id: '1',
      question: 'كيف أنشئ بطاقة رقمية جديدة؟',
      answer: 'يمكنك إنشاء بطاقة رقمية جديدة بالذهاب إلى قسم "بطاقاتي" والضغط على زر "أنشئ بطاقة جديدة". املأ المعلومات المطلوبة واختر التصميم المناسب.'
    },
    {
      id: '2',
      question: 'كيف أشارك بطاقتي مع الآخرين؟',
      answer: 'يمكنك مشاركة بطاقتك عبر رمز QR، رابط مباشر، أو تقنية NFC. كل بطاقة تحتوي على خيارات مشاركة متعددة.'
    },
    {
      id: '3',
      question: 'هل يمكنني تخصيص تصميم بطاقتي؟',
      answer: 'نعم، يمكنك تخصيص الألوان، الخطوط، إضافة شعارك، وترتيب العناصر حسب تفضيلك.'
    },
    {
      id: '4',
      question: 'كيف أتتبع من شاهد بطاقتي؟',
      answer: 'في قسم التحليلات، يمكنك مشاهدة عدد المشاهدات، المشاركات، والنقرات على بطاقتك.'
    },
    {
      id: '5',
      question: 'هل بياناتي آمنة؟',
      answer: 'نعم، نستخدم أحدث تقنيات التشفير لحماية بياناتك. يمكنك أيضاً التحكم في خصوصية بطاقتك.'
    }
  ];

  const helpVideos = [
    {
      id: '1',
      title: 'كيفية إنشاء بطاقة رقمية',
      duration: '3:45',
      thumbnail: '/videos/create-card.jpg'
    },
    {
      id: '2',
      title: 'مشاركة البطاقة عبر QR',
      duration: '2:30',
      thumbnail: '/videos/share-qr.jpg'
    },
    {
      id: '3',
      title: 'تخصيص تصميم البطاقة',
      duration: '4:15',
      thumbnail: '/videos/customize.jpg'
    }
  ];

  const filteredFAQs = faqs.filter(faq =>
    faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
    faq.answer.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmitContact = (e: React.FormEvent) => {
    e.preventDefault();
    toast.success('تم إرسال رسالتك بنجاح! سنرد عليك قريباً.');
    setContactForm({ name: '', email: '', subject: '', message: '' });
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="text-center">
        <h1 className="text-2xl font-bold text-neutral-900 dark:text-neutral-100 mb-2">
          مرحباً! كيف يمكننا مساعدتك؟
        </h1>
        <p className="text-neutral-600 dark:text-neutral-400">
          ابحث في الأسئلة الشائعة أو تواصل معنا مباشرة
        </p>
      </div>

      {/* Search */}
      <div className="max-w-2xl mx-auto">
        <div className="relative">
          <Search className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-neutral-400" />
          <input
            type="text"
            placeholder="ابحث في الأسئلة الشائعة..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="input-field pr-10 text-center"
          />
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* FAQ Section */}
        <div className="lg:col-span-2">
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              الأسئلة الشائعة
            </h2>
            
            <div className="space-y-4">
              {filteredFAQs.map((faq) => (
                <div key={faq.id} className="border border-neutral-200 dark:border-neutral-700 rounded-lg">
                  <button
                    onClick={() => setExpandedFAQ(expandedFAQ === faq.id ? null : faq.id)}
                    className="w-full flex items-center justify-between p-4 text-right hover:bg-neutral-50 dark:hover:bg-neutral-800 transition-colors"
                  >
                    <span className="font-medium text-neutral-900 dark:text-neutral-100">
                      {faq.question}
                    </span>
                    {expandedFAQ === faq.id ? (
                      <ChevronUp className="w-5 h-5 text-neutral-500" />
                    ) : (
                      <ChevronDown className="w-5 h-5 text-neutral-500" />
                    )}
                  </button>
                  
                  {expandedFAQ === faq.id && (
                    <div className="px-4 pb-4">
                      <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                        {faq.answer}
                      </p>
                    </div>
                  )}
                </div>
              ))}
            </div>

            {filteredFAQs.length === 0 && (
              <div className="text-center py-8">
                <HelpCircle className="w-12 h-12 text-neutral-400 mx-auto mb-4" />
                <p className="text-neutral-600 dark:text-neutral-400">
                  لم نجد أسئلة مطابقة لبحثك
                </p>
              </div>
            )}
          </div>

          {/* Help Videos */}
          <div className="card mt-6">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              فيديوهات المساعدة
            </h2>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {helpVideos.map((video) => (
                <div key={video.id} className="group cursor-pointer">
                  <div className="aspect-video bg-neutral-100 dark:bg-neutral-800 rounded-lg mb-3 relative overflow-hidden">
                    <div className="absolute inset-0 bg-gradient-to-br from-primary-500/20 to-secondary-500/20 flex items-center justify-center">
                      <Video className="w-12 h-12 text-neutral-400" />
                    </div>
                    <div className="absolute bottom-2 left-2 bg-black bg-opacity-75 text-white text-xs px-2 py-1 rounded">
                      {video.duration}
                    </div>
                  </div>
                  <h3 className="font-medium text-neutral-900 dark:text-neutral-100 group-hover:text-primary-500 transition-colors">
                    {video.title}
                  </h3>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Contact Section */}
        <div className="space-y-6">
          {/* Contact Form */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              تواصل معنا
            </h2>
            
            <form onSubmit={handleSubmitContact} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الاسم
                </label>
                <input
                  type="text"
                  value={contactForm.name}
                  onChange={(e) => setContactForm({ ...contactForm, name: e.target.value })}
                  className="input-field"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  البريد الإلكتروني
                </label>
                <input
                  type="email"
                  value={contactForm.email}
                  onChange={(e) => setContactForm({ ...contactForm, email: e.target.value })}
                  className="input-field"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الموضوع
                </label>
                <select
                  value={contactForm.subject}
                  onChange={(e) => setContactForm({ ...contactForm, subject: e.target.value })}
                  className="input-field"
                  required
                >
                  <option value="">اختر الموضوع</option>
                  <option value="technical">مشكلة تقنية</option>
                  <option value="billing">الفوترة والاشتراك</option>
                  <option value="feature">طلب ميزة جديدة</option>
                  <option value="general">استفسار عام</option>
                </select>
              </div>

              <div>
                <label className="block text-sm font-medium text-neutral-700 dark:text-neutral-300 mb-2">
                  الرسالة
                </label>
                <textarea
                  rows={4}
                  value={contactForm.message}
                  onChange={(e) => setContactForm({ ...contactForm, message: e.target.value })}
                  className="input-field"
                  placeholder="اكتب رسالتك هنا..."
                  required
                />
              </div>

              <button
                type="submit"
                className="btn-primary w-full flex items-center justify-center space-x-2 space-x-reverse"
              >
                <Send className="w-4 h-4" />
                <span>إرسال الرسالة</span>
              </button>
            </form>
          </div>

          {/* Contact Info */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-6">
              طرق التواصل الأخرى
            </h2>
            
            <div className="space-y-4">
              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-primary-100 dark:bg-primary-900/20 rounded-lg flex items-center justify-center">
                  <Mail className="w-5 h-5 text-primary-500" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    البريد الإلكتروني
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    support@mazyone.com
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-secondary-100 dark:bg-secondary-900/20 rounded-lg flex items-center justify-center">
                  <MessageCircle className="w-5 h-5 text-secondary-500" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    الدردشة المباشرة
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    متاح 24/7
                  </p>
                </div>
              </div>

              <div className="flex items-center space-x-3 space-x-reverse">
                <div className="w-10 h-10 bg-accent-100 dark:bg-accent-900/20 rounded-lg flex items-center justify-center">
                  <Phone className="w-5 h-5 text-accent-600" />
                </div>
                <div>
                  <p className="font-medium text-neutral-900 dark:text-neutral-100">
                    الهاتف
                  </p>
                  <p className="text-sm text-neutral-600 dark:text-neutral-400">
                    +966 11 234 5678
                  </p>
                </div>
              </div>

              <div className="pt-4 border-t border-neutral-200 dark:border-neutral-700">
                <button className="btn-primary w-full">
                  بدء محادثة مباشرة
                </button>
              </div>
            </div>
          </div>

          {/* Quick Links */}
          <div className="card">
            <h2 className="text-lg font-semibold text-neutral-900 dark:text-neutral-100 mb-4">
              روابط سريعة
            </h2>
            
            <div className="space-y-2">
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                دليل البدء السريع
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                وثائق API
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                حالة الخدمة
              </a>
              <a href="#" className="block text-primary-500 hover:text-primary-600 text-sm">
                تحديثات المنصة
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Support;


============================================================
FILE: src/styles/animations.css
============================================================
/* ملف الرسوم المتحركة المخصص */

/* رسوم متحركة للتحميل */
@keyframes mazyone-pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes mazyone-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes mazyone-bounce {
  0%, 20%, 53%, 80%, 100% {
    transform: translate3d(0, 0, 0);
  }
  40%, 43% {
    transform: translate3d(0, -30px, 0);
  }
  70% {
    transform: translate3d(0, -15px, 0);
  }
  90% {
    transform: translate3d(0, -4px, 0);
  }
}

/* رسوم متحركة للظهور */
@keyframes mazyone-fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-up {
  from {
    transform: translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-down {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-right {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes mazyone-slide-in-left {
  from {
    transform: translateX(-100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

@keyframes mazyone-scale-in {
  from {
    transform: scale(0.9);
    opacity: 0;
  }
  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes mazyone-scale-out {
  from {
    transform: scale(1);
    opacity: 1;
  }
  to {
    transform: scale(0.9);
    opacity: 0;
  }
}

/* رسوم متحركة للتفاعل */
@keyframes mazyone-shake {
  0%, 100% {
    transform: translateX(0);
  }
  10%, 30%, 50%, 70%, 90% {
    transform: translateX(-10px);
  }
  20%, 40%, 60%, 80% {
    transform: translateX(10px);
  }
}

@keyframes mazyone-wobble {
  0% {
    transform: translateX(0%);
  }
  15% {
    transform: translateX(-25%) rotate(-5deg);
  }
  30% {
    transform: translateX(20%) rotate(3deg);
  }
  45% {
    transform: translateX(-15%) rotate(-3deg);
  }
  60% {
    transform: translateX(10%) rotate(2deg);
  }
  75% {
    transform: translateX(-5%) rotate(-1deg);
  }
  100% {
    transform: translateX(0%);
  }
}

/* فئات الرسوم المتحركة */
.animate-mazyone-pulse {
  animation: mazyone-pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
}

.animate-mazyone-spin {
  animation: mazyone-spin 1s linear infinite;
}

.animate-mazyone-bounce {
  animation: mazyone-bounce 1s infinite;
}

.animate-mazyone-fade-in {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.animate-mazyone-slide-in-up {
  animation: mazyone-slide-in-up 0.3s ease-in-out;
}

.animate-mazyone-slide-in-down {
  animation: mazyone-slide-in-down 0.3s ease-in-out;
}

.animate-mazyone-slide-in-right {
  animation: mazyone-slide-in-right 0.3s ease-in-out;
}

.animate-mazyone-slide-in-left {
  animation: mazyone-slide-in-left 0.3s ease-in-out;
}

.animate-mazyone-scale-in {
  animation: mazyone-scale-in 0.2s ease-in-out;
}

.animate-mazyone-scale-out {
  animation: mazyone-scale-out 0.2s ease-in-out;
}

.animate-mazyone-shake {
  animation: mazyone-shake 0.5s ease-in-out;
}

.animate-mazyone-wobble {
  animation: mazyone-wobble 1s ease-in-out;
}

/* تأثيرات التمرير */
.hover-lift {
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.hover-lift:hover {
  transform: translateY(-4px);
  box-shadow: var(--mazyone-shadow-lg);
}

.hover-scale {
  transition: transform 0.2s ease-in-out;
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-rotate {
  transition: transform 0.2s ease-in-out;
}

.hover-rotate:hover {
  transform: rotate(5deg);
}

/* تأثيرات التركيز */
.focus-ring {
  transition: box-shadow 0.2s ease-in-out;
}

.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

/* تأثيرات الضغط */
.active-scale {
  transition: transform 0.1s ease-in-out;
}

.active-scale:active {
  transform: scale(0.95);
}

/* تأثيرات التحميل */
.loading-dots {
  display: inline-block;
}

.loading-dots::after {
  content: '';
  animation: mazyone-pulse 1.5s ease-in-out infinite;
}

.loading-skeleton {
  background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
  background-size: 200% 100%;
  animation: loading-skeleton 1.5s infinite;
}

@keyframes loading-skeleton {
  0% {
    background-position: 200% 0;
  }
  100% {
    background-position: -200% 0;
  }
}

/* تأثيرات الظهور المتدرج */
.stagger-children > * {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.stagger-children > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-children > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-children > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-children > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-children > *:nth-child(5) { animation-delay: 0.5s; }

/* تأثيرات الانتقال السلس */
.transition-smooth {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.transition-fast {
  transition: all 0.15s ease-in-out;
}

.transition-slow {
  transition: all 0.5s ease-in-out;
}

/* تحسينات الأداء */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.will-change-scroll {
  will-change: scroll-position;
}

/* تأثيرات خاصة بالمشروع */
.card-flip {
  perspective: 1000px;
}

.card-flip-inner {
  transition: transform 0.6s;
  transform-style: preserve-3d;
}

.card-flip:hover .card-flip-inner {
  transform: rotateY(180deg);
}

.card-flip-front,
.card-flip-back {
  backface-visibility: hidden;
}

.card-flip-back {
  transform: rotateY(180deg);
}

/* تأثيرات الإشعارات */
.notification-slide-in {
  animation: mazyone-slide-in-right 0.3s ease-in-out;
}

.notification-slide-out {
  animation: mazyone-slide-in-left 0.3s ease-in-out reverse;
}

/* تأثيرات القوائم */
.menu-slide-down {
  animation: mazyone-slide-in-down 0.2s ease-in-out;
}

.menu-fade-in {
  animation: mazyone-fade-in 0.2s ease-in-out;
}

/* تأثيرات المودال */
.modal-backdrop {
  animation: mazyone-fade-in 0.3s ease-in-out;
}

.modal-content {
  animation: mazyone-scale-in 0.3s ease-in-out;
}

/* تحسينات للحركة المنخفضة */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }
}


/* رسوم متحركة متقدمة للصفحة الرئيسية */

/* تأثيرات الظهور التدريجي */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInLeft {
  from {
    opacity: 0;
    transform: translateX(-30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes fadeInRight {
  from {
    opacity: 0;
    transform: translateX(30px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

/* تأثيرات التكبير */
@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.8);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes scaleUp {
  from {
    transform: scale(1);
  }
  to {
    transform: scale(1.05);
  }
}

/* تأثيرات الدوران */
@keyframes rotateIn {
  from {
    opacity: 0;
    transform: rotate(-180deg);
  }
  to {
    opacity: 1;
    transform: rotate(0deg);
  }
}

/* تأثيرات النبضة */
@keyframes pulse {
  0%, 100% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(1.05);
    opacity: 0.8;
  }
}

@keyframes heartbeat {
  0%, 100% {
    transform: scale(1);
  }
  25% {
    transform: scale(1.1);
  }
  50% {
    transform: scale(1);
  }
  75% {
    transform: scale(1.05);
  }
}

/* تأثيرات الطفو */
@keyframes float {
  0%, 100% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-10px);
  }
}

@keyframes floatReverse {
  0%, 100% {
    transform: translateY(-10px);
  }
  50% {
    transform: translateY(0px);
  }
}

/* تأثيرات الوميض */
@keyframes glow {
  0%, 100% {
    box-shadow: 0 0 20px rgba(59, 130, 246, 0.3);
  }
  50% {
    box-shadow: 0 0 30px rgba(59, 130, 246, 0.6);
  }
}

/* تأثيرات الانزلاق */
@keyframes slideInFromTop {
  from {
    opacity: 0;
    transform: translateY(-100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInFromBottom {
  from {
    opacity: 0;
    transform: translateY(100%);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* تأثيرات التدرج */
@keyframes gradientShift {
  0% {
    background-position: 0% 50%;
  }
  50% {
    background-position: 100% 50%;
  }
  100% {
    background-position: 0% 50%;
  }
}

/* فئات الرسوم المتحركة */
.animate-fade-in-up {
  animation: fadeInUp 0.8s ease-out;
}

.animate-fade-in-down {
  animation: fadeInDown 0.8s ease-out;
}

.animate-fade-in-left {
  animation: fadeInLeft 0.8s ease-out;
}

.animate-fade-in-right {
  animation: fadeInRight 0.8s ease-out;
}

.animate-scale-in {
  animation: scaleIn 0.6s ease-out;
}

.animate-rotate-in {
  animation: rotateIn 0.8s ease-out;
}

.animate-pulse-slow {
  animation: pulse 3s ease-in-out infinite;
}

.animate-heartbeat {
  animation: heartbeat 2s ease-in-out infinite;
}

.animate-float {
  animation: float 3s ease-in-out infinite;
}

.animate-float-reverse {
  animation: floatReverse 3s ease-in-out infinite;
}

.animate-glow {
  animation: glow 2s ease-in-out infinite;
}

.animate-gradient {
  background-size: 400% 400%;
  animation: gradientShift 8s ease infinite;
}

/* تأثيرات التمرير */
.hover-lift {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
}

.hover-lift:hover {
  transform: translateY(-8px);
  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
}

.hover-scale {
  transition: transform 0.3s ease;
}

.hover-scale:hover {
  transform: scale(1.05);
}

.hover-rotate {
  transition: transform 0.3s ease;
}

.hover-rotate:hover {
  transform: rotate(5deg);
}

/* تأثيرات الخلفية المتحركة */
.bg-animated {
  background: linear-gradient(-45deg, #1D4ED8, #06B6D4, #10B981, #8B5CF6);
  background-size: 400% 400%;
  animation: gradientShift 15s ease infinite;
}

/* تأثيرات النص */
.text-shimmer {
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.4),
    transparent
  );
  background-size: 200% 100%;
  animation: shimmer 2s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

/* تأثيرات التحميل */
.loading-dots {
  display: inline-flex;
  gap: 4px;
}

.loading-dots span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: currentColor;
  animation: loading-dot 1.4s ease-in-out infinite both;
}

.loading-dots span:nth-child(1) { animation-delay: -0.32s; }
.loading-dots span:nth-child(2) { animation-delay: -0.16s; }
.loading-dots span:nth-child(3) { animation-delay: 0s; }

@keyframes loading-dot {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1.2);
    opacity: 1;
  }
}

/* تأثيرات الانتقال السلس */
.smooth-transition {
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

.smooth-transition-slow {
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
}

/* تأثيرات التركيز */
.focus-ring {
  transition: box-shadow 0.2s ease;
}

.focus-ring:focus {
  outline: none;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.3);
}

/* تأثيرات الظهور المتدرج للعناصر */
.stagger-animation > *:nth-child(1) { animation-delay: 0.1s; }
.stagger-animation > *:nth-child(2) { animation-delay: 0.2s; }
.stagger-animation > *:nth-child(3) { animation-delay: 0.3s; }
.stagger-animation > *:nth-child(4) { animation-delay: 0.4s; }
.stagger-animation > *:nth-child(5) { animation-delay: 0.5s; }
.stagger-animation > *:nth-child(6) { animation-delay: 0.6s; }

/* تحسينات الأداء */
.will-change-transform {
  will-change: transform;
}

.will-change-opacity {
  will-change: opacity;
}

.will-change-contents {
  will-change: contents;
}

/* تأثيرات خاصة بالمشروع */
.card-hover-effect {
  transition: all 0.3s ease;
  transform-style: preserve-3d;
}

.card-hover-effect:hover {
  transform: translateY(-10px) rotateX(5deg);
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
}

.hero-background {
  background: radial-gradient(ellipse at top, rgba(59, 130, 246, 0.1) 0%, transparent 50%),
              radial-gradient(ellipse at bottom, rgba(16, 185, 129, 0.1) 0%, transparent 50%);
}

/* تأثيرات متقدمة للأزرار */
.btn-animated {
  position: relative;
  overflow: hidden;
  transition: all 0.3s ease;
}

.btn-animated::before {
  content: '';
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
  transition: left 0.5s ease;
}

.btn-animated:hover::before {
  left: 100%;
}

.btn-animated:hover {
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
}

/* تحسينات للحركة المنخفضة */
@media (prefers-reduced-motion: reduce) {
  *,
  *::before,
  *::after {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
    scroll-behavior: auto !important;
  }
}

/* تأثيرات الشاشات الصغيرة */
@media (max-width: 768px) {
  .animate-fade-in-up,
  .animate-fade-in-down,
  .animate-fade-in-left,
  .animate-fade-in-right {
    animation-duration: 0.6s;
  }
  
  .hover-lift:hover {
    transform: translateY(-4px);
  }
  
  .card-hover-effect:hover {
    transform: translateY(-5px);
  }
}


============================================================
FILE: src/styles/colors.css
============================================================
/* ملف الألوان المخصص */

/* متغيرات CSS للألوان الأساسية */
:root {
  /* الألوان الأساسية من لوحة التصميم */
  --mazyone-primary-dark: #2D2D2D;
  --mazyone-primary-gray: #444444;
  --mazyone-bg-secondary: #EDEDED;
  --mazyone-bg-light: #F5F5F5;
  --mazyone-bg-primary: #FFFFFF;
  --mazyone-accent-blue: #006BE3;
  --mazyone-accent-teal: #7EDDB9;
  --mazyone-accent-yellow: #FACC15;
  --mazyone-accent-orange: #E1841F;
  
  /* ألوان إضافية للنظام */
  --mazyone-success: #22C55E;
  --mazyone-warning: #F59E0B;
  --mazyone-error: #EF4444;
  --mazyone-info: #3B82F6;
  
  /* ألوان النصوص */
  --mazyone-text-primary: var(--mazyone-primary-dark);
  --mazyone-text-secondary: #4B4B4B;
  --mazyone-text-muted: #6B7280;
  --mazyone-text-light: #9CA3AF;
  
  /* ألوان الحدود */
  --mazyone-border-light: #E5E7EB;
  --mazyone-border-medium: #D1D5DB;
  --mazyone-border-dark: #9CA3AF;
  
  /* الظلال */
  --mazyone-shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --mazyone-shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1);
  --mazyone-shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.1);
  
  /* التدرجات */
  --mazyone-gradient-primary: linear-gradient(135deg, var(--mazyone-accent-blue) 0%, var(--mazyone-accent-teal) 100%);
  --mazyone-gradient-secondary: linear-gradient(135deg, var(--mazyone-accent-teal) 0%, var(--mazyone-accent-yellow) 100%);
  --mazyone-gradient-warm: linear-gradient(135deg, var(--mazyone-accent-yellow) 0%, var(--mazyone-accent-orange) 100%);
}

/* الوضع الليلي */
[data-theme="dark"] {
  --mazyone-bg-primary: #1E1E1E;
  --mazyone-bg-secondary: #2A2A2A;
  --mazyone-bg-light: #374151;
  
  --mazyone-text-primary: #F5F5F5;
  --mazyone-text-secondary: #E5E7EB;
  --mazyone-text-muted: #9CA3AF;
  --mazyone-text-light: #6B7280;
  
  --mazyone-border-light: #374151;
  --mazyone-border-medium: #4B5563;
  --mazyone-border-dark: #6B7280;
}

/* فئات الألوان المساعدة */
.bg-mazyone-primary { background-color: var(--mazyone-bg-primary); }
.bg-mazyone-secondary { background-color: var(--mazyone-bg-secondary); }
.bg-mazyone-accent-blue { background-color: var(--mazyone-accent-blue); }
.bg-mazyone-accent-teal { background-color: var(--mazyone-accent-teal); }
.bg-mazyone-accent-yellow { background-color: var(--mazyone-accent-yellow); }
.bg-mazyone-accent-orange { background-color: var(--mazyone-accent-orange); }

.text-mazyone-primary { color: var(--mazyone-text-primary); }
.text-mazyone-secondary { color: var(--mazyone-text-secondary); }
.text-mazyone-muted { color: var(--mazyone-text-muted); }
.text-mazyone-accent-blue { color: var(--mazyone-accent-blue); }
.text-mazyone-accent-teal { color: var(--mazyone-accent-teal); }

.border-mazyone-light { border-color: var(--mazyone-border-light); }
.border-mazyone-medium { border-color: var(--mazyone-border-medium); }
.border-mazyone-dark { border-color: var(--mazyone-border-dark); }

.shadow-mazyone-sm { box-shadow: var(--mazyone-shadow-sm); }
.shadow-mazyone-md { box-shadow: var(--mazyone-shadow-md); }
.shadow-mazyone-lg { box-shadow: var(--mazyone-shadow-lg); }

/* تدرجات الخلفية */
.bg-gradient-mazyone-primary { background: var(--mazyone-gradient-primary); }
.bg-gradient-mazyone-secondary { background: var(--mazyone-gradient-secondary); }
.bg-gradient-mazyone-warm { background: var(--mazyone-gradient-warm); }


============================================================
FILE: src/styles/components.css
============================================================
/* ملف المكونات المشتركة */

/* الأزرار المخصصة */
.btn-mazyone {
  @apply inline-flex items-center justify-center px-4 py-2 text-sm font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed;
}

.btn-mazyone-primary {
  @apply btn-mazyone text-white;
  background-color: var(--mazyone-accent-blue);
}

.btn-mazyone-primary:hover {
  background-color: #005BB5;
}

.btn-mazyone-primary:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.btn-mazyone-secondary {
  @apply btn-mazyone text-white;
  background-color: var(--mazyone-accent-teal);
}

.btn-mazyone-secondary:hover {
  background-color: #6BC7A8;
}

.btn-mazyone-warning {
  @apply btn-mazyone;
  background-color: var(--mazyone-accent-yellow);
  color: var(--mazyone-text-primary);
}

.btn-mazyone-warning:hover {
  background-color: #F1C40F;
}

.btn-mazyone-outline {
  @apply btn-mazyone border-2 bg-transparent;
  border-color: var(--mazyone-accent-blue);
  color: var(--mazyone-accent-blue);
}

.btn-mazyone-outline:hover {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

/* البطاقات المخصصة */
.card-mazyone {
  background-color: var(--mazyone-bg-primary);
  border: 1px solid var(--mazyone-border-light);
  border-radius: 0.75rem;
  padding: 1.5rem;
  box-shadow: var(--mazyone-shadow-sm);
  transition: all 0.2s ease-in-out;
}

.card-mazyone:hover {
  box-shadow: var(--mazyone-shadow-md);
  transform: translateY(-2px);
}

.card-mazyone-header {
  @apply mb-4 pb-4;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.card-mazyone-title {
  @apply text-lg font-semibold;
  color: var(--mazyone-text-primary);
}

.card-mazyone-description {
  @apply text-sm mt-1;
  color: var(--mazyone-text-secondary);
}

/* حقول الإدخال المخصصة */
.input-mazyone {
  @apply w-full px-4 py-3 border rounded-lg transition-colors focus:outline-none;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-medium);
  color: var(--mazyone-text-primary);
}

.input-mazyone:focus {
  border-color: var(--mazyone-accent-blue);
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.input-mazyone::placeholder {
  color: var(--mazyone-text-muted);
}

.input-mazyone-error {
  border-color: var(--mazyone-error);
}

.input-mazyone-error:focus {
  border-color: var(--mazyone-error);
  box-shadow: 0 0 0 3px rgba(239, 68, 68, 0.1);
}

/* الشارات المخصصة */
.badge-mazyone {
  @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
}

.badge-mazyone-primary {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.badge-mazyone-secondary {
  background-color: var(--mazyone-accent-teal);
  color: white;
}

.badge-mazyone-warning {
  background-color: var(--mazyone-accent-yellow);
  color: var(--mazyone-text-primary);
}

.badge-mazyone-success {
  background-color: var(--mazyone-success);
  color: white;
}

.badge-mazyone-error {
  background-color: var(--mazyone-error);
  color: white;
}

/* التنبيهات المخصصة */
.alert-mazyone {
  @apply p-4 rounded-lg border;
}

.alert-mazyone-success {
  background-color: #F0FDF4;
  border-color: var(--mazyone-success);
  color: #166534;
}

.alert-mazyone-warning {
  background-color: #FEF3C7;
  border-color: var(--mazyone-accent-yellow);
  color: #92400E;
}

.alert-mazyone-error {
  background-color: #FEF2F2;
  border-color: var(--mazyone-error);
  color: #991B1B;
}

.alert-mazyone-info {
  background-color: #EFF6FF;
  border-color: var(--mazyone-info);
  color: #1E40AF;
}

/* الجداول المخصصة */
.table-mazyone {
  @apply w-full border-collapse;
}

.table-mazyone th {
  @apply px-4 py-3 text-right text-xs font-medium uppercase tracking-wider;
  background-color: var(--mazyone-bg-secondary);
  color: var(--mazyone-text-muted);
  border-bottom: 1px solid var(--mazyone-border-light);
}

.table-mazyone td {
  @apply px-4 py-4 whitespace-nowrap text-sm;
  color: var(--mazyone-text-primary);
  border-bottom: 1px solid var(--mazyone-border-light);
}

.table-mazyone tbody tr:hover {
  background-color: var(--mazyone-bg-secondary);
}

/* القوائم المنسدلة المخصصة */
.dropdown-mazyone {
  @apply absolute right-0 mt-2 w-48 rounded-lg shadow-lg border py-1 z-50;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.dropdown-mazyone-item {
  @apply block px-4 py-2 text-sm transition-colors cursor-pointer;
  color: var(--mazyone-text-secondary);
}

.dropdown-mazyone-item:hover {
  background-color: var(--mazyone-bg-secondary);
  color: var(--mazyone-text-primary);
}

.dropdown-mazyone-divider {
  @apply my-1;
  border-top: 1px solid var(--mazyone-border-light);
}

/* المودال المخصص */
.modal-mazyone-overlay {
  @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
  backdrop-filter: blur(4px);
}

.modal-mazyone-content {
  @apply rounded-lg shadow-xl max-w-md w-full mx-4;
  background-color: var(--mazyone-bg-primary);
  border: 1px solid var(--mazyone-border-light);
}

.modal-mazyone-header {
  @apply px-6 py-4;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.modal-mazyone-title {
  @apply text-lg font-semibold;
  color: var(--mazyone-text-primary);
}

.modal-mazyone-body {
  @apply px-6 py-4;
}

.modal-mazyone-footer {
  @apply px-6 py-4 flex justify-end space-x-3 space-x-reverse;
  border-top: 1px solid var(--mazyone-border-light);
}

/* التبويبات المخصصة */
.tabs-mazyone {
  @apply flex border-b;
  border-color: var(--mazyone-border-light);
}

.tab-mazyone {
  @apply px-4 py-2 text-sm font-medium transition-colors cursor-pointer;
  color: var(--mazyone-text-muted);
  border-bottom: 2px solid transparent;
}

.tab-mazyone:hover {
  color: var(--mazyone-text-secondary);
}

.tab-mazyone.active {
  color: var(--mazyone-accent-blue);
  border-bottom-color: var(--mazyone-accent-blue);
}

.tab-content-mazyone {
  @apply py-4;
}

/* الشريط الجانبي المخصص */
.sidebar-mazyone {
  @apply fixed top-0 right-0 h-full border-l z-50 transition-transform duration-300 ease-in-out;
  background-color: var(--mazyone-bg-secondary);
  border-color: var(--mazyone-border-light);
  width: 16rem;
}

.sidebar-mazyone-header {
  @apply flex items-center justify-between p-6;
  border-bottom: 1px solid var(--mazyone-border-light);
}

.sidebar-mazyone-nav {
  @apply flex-1 px-6 pb-6 overflow-y-auto;
}

.sidebar-mazyone-link {
  @apply flex items-center space-x-3 space-x-reverse px-4 py-3 rounded-lg text-sm font-medium transition-colors;
  color: var(--mazyone-text-secondary);
}

.sidebar-mazyone-link:hover {
  background-color: var(--mazyone-bg-light);
}

.sidebar-mazyone-link.active {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

/* الهيدر المخصص */
.header-mazyone {
  @apply border-b px-6 py-4;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.header-mazyone-content {
  @apply flex items-center justify-between;
}

.header-mazyone-title {
  @apply text-xl font-semibold;
  color: var(--mazyone-text-primary);
}

.header-mazyone-actions {
  @apply flex items-center space-x-4 space-x-reverse;
}

/* بطاقات الإحصائيات */
.stats-card-mazyone {
  @apply card-mazyone hover:shadow-lg transition-shadow cursor-pointer;
}

.stats-card-mazyone-icon {
  @apply p-3 rounded-lg;
}

.stats-card-mazyone-value {
  @apply text-2xl font-bold;
  color: var(--mazyone-text-primary);
}

.stats-card-mazyone-label {
  @apply text-sm font-medium;
  color: var(--mazyone-text-muted);
}

.stats-card-mazyone-change {
  @apply text-sm font-medium flex items-center;
}

.stats-card-mazyone-change.positive {
  color: var(--mazyone-success);
}

.stats-card-mazyone-change.negative {
  color: var(--mazyone-error);
}

/* نماذج البحث */
.search-mazyone {
  @apply relative;
}

.search-mazyone-input {
  @apply input-mazyone pr-10;
}

.search-mazyone-icon {
  @apply absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4;
  color: var(--mazyone-text-muted);
}

.search-mazyone-results {
  @apply dropdown-mazyone mt-1;
}

.search-mazyone-result {
  @apply dropdown-mazyone-item;
}

.search-mazyone-result.highlighted {
  background-color: var(--mazyone-bg-light);
}

/* قوائم الإجراءات */
.action-menu-mazyone {
  @apply dropdown-mazyone;
}

.action-menu-mazyone-item {
  @apply dropdown-mazyone-item flex items-center space-x-2 space-x-reverse;
}

.action-menu-mazyone-icon {
  @apply w-4 h-4;
}

.action-menu-mazyone-text {
  @apply flex-1;
}

/* شارات الحالة */
.status-badge-mazyone {
  @apply badge-mazyone;
}

.status-badge-mazyone.active {
  @apply badge-mazyone-success;
}

.status-badge-mazyone.inactive {
  background-color: var(--mazyone-text-muted);
  color: white;
}

.status-badge-mazyone.pending {
  @apply badge-mazyone-warning;
}

.status-badge-mazyone.error {
  @apply badge-mazyone-error;
}

/* مؤشرات التحميل */
.loading-mazyone {
  @apply flex items-center justify-center;
}

.loading-mazyone-spinner {
  @apply w-6 h-6 border-2 border-gray-300 rounded-full animate-spin;
  border-top-color: var(--mazyone-accent-blue);
}

.loading-mazyone-dots {
  @apply flex space-x-1 space-x-reverse;
}

.loading-mazyone-dot {
  @apply w-2 h-2 rounded-full;
  background-color: var(--mazyone-accent-blue);
  animation: loading-dot 1.4s ease-in-out infinite both;
}

.loading-mazyone-dot:nth-child(1) { animation-delay: -0.32s; }
.loading-mazyone-dot:nth-child(2) { animation-delay: -0.16s; }

@keyframes loading-dot {
  0%, 80%, 100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}

/* شريط التقدم */
.progress-mazyone {
  @apply w-full rounded-full;
  background-color: var(--mazyone-bg-secondary);
  height: 0.5rem;
}

.progress-mazyone-bar {
  @apply h-full rounded-full transition-all duration-300;
  background-color: var(--mazyone-accent-blue);
}

.progress-mazyone-text {
  @apply text-sm font-medium mt-1;
  color: var(--mazyone-text-secondary);
}

/* مكونات النماذج */
.form-group-mazyone {
  @apply mb-4;
}

.form-label-mazyone {
  @apply block text-sm font-medium mb-2;
  color: var(--mazyone-text-primary);
}

.form-error-mazyone {
  @apply text-sm mt-1;
  color: var(--mazyone-error);
}

.form-help-mazyone {
  @apply text-sm mt-1;
  color: var(--mazyone-text-muted);
}

.form-checkbox-mazyone {
  @apply w-4 h-4 rounded border-gray-300 focus:ring-2 focus:ring-offset-2;
  color: var(--mazyone-accent-blue);
  border-color: var(--mazyone-border-medium);
}

.form-checkbox-mazyone:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.form-radio-mazyone {
  @apply w-4 h-4 border-gray-300 focus:ring-2 focus:ring-offset-2;
  color: var(--mazyone-accent-blue);
  border-color: var(--mazyone-border-medium);
}

.form-radio-mazyone:focus {
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

.form-select-mazyone {
  @apply input-mazyone;
  background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
  background-position: left 0.5rem center;
  background-repeat: no-repeat;
  background-size: 1.5em 1.5em;
  padding-left: 2.5rem;
}

/* مكونات التنقل */
.breadcrumb-mazyone {
  @apply flex items-center space-x-2 space-x-reverse text-sm;
}

.breadcrumb-mazyone-item {
  color: var(--mazyone-text-muted);
}

.breadcrumb-mazyone-item.active {
  color: var(--mazyone-text-primary);
  font-weight: 500;
}

.breadcrumb-mazyone-separator {
  color: var(--mazyone-text-light);
}

.pagination-mazyone {
  @apply flex items-center space-x-1 space-x-reverse;
}

.pagination-mazyone-item {
  @apply px-3 py-2 text-sm rounded-lg transition-colors;
  color: var(--mazyone-text-secondary);
}

.pagination-mazyone-item:hover {
  background-color: var(--mazyone-bg-secondary);
}

.pagination-mazyone-item.active {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.pagination-mazyone-item.disabled {
  color: var(--mazyone-text-light);
  cursor: not-allowed;
}

/* مكونات الإشعارات */
.notification-mazyone {
  @apply p-4 rounded-lg border shadow-lg max-w-sm;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
}

.notification-mazyone-header {
  @apply flex items-center justify-between mb-2;
}

.notification-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.notification-mazyone-close {
  @apply text-gray-400 hover:text-gray-600 cursor-pointer;
}

.notification-mazyone-body {
  @apply text-sm;
  color: var(--mazyone-text-secondary);
}

.notification-mazyone.success {
  border-left: 4px solid var(--mazyone-success);
}

.notification-mazyone.warning {
  border-left: 4px solid var(--mazyone-accent-yellow);
}

.notification-mazyone.error {
  border-left: 4px solid var(--mazyone-error);
}

.notification-mazyone.info {
  border-left: 4px solid var(--mazyone-info);
}

/* مكونات الأكورديون */
.accordion-mazyone {
  @apply border rounded-lg;
  border-color: var(--mazyone-border-light);
}

.accordion-mazyone-item {
  border-bottom: 1px solid var(--mazyone-border-light);
}

.accordion-mazyone-item:last-child {
  border-bottom: none;
}

.accordion-mazyone-header {
  @apply w-full flex items-center justify-between p-4 text-left hover:bg-gray-50 transition-colors;
  background-color: var(--mazyone-bg-primary);
}

.accordion-mazyone-header:hover {
  background-color: var(--mazyone-bg-secondary);
}

.accordion-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.accordion-mazyone-icon {
  @apply w-5 h-5 transition-transform;
  color: var(--mazyone-text-muted);
}

.accordion-mazyone-icon.expanded {
  transform: rotate(180deg);
}

.accordion-mazyone-content {
  @apply px-4 pb-4;
  color: var(--mazyone-text-secondary);
}

/* مكونات التقييم */
.rating-mazyone {
  @apply flex items-center space-x-1 space-x-reverse;
}

.rating-mazyone-star {
  @apply w-5 h-5 cursor-pointer transition-colors;
  color: var(--mazyone-text-light);
}

.rating-mazyone-star.filled {
  color: var(--mazyone-accent-yellow);
}

.rating-mazyone-star:hover {
  color: var(--mazyone-accent-yellow);
}

/* مكونات التبديل */
.toggle-mazyone {
  @apply relative inline-flex h-6 w-11 items-center rounded-full transition-colors;
  background-color: var(--mazyone-text-light);
}

.toggle-mazyone.checked {
  background-color: var(--mazyone-accent-blue);
}

.toggle-mazyone-handle {
  @apply inline-block h-4 w-4 transform rounded-full bg-white transition-transform;
  transform: translateX(0.25rem);
}

.toggle-mazyone.checked .toggle-mazyone-handle {
  transform: translateX(1.75rem);
}

/* مكونات التوقيت */
.timeline-mazyone {
  @apply relative;
}

.timeline-mazyone-item {
  @apply relative pb-8;
}

.timeline-mazyone-item:last-child {
  @apply pb-0;
}

.timeline-mazyone-line {
  @apply absolute right-4 top-4 -ml-px h-full w-0.5;
  background-color: var(--mazyone-border-medium);
}

.timeline-mazyone-item:last-child .timeline-mazyone-line {
  @apply hidden;
}

.timeline-mazyone-marker {
  @apply relative flex h-8 w-8 items-center justify-center rounded-full border-2;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-accent-blue);
}

.timeline-mazyone-content {
  @apply mr-12;
}

.timeline-mazyone-title {
  @apply font-medium;
  color: var(--mazyone-text-primary);
}

.timeline-mazyone-description {
  @apply text-sm mt-1;
  color: var(--mazyone-text-secondary);
}

.timeline-mazyone-time {
  @apply text-xs mt-1;
  color: var(--mazyone-text-muted);
}

/* مكونات خاصة بالمشروع */
.qr-preview-mazyone {
  @apply flex items-center justify-center p-4 rounded-lg border;
  background-color: var(--mazyone-bg-primary);
  border-color: var(--mazyone-border-light);
  min-height: 200px;
}

.card-preview-mazyone {
  @apply rounded-lg shadow-md p-6 max-w-sm mx-auto;
  background-color: var(--mazyone-bg-primary);
  border-top: 4px solid var(--mazyone-accent-blue);
}

.social-link-mazyone {
  @apply w-10 h-10 rounded-full flex items-center justify-center transition-colors;
  background-color: var(--mazyone-bg-secondary);
}

.social-link-mazyone:hover {
  background-color: var(--mazyone-accent-blue);
  color: white;
}

.landing-page-preview-mazyone {
  @apply aspect-video rounded-lg flex items-center justify-center;
  background: linear-gradient(135deg, var(--mazyone-accent-blue) 0%, var(--mazyone-accent-teal) 100%);
}

/* تحسينات الاستجابة */
@media (max-width: 640px) {
  .card-mazyone {
    padding: 1rem;
  }
  
  .btn-mazyone {
    @apply w-full justify-center;
  }
  
  .modal-mazyone-content {
    @apply mx-2;
  }
  
  .sidebar-mazyone {
    width: 100%;
  }
  
  .dropdown-mazyone {
    @apply w-full;
  }
}

@media (max-width: 768px) {
  .tabs-mazyone {
    @apply flex-col;
  }
  
  .tab-mazyone {
    @apply w-full text-center;
  }
  
  .header-mazyone-content {
    @apply flex-col space-y-4;
  }
  
  .stats-card-mazyone {
    @apply text-center;
  }
}

/* تحسينات الوصولية */
.focus-visible-mazyone:focus {
  outline: 2px solid var(--mazyone-accent-blue);
  outline-offset: 2px;
}

.sr-only-mazyone {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* تحسينات الطباعة */
@media print {
  .no-print-mazyone {
    display: none !important;
  }
  
  .card-mazyone {
    box-shadow: none;
    border: 1px solid #ddd;
  }
  
  .btn-mazyone {
    border: 1px solid #000;
    background: white !important;
    color: black !important;
  }
}


============================================================
FILE: src/styles/login.css
============================================================
/* المحاذاة الأفقية للعناصر */
@media (min-width: 1024px) {
  /* تأكد من أن الجانبين لهما نفس التخطيط العمودي */
  .min-h-screen.grid.lg\\:grid-cols-2 {
    grid-template-columns: 1fr 1fr;
    height: 100vh;
    align-items: stretch;
  }
  
  /* الجانب الأيسر */
  .flex.flex-col.justify-start {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 3rem 2rem;
  }
  
  /* الجانب الأيمن */
  .hidden.lg\\:flex.lg\\:flex-col {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
    align-items: center;
    padding: 3rem 2rem;
  }
}

/* تحسين المحاذاة الأفقية */
.horizontal-alignment {
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  width: 100%;
}

/* تحسين الخطوط */
.font-inter {
  font-family: 'Inter', sans-serif;
}

/* تحسين الألوان */
.text-primary-500 {
  color: #006BE3;
}

.dark .text-primary-500 {
  color: #7EDDB9;
}

/* تحسين الأزرار */
.btn-primary {
  background: linear-gradient(135deg, #006BE3 0%, #7EDDB9 100%);
  color: white;
  border: none;
  border-radius: 0.5rem;
  padding: 0.75rem 1.5rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
}

/* تحسين حقول الإدخال */
.input-field {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 1px solid #d1d5db;
  border-radius: 0.5rem;
  font-size: 0.875rem;
  transition: all 0.2s ease-in-out;
  background-color: white;
  color: #171717;
}

.dark .input-field {
  background-color: #262626;
  border-color: #404040;
  color: #f5f5f5;
}

.input-field:focus {
  outline: none;
  border-color: #006BE3;
  box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
}

/* تحسين الاستجابة للموبايل */
@media (max-width: 1023px) {
  .hidden.lg\\:flex {
    display: none !important;
  }
  
  .flex.flex-col.justify-start {
    justify-content: center;
  }
}


============================================================
FILE: src/styles/variables.css
============================================================
:root {
  /* Brand Colors */
  --color-primary: #3B82F6;
  --color-primary-hover: #2563EB;
  --color-secondary: #F59E0B;
  --color-accent: #10B981;
  
  /* Neutral Colors */
  --color-neutral-50: #F9FAFB;
  --color-neutral-100: #F3F4F6;
  --color-neutral-200: #E5E7EB;
  --color-neutral-300: #D1D5DB;
  --color-neutral-400: #9CA3AF;
  --color-neutral-500: #6B7280;
  --color-neutral-600: #4B5563;
  --color-neutral-700: #374151;
  --color-neutral-800: #1F2937;
  --color-neutral-900: #111827;
  
  /* Background Colors */
  --bg-primary: #FFFFFF;
  --bg-secondary: #F9FAFB;
  --bg-accent: #F59E0B;
  
  /* Text Colors */
  --text-primary: #111827;
  --text-secondary: #6B7280;
  --text-light: #FFFFFF;
}

.dark {
  --bg-primary: #1F2937;
  --bg-secondary: #111827;
  --text-primary: #F9FAFB;
  --text-secondary: #D1D5DB;
}


============================================================
FILE: src/App.css
============================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}


============================================================
FILE: src/App.tsx
============================================================
import React, { useEffect } from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';
import { Toaster } from 'react-hot-toast';
import { useStore } from './store/useStore';

// Layout
import Layout from './components/Layout/Layout';

// Public Pages
import LandingPage from './pages/LandingPage';
import Login from './pages/Login';
import Register from './pages/Register';
import Payment from './pages/Payment';

// Protected Pages
import Dashboard from './pages/Dashboard';
import Cards from './pages/Cards';
import CreateCard from './pages/CreateCard';
import CardView from './pages/CardView';
import Contacts from './pages/Contacts';
import Jobs from './pages/Jobs';
import QRGenerator from './pages/QRGenerator';
import Analytics from './pages/Analytics';
import Scan from './pages/Scan';
import CVBuilder from './pages/CVBuilder';
import LandingPages from './pages/LandingPages';
import Referrals from './pages/Referrals';
import Settings from './pages/Settings';
import Support from './pages/Support';
import Subscription from './pages/Subscription';
import ThemeCustomizer from './components/ThemeCustomizer';

function App() {
  const { isAuthenticated, darkMode } = useStore();

  useEffect(() => {
    // Apply dark mode on initial load
    if (darkMode) {
      document.documentElement.setAttribute('data-theme', 'dark');
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.removeAttribute('data-theme');
      document.documentElement.classList.remove('dark');
    }
  }, [darkMode]);

  return (
    <Router>
      <div className="App">
        <Toaster
          position="top-center"
          toastOptions={{
            duration: 4000,
            style: {
              background: 'var(--bg-primary)',
              color: 'var(--text-primary)',
              border: '1px solid var(--border-light)',
              borderRadius: '8px',
              fontSize: '14px',
              fontWeight: '500',
            },
            success: {
              style: {
                background: '#10B981',
                color: '#FFFFFF',
              },
              iconTheme: {
                primary: '#FFFFFF',
                secondary: '#10B981',
              },
            },
            error: {
              style: {
                background: '#EF4444',
                color: '#FFFFFF',
              },
              iconTheme: {
                primary: '#FFFFFF',
                secondary: '#EF4444',
              },
            },
          }}
        />
        
        <Routes>
          {/* Public Routes */}
          <Route path="/" element={<LandingPage />} />
          <Route 
            path="/login" 
            element={
              isAuthenticated ? <Navigate to="/dashboard" replace /> : <Login />
            } 
          />
          <Route 
            path="/register" 
            element={
              isAuthenticated ? <Navigate to="/dashboard" replace /> : <Register />
            } 
          />
          <Route 
            path="/payment" 
            element={
              isAuthenticated ? <Payment /> : <Navigate to="/login" replace />
            } 
          />
          
          {/* Protected Routes */}
          <Route 
            path="/dashboard" 
            element={
              isAuthenticated ? <Layout><Dashboard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards" 
            element={
              isAuthenticated ? <Layout><Cards /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/new" 
            element={
              isAuthenticated ? <Layout><CreateCard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/:id" 
            element={
              isAuthenticated ? <Layout><CardView /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cards/:id/edit" 
            element={
              isAuthenticated ? <Layout><CreateCard /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/contacts" 
            element={
              isAuthenticated ? <Layout><Contacts /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/jobs" 
            element={
              isAuthenticated ? <Layout><Jobs /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/qr-generator" 
            element={
              isAuthenticated ? <Layout><QRGenerator /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/landing-pages" 
            element={
              isAuthenticated ? <Layout><LandingPages /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/cv-builder" 
            element={
              isAuthenticated ? <Layout><CVBuilder /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/scan" 
            element={
              isAuthenticated ? <Layout><Scan /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/analytics" 
            element={
              isAuthenticated ? <Layout><Analytics /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/referrals" 
            element={
              isAuthenticated ? <Layout><Referrals /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/subscription" 
            element={
              isAuthenticated ? <Layout><Subscription /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/settings" 
            element={
              isAuthenticated ? <Layout><Settings /></Layout> : <Navigate to="/login" replace />
            }
          />
          <Route 
            path="/support" 
            element={
              isAuthenticated ? <Layout><Support /></Layout> : <Navigate to="/login" replace />
            }
          />
          
          {/* Catch all route */}
          <Route path="*" element={<Navigate to="/" replace />} />
        </Routes>
      </div>
            <ThemeCustomizer />   {/* أضف المكوّن داخل الـ Router */}

    </Router>
  );
}

export default App;


============================================================
FILE: src/index.css
============================================================
@import url('https://fonts.googleapis.com/css2?family=Cairo:wght@300;400;500;600;700&family=Poppins:wght@300;400;500;600;700&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

/* نظام الألوان المحدد من العميل */
:root {
  /* النصوص الأساسية - رمادي غامق */
  --text-primary: #2D2D2D;
  --text-secondary: #444444;
  
  /* الخلفية الثانوية (بطاقات، أقسام جانبية) - رمادي فاتح */
  --bg-secondary: #EDEDED;
  --bg-light: #F5F5F5;
  
  /* الخلفية الرئيسية - أبيض نقي */
  --bg-primary: #FFFFFF;
  
  /* الأزرار/الروابط الرئيسية - أزرق */
  --btn-primary: #006BE3;
  --btn-primary-hover: #005BB5;
  
  /* الأزرار الثانوية/المساندة - تركوازي */
  --btn-secondary: #7EDDB9;
  --btn-secondary-hover: #6BC7A8;
  
  /* التنبيهات/التمييز - أصفر */
  --alert-warning: #FACC15;
  --alert-warning-hover: #F1C40F;
  
  /* أزرار الحث على الإجراء (CTA) - برتقالي */
  --btn-cta: #E1841F;
  --btn-cta-hover: #D4751A;
  
  /* ألوان إضافية للنظام */
  --success: #22C55E;
  --error: #EF4444;
  --info: #3B82F6;
  
  /* الحدود والظلال */
  --border-light: #E5E7EB;
  --border-medium: #D1D5DB;
  --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
  --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
  --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

/* الوضع الليلي */
[data-theme="dark"] {
  --bg-primary: #1E1E1E;
  --bg-secondary: #2A2A2A;
  --bg-light: #374151;
  --text-primary: #F5F5F5;
  --text-secondary: #E5E7EB;
  --border-light: #374151;
  --border-medium: #4B5563;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}


.font-inter {
  font-family: 'Inter', sans-serif;
}

body {
  font-family: 'Cairo', 'Poppins', sans-serif;
  background-color: var(--bg-primary);
  color: var(--text-primary);
  direction: rtl;
  text-align: right;
  line-height: 1.6;
}

.ltr {
  direction: ltr;
  text-align: left;
}

@layer components {
  /* الأزرار الأساسية */
  .btn-primary {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-primary);
  }
  
  .btn-primary:hover {
    background-color: var(--btn-primary-hover);
  }
  
  .btn-primary:focus {
    box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
  }
  
  .btn-secondary {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-secondary);
  }
  
  .btn-secondary:hover {
    background-color: var(--btn-secondary-hover);
  }
  
  .btn-cta {
    @apply inline-flex items-center justify-center px-6 py-3 text-white font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--btn-cta);
  }
  
  .btn-cta:hover {
    background-color: var(--btn-cta-hover);
  }
  
  .btn-warning {
    @apply inline-flex items-center justify-center px-6 py-3 font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .btn-warning:hover {
    background-color: var(--alert-warning-hover);
  }
  
  /* البطاقات */
  .card {
    background-color: var(--bg-primary);
    border-radius: 0.75rem;
    box-shadow: var(--shadow-sm);
    border: 1px solid var(--border-light);
    padding: 1.5rem;
    transition: all 0.2s ease-in-out;
  }
  
  .card:hover {
    box-shadow: var(--shadow-md);
  }
  
  .card-secondary {
    background-color: var(--bg-secondary);
    border-radius: 0.75rem;
    padding: 1.5rem;
    border: 1px solid var(--border-light);
  }
  
  /* حقول الإدخال */
  .input-field {
    @apply w-full px-4 py-3 border rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2;
    background-color: var(--bg-primary);
    border-color: var(--border-medium);
    color: var(--text-primary);
  }
  
  .input-field:focus {
    border-color: var(--btn-primary);
    box-shadow: 0 0 0 3px rgba(0, 107, 227, 0.1);
  }
  
  .input-field::placeholder {
    color: var(--text-secondary);
    opacity: 0.7;
  }
  
  /* التنبيهات */
  .alert-success {
    @apply p-4 rounded-lg border;
    background-color: #F0FDF4;
    border-color: var(--success);
    color: #166534;
  }
  
  .alert-warning {
    @apply p-4 rounded-lg border;
    background-color: #FEF3C7;
    border-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .alert-error {
    @apply p-4 rounded-lg border;
    background-color: #FEF2F2;
    border-color: var(--error);
    color: #991B1B;
  }
  
  .alert-info {
    @apply p-4 rounded-lg border;
    background-color: #EFF6FF;
    border-color: var(--info);
    color: #1E40AF;
  }
  
  /* الشارات */
  .badge-primary {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-primary);
  }
  
  .badge-secondary {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-secondary);
  }
  
  .badge-warning {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium;
    background-color: var(--alert-warning);
    color: var(--text-primary);
  }
  
  .badge-cta {
    @apply inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white;
    background-color: var(--btn-cta);
  }
  
  /* النصوص */
  .text-primary {
    color: var(--text-primary);
  }
  
  .text-secondary {
    color: var(--text-secondary);
  }
  
  /* الخلفيات */
  .bg-primary {
    background-color: var(--bg-primary);
  }
  
  .bg-secondary {
    background-color: var(--bg-secondary);
  }
  
  .bg-light {
    background-color: var(--bg-light);
  }
  
  /* الشريط الجانبي */
  .sidebar-link {
    @apply flex items-center space-x-3 space-x-reverse px-4 py-3 rounded-lg text-sm font-medium transition-colors;
    color: var(--text-secondary);
  }
  
  .sidebar-link:hover {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
  }
  
  .sidebar-link.active {
    background-color: var(--btn-primary);
    color: white;
  }

  .sidebar {
  overflow-x: hidden !important;
  overflow-y: auto;
}

/* تحسين container الـ sidebar */
.sidebar-container {
  width: 100%;
  max-width: 100%;
  overflow-x: hidden;
}

/* تحسين النصوص لتجنب الفيض */
.sidebar-link {
  width: 100%;
  overflow: hidden;
}

.sidebar-link span {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  max-width: calc(100% - 3rem); /* مساحة للأيقونة والحواف */
  display: inline-block;
}
  
  /* الجداول */
  .table {
    @apply w-full border-collapse;
  }
  
  .table th {
    @apply px-4 py-3 text-right text-xs font-medium uppercase tracking-wider;
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
    border-bottom: 1px solid var(--border-light);
  }
  
  .table td {
    @apply px-4 py-4 whitespace-nowrap text-sm;
    color: var(--text-primary);
    border-bottom: 1px solid var(--border-light);
  }
  
  .table tbody tr:hover {
    background-color: var(--bg-light);
  }
  
  /* القوائم المنسدلة */
  .dropdown-menu {
    @apply absolute right-0 mt-2 w-48 rounded-lg shadow-lg border py-1 z-50;
    background-color: var(--bg-primary);
    border-color: var(--border-light);
  }
  
  .dropdown-item {
    @apply block px-4 py-2 text-sm transition-colors cursor-pointer;
    color: var(--text-secondary);
  }
  
  .dropdown-item:hover {
    background-color: var(--bg-secondary);
    color: var(--text-primary);
  }
  
  /* الحالات */
  .status-active {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: #DCFCE7;
    color: #166534;
  }
  
  .status-inactive {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
  }
  
  .status-pending {
    @apply px-2 py-1 rounded-full text-xs font-medium;
    background-color: #FEF3C7;
    color: var(--text-primary);
  }
  
  /* مؤشرات التحميل */
  .loading-spinner {
    @apply animate-spin rounded-full border-2;
    border-color: var(--border-medium);
    border-top-color: var(--btn-primary);
  }
  
  /* التنقل */
  .breadcrumb {
    @apply flex items-center space-x-2 space-x-reverse text-sm;
    color: var(--text-secondary);
  }
  
  .breadcrumb-item.active {
    color: var(--text-primary);
    font-weight: 500;
  }
  
  /* الإشعارات */
  .notification-badge {
    @apply absolute -top-1 -right-1 w-5 h-5 rounded-full flex items-center justify-center text-xs font-bold text-white;
    background-color: var(--btn-cta);
  }
  
  /* التدرجات */
  .gradient-primary {
    background: linear-gradient(135deg, var(--btn-primary) 0%, var(--btn-secondary) 100%);
  }
  
  .gradient-warning {
    background: linear-gradient(135deg, var(--alert-warning) 0%, var(--btn-cta) 100%);
  }
  
  /* تأثيرات التمرير */
  .hover-lift {
    transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
  }
  
  .hover-lift:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
  }
  
  /* المودال */
  .modal-overlay {
    @apply fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50;
  }
  
  .modal-content {
    background-color: var(--bg-primary);
    @apply rounded-lg shadow-xl max-w-md w-full mx-4;
    border: 1px solid var(--border-light);
  }
  
  .modal-header {
    @apply px-6 py-4;
    border-bottom: 1px solid var(--border-light);
  }
  
  .modal-body {
    @apply px-6 py-4;
  }
  
  .modal-footer {
    @apply px-6 py-4 flex justify-end space-x-3 space-x-reverse;
    border-top: 1px solid var(--border-light);
  }
}

/* تحسينات الاستجابة */
@media (max-width: 640px) {
  .card {
    padding: 1rem;
  }
  
  .btn-primary,
  .btn-secondary,
  .btn-cta,
  .btn-warning {
    @apply w-full justify-center;
  }
}

/* تحسينات الوصولية */
.focus-visible:focus {
  outline: 2px solid var(--btn-primary);
  outline-offset: 2px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* تحسينات الطباعة */
@media print {
  .no-print {
    display: none !important;
  }
  
  .card {
    box-shadow: none;
    border: 1px solid #ddd;
  }
}


/* تحسينات التمرير المخفي */
.scrollbar-thin {
  scrollbar-width: thin;
  scrollbar-color: transparent transparent;
}

.scrollbar-thin:hover {
  scrollbar-color: #D1D5DB #F3F4F6;
}

.scrollbar-thin::-webkit-scrollbar {
  width: 4px;
}

.scrollbar-thin::-webkit-scrollbar-track {
  background: transparent;
}

.scrollbar-thin::-webkit-scrollbar-thumb {
  background: transparent;
  border-radius: 2px;
}

.scrollbar-thin:hover::-webkit-scrollbar-thumb {
  background: #D1D5DB;
}

.scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background: #9CA3AF;
}

/* الوضع الليلي */
.dark .scrollbar-thin:hover {
  scrollbar-color: #4B5563 #374151;
}

.dark .scrollbar-thin:hover::-webkit-scrollbar-thumb {
  background: #4B5563;
}

.dark .scrollbar-thin::-webkit-scrollbar-thumb:hover {
  background: #6B7280;
}

/* تحسينات إضافية للشريط الجانبي */
.sidebar-link {
  @apply flex items-center justify-between px-3 py-2.5 rounded-lg text-sm font-medium transition-all duration-200 relative;
}

.sidebar-link:hover {
  @apply bg-neutral-100 dark:bg-neutral-800;
}

.sidebar-link.active {
  @apply bg-blue-500 text-white shadow-lg;
}

.sidebar-link.active::before {
  content: '';
  position: absolute;
  right: -16px;
  top: 50%;
  transform: translateY(-50%);
  width: 4px;
  height: 20px;
  background: #1D4ED8;
  border-radius: 2px;
}


/* تحسينات صفحة تسجيل الدخول */
.login-container {
  min-height: 100vh;
}

/* للشاشات الكبيرة - عرض ثابت */
@media (min-width: 1024px) {
  .login-desktop-container {
    width: 100vw;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    display: flex;
    overflow: hidden;
  }
  
  .login-form-side {
    width: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .login-image-side {
    width: 50%;
    position: relative;
  }
}

/* للموبايل - متجاوب */
@media (max-width: 1023px) {
  .login-mobile-container {
    min-height: 100vh;
    padding: 1rem;
  }
}

/* تحسين inputs */
.login-input {
  transition: all 0.3s ease;
}

.login-input:focus {
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
}

/* تحسين الـ button */
.login-button {
  transition: all 0.3s ease;
}

.login-button:hover {
  transform: translateY(-1px);
  box-shadow: 0 8px 25px rgba(59, 130, 246, 0.25);
}

/* تحسين الألوان للـ dark mode */
.dark .login-input {
  background-color: #374151;
  border-color: #4B5563;
  color: #F9FAFB;
}

.dark .login-input:focus {
  border-color: #3B82F6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}


============================================================
FILE: src/main.tsx
============================================================
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)


============================================================
FILE: .firebaserc
============================================================
{
  "projects": {
    "default": "ecard-frontend"
  }
}


============================================================
FILE: eslint.config.js
============================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


============================================================
FILE: export-src-to-txt.js
============================================================
// export-src-to-txt.js
// Collects every file inside src/ and writes them (with paths) to src-files.txt

import { promises as fs } from 'fs';
import path from 'path';

const PROJECT_ROOT = process.cwd();     // where you launched the script
const SRC_DIR      = path.join(PROJECT_ROOT, 'src');
const OUT_FILE     = path.join(PROJECT_ROOT, 'src-files.txt');

async function getAllFiles(dir) {
  const dirents = await fs.readdir(dir, { withFileTypes: true });
  const files   = await Promise.all(
    dirents.map((d) => {
      const res = path.join(dir, d.name);
      return d.isDirectory() ? getAllFiles(res) : res;
    })
  );
  return files.flat();
}

async function main() {
  console.time('⏱  Done in');

  const files = await getAllFiles(SRC_DIR);
  const outParts = [];

  for (const file of files) {
    const relPath = path.relative(PROJECT_ROOT, file).replace(/\\/g, '/');
    const content = await fs.readFile(file, 'utf8');

    outParts.push(`\n===== ${relPath} =====\n`);
    outParts.push(content);
  }

  await fs.writeFile(OUT_FILE, outParts.join(''), 'utf8');
  console.log(`✅  Wrote ${files.length} files into ${path.basename(OUT_FILE)}`);
  console.timeEnd('⏱  Done in');
}

main().catch((err) => {
  console.error('❌  Error:', err);
  process.exit(1);
});


============================================================
FILE: firebase.json
============================================================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],

    "headers": [
      {
        "source": "**",                        
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache, no-store, must-revalidate"
          },
          { "key": "Pragma",  "value": "no-cache" },
          { "key": "Expires", "value": "0" }
        ]
      }
    ],

    "rewrites": [
      { "source": "**", "destination": "/index.html" }
    ]
  }
}


============================================================
FILE: package.json
============================================================
{
  "name": "mazyone-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@types/qrcode": "^1.5.5",
    "@vitejs/plugin-react-swc": "^3.10.2",
    "clsx": "^2.1.1",
    "date-fns": "^2.30.0",
    "framer-motion": "^10.18.0",
    "html2canvas": "^1.4.1",
    "html5-qrcode": "^2.3.8",
    "jspdf": "^2.5.2",
    "lucide-react": "^0.263.1",
    "qrcode": "^1.5.4",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-qr-code": "^2.0.11",
    "react-router-dom": "^6.30.1",
    "react-select": "^5.7.4",
    "react-webcam": "^7.1.1",
    "recharts": "^2.8.0",
    "tailwind-merge": "^1.14.0",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.0.2",
    "vite": "^4.4.5",
    "vite-plugin-svgr": "^4.3.0"
  }
}


============================================================
FILE: postcss.config.js
============================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


============================================================
FILE: README.md
============================================================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


============================================================
FILE: tailwind.config.js
============================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        // الألوان الأساسية المحددة من العميل
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          500: '#006BE3', // الأزرار/الروابط الرئيسية - أزرق
          600: '#005BB5',
          700: '#004A94',
          800: '#003973',
          900: '#002952',
        },
        secondary: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          500: '#7EDDB9', // الأزرار الثانوية/المساندة - تركوازي
          600: '#6BC7A8',
          700: '#059669',
          800: '#065f46',
          900: '#064e3b',
        },
        warning: {
          50: '#fffbeb',
          100: '#fef3c7',
          500: '#FACC15', // التنبيهات/التمييز - أصفر
          600: '#F1C40F',
          700: '#a16207',
          800: '#92400e',
          900: '#78350f',
        },
        cta: {
          50: '#fff7ed',
          100: '#ffedd5',
          500: '#E1841F', // أزرار الحث على الإجراء - برتقالي
          600: '#D4751A',
          700: '#c2410c',
          800: '#9a3412',
          900: '#7c2d12',
        },
        neutral: {
          50: '#F5F5F5',   // الخلفية الثانوية - رمادي فاتح
          100: '#EDEDED',  // الخلفية الثانوية - رمادي فاتح
          200: '#E0E0E0',
          300: '#D1D5DB',
          400: '#9CA3AF',
          500: '#6B7280',
          600: '#444444',  // النصوص الثانوية - رمادي
          700: '#374151',
          800: '#2D2D2D',  // النصوص الأساسية - رمادي غامق
          900: '#1E1E1E',
        },
        white: '#FFFFFF',  // الخلفية الرئيسية - أبيض نقي
      },
      fontFamily: {
        'arabic': ['Cairo', 'sans-serif'],
        'latin': ['Poppins', 'sans-serif'],
        'sans': ['Cairo', 'Poppins', 'ui-sans-serif', 'system-ui'],
      },
      boxShadow: {
        'card': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'card-hover': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      },
    },
  },
  plugins: [],
}


============================================================
FILE: tsconfig.app.json
============================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


============================================================
FILE: tsconfig.json
============================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


============================================================
FILE: tsconfig.node.json
============================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

============================================================
FILE: eslint.config.js
============================================================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])


============================================================
FILE: firebase.json
============================================================
{
  "hosting": {
    "public": "dist",
    "ignore": [
      "firebase.json",
      "**/.*",
      "**/node_modules/**"
    ],

    "headers": [
      {
        "source": "**",                        
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache, no-store, must-revalidate"
          },
          { "key": "Pragma",  "value": "no-cache" },
          { "key": "Expires", "value": "0" }
        ]
      }
    ],

    "rewrites": [
      { "source": "**", "destination": "/index.html" }
    ]
  }
}


============================================================
FILE: package.json
============================================================
{
  "name": "mazyone-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@types/qrcode": "^1.5.5",
    "@vitejs/plugin-react-swc": "^3.10.2",
    "clsx": "^2.1.1",
    "date-fns": "^2.30.0",
    "framer-motion": "^10.18.0",
    "html2canvas": "^1.4.1",
    "html5-qrcode": "^2.3.8",
    "jspdf": "^2.5.2",
    "lucide-react": "^0.263.1",
    "qrcode": "^1.5.4",
    "react": "^18.2.0",
    "react-beautiful-dnd": "^13.1.1",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-hook-form": "^7.60.0",
    "react-hot-toast": "^2.5.2",
    "react-qr-code": "^2.0.11",
    "react-router-dom": "^6.30.1",
    "react-select": "^5.7.4",
    "react-webcam": "^7.1.1",
    "recharts": "^2.8.0",
    "tailwind-merge": "^1.14.0",
    "zustand": "^4.5.7"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.0.0",
    "@typescript-eslint/parser": "^6.0.0",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.21",
    "eslint": "^8.45.0",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.0.2",
    "vite": "^4.4.5",
    "vite-plugin-svgr": "^4.3.0"
  }
}


============================================================
FILE: postcss.config.js
============================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


============================================================
FILE: README.md
============================================================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```


============================================================
FILE: tailwind.config.js
============================================================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        // الألوان الأساسية المحددة من العميل
        primary: {
          50: '#eff6ff',
          100: '#dbeafe',
          500: '#006BE3', // الأزرار/الروابط الرئيسية - أزرق
          600: '#005BB5',
          700: '#004A94',
          800: '#003973',
          900: '#002952',
        },
        secondary: {
          50: '#f0fdfa',
          100: '#ccfbf1',
          500: '#7EDDB9', // الأزرار الثانوية/المساندة - تركوازي
          600: '#6BC7A8',
          700: '#059669',
          800: '#065f46',
          900: '#064e3b',
        },
        warning: {
          50: '#fffbeb',
          100: '#fef3c7',
          500: '#FACC15', // التنبيهات/التمييز - أصفر
          600: '#F1C40F',
          700: '#a16207',
          800: '#92400e',
          900: '#78350f',
        },
        cta: {
          50: '#fff7ed',
          100: '#ffedd5',
          500: '#E1841F', // أزرار الحث على الإجراء - برتقالي
          600: '#D4751A',
          700: '#c2410c',
          800: '#9a3412',
          900: '#7c2d12',
        },
        neutral: {
          50: '#F5F5F5',   // الخلفية الثانوية - رمادي فاتح
          100: '#EDEDED',  // الخلفية الثانوية - رمادي فاتح
          200: '#E0E0E0',
          300: '#D1D5DB',
          400: '#9CA3AF',
          500: '#6B7280',
          600: '#444444',  // النصوص الثانوية - رمادي
          700: '#374151',
          800: '#2D2D2D',  // النصوص الأساسية - رمادي غامق
          900: '#1E1E1E',
        },
        white: '#FFFFFF',  // الخلفية الرئيسية - أبيض نقي
      },
      fontFamily: {
        'arabic': ['Cairo', 'sans-serif'],
        'latin': ['Poppins', 'sans-serif'],
        'sans': ['Cairo', 'Poppins', 'ui-sans-serif', 'system-ui'],
      },
      boxShadow: {
        'card': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'card-hover': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
      },
    },
  },
  plugins: [],
}


============================================================
FILE: tsconfig.app.json
============================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}


============================================================
FILE: tsconfig.json
============================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}


============================================================
FILE: tsconfig.node.json
============================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}